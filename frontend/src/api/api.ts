/* tslint:disable */
/* eslint-disable */
/**
 * OpenAPI definition
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import type { Configuration } from './configuration';
import type { AxiosPromise, AxiosInstance, RawAxiosRequestConfig } from 'axios';
import globalAxios from 'axios';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from './common';
import type { RequestArgs } from './base';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, BaseAPI, RequiredError, operationServerMap } from './base';

/**
 * 
 * @export
 * @interface AbstractJsonSchemaPropertyObject
 */
export interface AbstractJsonSchemaPropertyObject {
    /**
     * 
     * @type {string}
     * @memberof AbstractJsonSchemaPropertyObject
     */
    'title'?: string;
    /**
     * 
     * @type {boolean}
     * @memberof AbstractJsonSchemaPropertyObject
     */
    'readOnly'?: boolean;
}
/**
 * 
 * @export
 * @interface Author
 */
export interface Author {
    /**
     * 
     * @type {number}
     * @memberof Author
     */
    'id'?: number;
    /**
     * 
     * @type {string}
     * @memberof Author
     */
    'name'?: string;
    /**
     * 
     * @type {Array<BookMaster>}
     * @memberof Author
     */
    'bookMaster'?: Array<BookMaster>;
}
/**
 * 
 * @export
 * @interface AuthorRequestBody
 */
export interface AuthorRequestBody {
    /**
     * 
     * @type {number}
     * @memberof AuthorRequestBody
     */
    'id'?: number;
    /**
     * 
     * @type {string}
     * @memberof AuthorRequestBody
     */
    'name'?: string;
    /**
     * 
     * @type {Array<string>}
     * @memberof AuthorRequestBody
     */
    'bookMaster'?: Array<string>;
}
/**
 * 
 * @export
 * @interface BookMaster
 */
export interface BookMaster {
    /**
     * 
     * @type {string}
     * @memberof BookMaster
     */
    'name': string;
    /**
     * 
     * @type {string}
     * @memberof BookMaster
     */
    'publicationDate': string;
    /**
     * 
     * @type {NdcCategory}
     * @memberof BookMaster
     */
    'ndcCategory': NdcCategory;
    /**
     * 
     * @type {number}
     * @memberof BookMaster
     */
    'id'?: number;
    /**
     * 
     * @type {Array<Author>}
     * @memberof BookMaster
     */
    'author'?: Array<Author>;
}
/**
 * 
 * @export
 * @interface BookMasterAuthorRelationshipRequestBody
 */
export interface BookMasterAuthorRelationshipRequestBody {
    /**
     * 
     * @type {number}
     * @memberof BookMasterAuthorRelationshipRequestBody
     */
    'id'?: number;
    /**
     * 
     * @type {string}
     * @memberof BookMasterAuthorRelationshipRequestBody
     */
    'bookMaster'?: string;
    /**
     * 
     * @type {string}
     * @memberof BookMasterAuthorRelationshipRequestBody
     */
    'author'?: string;
}
/**
 * 
 * @export
 * @interface BookMasterResponse
 */
export interface BookMasterResponse {
    /**
     * 
     * @type {string}
     * @memberof BookMasterResponse
     */
    'name': string;
    /**
     * 
     * @type {string}
     * @memberof BookMasterResponse
     */
    'publicationDate': string;
    /**
     * 
     * @type {NdcCategory}
     * @memberof BookMasterResponse
     */
    'ndcCategory': NdcCategory;
    /**
     * 
     * @type {number}
     * @memberof BookMasterResponse
     */
    'id'?: number;
    /**
     * 
     * @type {Array<Author>}
     * @memberof BookMasterResponse
     */
    'author'?: Array<Author>;
}
/**
 * 
 * @export
 * @interface BookStock
 */
export interface BookStock {
    /**
     * 
     * @type {BookMaster}
     * @memberof BookStock
     */
    'bookMaster': BookMaster;
    /**
     * 
     * @type {BookStockStatus}
     * @memberof BookStock
     */
    'bookStockStatus': BookStockStatus;
    /**
     * 
     * @type {number}
     * @memberof BookStock
     */
    'id'?: number;
    /**
     * 
     * @type {string}
     * @memberof BookStock
     */
    'memo'?: string;
    /**
     * 
     * @type {Array<LendingSet>}
     * @memberof BookStock
     */
    'lendingSet'?: Array<LendingSet>;
}
/**
 * 
 * @export
 * @interface BookStockRequestBody
 */
export interface BookStockRequestBody {
    /**
     * 
     * @type {string}
     * @memberof BookStockRequestBody
     */
    'bookMaster': string;
    /**
     * 
     * @type {string}
     * @memberof BookStockRequestBody
     */
    'bookStockStatus': string;
    /**
     * 
     * @type {number}
     * @memberof BookStockRequestBody
     */
    'id'?: number;
    /**
     * 
     * @type {string}
     * @memberof BookStockRequestBody
     */
    'memo'?: string;
    /**
     * 
     * @type {Array<string>}
     * @memberof BookStockRequestBody
     */
    'lendingSet'?: Array<string>;
}
/**
 * 
 * @export
 * @interface BookStockResponse
 */
export interface BookStockResponse {
    /**
     * 
     * @type {number}
     * @memberof BookStockResponse
     */
    'id'?: number;
    /**
     * 
     * @type {string}
     * @memberof BookStockResponse
     */
    'memo'?: string;
}
/**
 * 
 * @export
 * @interface BookStockStatus
 */
export interface BookStockStatus {
    /**
     * 
     * @type {number}
     * @memberof BookStockStatus
     */
    'id'?: number;
    /**
     * 
     * @type {string}
     * @memberof BookStockStatus
     */
    'name'?: string;
}
/**
 * 
 * @export
 * @interface BookStockStatusRequestBody
 */
export interface BookStockStatusRequestBody {
    /**
     * 
     * @type {number}
     * @memberof BookStockStatusRequestBody
     */
    'id'?: number;
    /**
     * 
     * @type {string}
     * @memberof BookStockStatusRequestBody
     */
    'name'?: string;
}
/**
 * 
 * @export
 * @interface CollectionModelBookMaster
 */
export interface CollectionModelBookMaster {
    /**
     * 
     * @type {CollectionModelBookMasterEmbedded}
     * @memberof CollectionModelBookMaster
     */
    '_embedded'?: CollectionModelBookMasterEmbedded;
    /**
     * 
     * @type {{ [key: string]: Link; }}
     * @memberof CollectionModelBookMaster
     */
    '_links'?: { [key: string]: Link; };
}
/**
 * 
 * @export
 * @interface CollectionModelBookMasterEmbedded
 */
export interface CollectionModelBookMasterEmbedded {
    /**
     * 
     * @type {Array<BookMasterResponse>}
     * @memberof CollectionModelBookMasterEmbedded
     */
    'bookMasters'?: Array<BookMasterResponse>;
}
/**
 * 
 * @export
 * @interface CollectionModelBookStock
 */
export interface CollectionModelBookStock {
    /**
     * 
     * @type {CollectionModelBookStockEmbedded}
     * @memberof CollectionModelBookStock
     */
    '_embedded'?: CollectionModelBookStockEmbedded;
    /**
     * 
     * @type {{ [key: string]: Link; }}
     * @memberof CollectionModelBookStock
     */
    '_links'?: { [key: string]: Link; };
}
/**
 * 
 * @export
 * @interface CollectionModelBookStockEmbedded
 */
export interface CollectionModelBookStockEmbedded {
    /**
     * 
     * @type {Array<BookStockResponse>}
     * @memberof CollectionModelBookStockEmbedded
     */
    'bookStocks'?: Array<BookStockResponse>;
}
/**
 * 
 * @export
 * @interface CollectionModelEntityModelBookMasterAuthorRelationship
 */
export interface CollectionModelEntityModelBookMasterAuthorRelationship {
    /**
     * 
     * @type {CollectionModelEntityModelBookMasterAuthorRelationshipEmbedded}
     * @memberof CollectionModelEntityModelBookMasterAuthorRelationship
     */
    '_embedded'?: CollectionModelEntityModelBookMasterAuthorRelationshipEmbedded;
    /**
     * 
     * @type {{ [key: string]: Link; }}
     * @memberof CollectionModelEntityModelBookMasterAuthorRelationship
     */
    '_links'?: { [key: string]: Link; };
}
/**
 * 
 * @export
 * @interface CollectionModelEntityModelBookMasterAuthorRelationshipEmbedded
 */
export interface CollectionModelEntityModelBookMasterAuthorRelationshipEmbedded {
    /**
     * 
     * @type {Array<EntityModelBookMasterAuthorRelationship>}
     * @memberof CollectionModelEntityModelBookMasterAuthorRelationshipEmbedded
     */
    'bookMasterAuthorRelationships'?: Array<EntityModelBookMasterAuthorRelationship>;
}
/**
 * 
 * @export
 * @interface CollectionModelLendingSet
 */
export interface CollectionModelLendingSet {
    /**
     * 
     * @type {CollectionModelLendingSetEmbedded}
     * @memberof CollectionModelLendingSet
     */
    '_embedded'?: CollectionModelLendingSetEmbedded;
    /**
     * 
     * @type {{ [key: string]: Link; }}
     * @memberof CollectionModelLendingSet
     */
    '_links'?: { [key: string]: Link; };
}
/**
 * 
 * @export
 * @interface CollectionModelLendingSetEmbedded
 */
export interface CollectionModelLendingSetEmbedded {
    /**
     * 
     * @type {Array<LendingSetResponse>}
     * @memberof CollectionModelLendingSetEmbedded
     */
    'lendingSets'?: Array<LendingSetResponse>;
}
/**
 * 
 * @export
 * @interface CollectionModelObject
 */
export interface CollectionModelObject {
    /**
     * 
     * @type {CollectionModelObjectEmbedded}
     * @memberof CollectionModelObject
     */
    '_embedded'?: CollectionModelObjectEmbedded;
    /**
     * 
     * @type {{ [key: string]: Link; }}
     * @memberof CollectionModelObject
     */
    '_links'?: { [key: string]: Link; };
}
/**
 * 
 * @export
 * @interface CollectionModelObjectEmbedded
 */
export interface CollectionModelObjectEmbedded {
    /**
     * 
     * @type {Array<object>}
     * @memberof CollectionModelObjectEmbedded
     */
    'objects'?: Array<object>;
}
/**
 * 
 * @export
 * @interface Customer
 */
export interface Customer {
    /**
     * 
     * @type {number}
     * @memberof Customer
     */
    'id'?: number;
    /**
     * 
     * @type {string}
     * @memberof Customer
     */
    'name'?: string;
    /**
     * 
     * @type {string}
     * @memberof Customer
     */
    'emailAddress'?: string;
}
/**
 * 
 * @export
 * @interface CustomerRequestBody
 */
export interface CustomerRequestBody {
    /**
     * 
     * @type {number}
     * @memberof CustomerRequestBody
     */
    'id'?: number;
    /**
     * 
     * @type {string}
     * @memberof CustomerRequestBody
     */
    'name'?: string;
    /**
     * 
     * @type {string}
     * @memberof CustomerRequestBody
     */
    'emailAddress'?: string;
}
/**
 * 
 * @export
 * @interface EntityModelAuthor
 */
export interface EntityModelAuthor {
    /**
     * 
     * @type {number}
     * @memberof EntityModelAuthor
     */
    'id'?: number;
    /**
     * 
     * @type {string}
     * @memberof EntityModelAuthor
     */
    'name'?: string;
    /**
     * 
     * @type {{ [key: string]: Link; }}
     * @memberof EntityModelAuthor
     */
    '_links'?: { [key: string]: Link; };
}
/**
 * 
 * @export
 * @interface EntityModelBookMaster
 */
export interface EntityModelBookMaster {
    /**
     * 
     * @type {string}
     * @memberof EntityModelBookMaster
     */
    'name': string;
    /**
     * 
     * @type {string}
     * @memberof EntityModelBookMaster
     */
    'publicationDate': string;
    /**
     * 
     * @type {number}
     * @memberof EntityModelBookMaster
     */
    'id'?: number;
    /**
     * 
     * @type {{ [key: string]: Link; }}
     * @memberof EntityModelBookMaster
     */
    '_links'?: { [key: string]: Link; };
}
/**
 * 
 * @export
 * @interface EntityModelBookMasterAuthorRelationship
 */
export interface EntityModelBookMasterAuthorRelationship {
    /**
     * 
     * @type {{ [key: string]: Link; }}
     * @memberof EntityModelBookMasterAuthorRelationship
     */
    '_links'?: { [key: string]: Link; };
}
/**
 * 
 * @export
 * @interface EntityModelBookStock
 */
export interface EntityModelBookStock {
    /**
     * 
     * @type {number}
     * @memberof EntityModelBookStock
     */
    'id'?: number;
    /**
     * 
     * @type {string}
     * @memberof EntityModelBookStock
     */
    'memo'?: string;
    /**
     * 
     * @type {{ [key: string]: Link; }}
     * @memberof EntityModelBookStock
     */
    '_links'?: { [key: string]: Link; };
}
/**
 * 
 * @export
 * @interface EntityModelBookStockStatus
 */
export interface EntityModelBookStockStatus {
    /**
     * 
     * @type {number}
     * @memberof EntityModelBookStockStatus
     */
    'id'?: number;
    /**
     * 
     * @type {string}
     * @memberof EntityModelBookStockStatus
     */
    'name'?: string;
    /**
     * 
     * @type {{ [key: string]: Link; }}
     * @memberof EntityModelBookStockStatus
     */
    '_links'?: { [key: string]: Link; };
}
/**
 * 
 * @export
 * @interface EntityModelCustomer
 */
export interface EntityModelCustomer {
    /**
     * 
     * @type {number}
     * @memberof EntityModelCustomer
     */
    'id'?: number;
    /**
     * 
     * @type {string}
     * @memberof EntityModelCustomer
     */
    'name'?: string;
    /**
     * 
     * @type {string}
     * @memberof EntityModelCustomer
     */
    'emailAddress'?: string;
    /**
     * 
     * @type {{ [key: string]: Link; }}
     * @memberof EntityModelCustomer
     */
    '_links'?: { [key: string]: Link; };
}
/**
 * 
 * @export
 * @interface EntityModelLendingSet
 */
export interface EntityModelLendingSet {
    /**
     * 
     * @type {number}
     * @memberof EntityModelLendingSet
     */
    'id'?: number;
    /**
     * 
     * @type {string}
     * @memberof EntityModelLendingSet
     */
    'lendStartDate'?: string;
    /**
     * 
     * @type {string}
     * @memberof EntityModelLendingSet
     */
    'lendDeadlineDate'?: string;
    /**
     * 
     * @type {string}
     * @memberof EntityModelLendingSet
     */
    'returnDate'?: string;
    /**
     * 
     * @type {string}
     * @memberof EntityModelLendingSet
     */
    'memo'?: string;
    /**
     * 
     * @type {{ [key: string]: Link; }}
     * @memberof EntityModelLendingSet
     */
    '_links'?: { [key: string]: Link; };
}
/**
 * 
 * @export
 * @interface EntityModelLendingStatus
 */
export interface EntityModelLendingStatus {
    /**
     * 
     * @type {string}
     * @memberof EntityModelLendingStatus
     */
    'name'?: string;
    /**
     * 
     * @type {{ [key: string]: Link; }}
     * @memberof EntityModelLendingStatus
     */
    '_links'?: { [key: string]: Link; };
}
/**
 * 
 * @export
 * @interface EntityModelNdcCategory
 */
export interface EntityModelNdcCategory {
    /**
     * 
     * @type {number}
     * @memberof EntityModelNdcCategory
     */
    'id'?: number;
    /**
     * 
     * @type {string}
     * @memberof EntityModelNdcCategory
     */
    'name'?: string;
    /**
     * 
     * @type {string}
     * @memberof EntityModelNdcCategory
     */
    'number'?: string;
    /**
     * 
     * @type {{ [key: string]: Link; }}
     * @memberof EntityModelNdcCategory
     */
    '_links'?: { [key: string]: Link; };
}
/**
 * 
 * @export
 * @interface Item
 */
export interface Item {
    /**
     * 
     * @type {string}
     * @memberof Item
     */
    'type'?: string;
    /**
     * 
     * @type {{ [key: string]: AbstractJsonSchemaPropertyObject; }}
     * @memberof Item
     */
    'properties'?: { [key: string]: AbstractJsonSchemaPropertyObject; };
    /**
     * 
     * @type {Array<string>}
     * @memberof Item
     */
    'requiredProperties'?: Array<string>;
}
/**
 * 
 * @export
 * @interface JsonSchema
 */
export interface JsonSchema {
    /**
     * 
     * @type {string}
     * @memberof JsonSchema
     */
    'title'?: string;
    /**
     * 
     * @type {string}
     * @memberof JsonSchema
     */
    'description'?: string;
    /**
     * 
     * @type {{ [key: string]: AbstractJsonSchemaPropertyObject; }}
     * @memberof JsonSchema
     */
    'properties'?: { [key: string]: AbstractJsonSchemaPropertyObject; };
    /**
     * 
     * @type {Array<string>}
     * @memberof JsonSchema
     */
    'requiredProperties'?: Array<string>;
    /**
     * 
     * @type {{ [key: string]: Item; }}
     * @memberof JsonSchema
     */
    'definitions'?: { [key: string]: Item; };
    /**
     * 
     * @type {string}
     * @memberof JsonSchema
     */
    'type'?: string;
    /**
     * 
     * @type {string}
     * @memberof JsonSchema
     */
    '$schema'?: string;
}
/**
 * 
 * @export
 * @interface LendingSet
 */
export interface LendingSet {
    /**
     * 
     * @type {number}
     * @memberof LendingSet
     */
    'id'?: number;
    /**
     * 
     * @type {string}
     * @memberof LendingSet
     */
    'lendStartDate'?: string;
    /**
     * 
     * @type {string}
     * @memberof LendingSet
     */
    'lendDeadlineDate'?: string;
    /**
     * 
     * @type {string}
     * @memberof LendingSet
     */
    'returnDate'?: string;
    /**
     * 
     * @type {string}
     * @memberof LendingSet
     */
    'memo'?: string;
    /**
     * 
     * @type {Array<BookStock>}
     * @memberof LendingSet
     */
    'bookStock'?: Array<BookStock>;
    /**
     * 
     * @type {LendingStatus}
     * @memberof LendingSet
     */
    'lendingStatus'?: LendingStatus;
    /**
     * 
     * @type {Customer}
     * @memberof LendingSet
     */
    'customer'?: Customer;
}
/**
 * 
 * @export
 * @interface LendingSetRequestBody
 */
export interface LendingSetRequestBody {
    /**
     * 
     * @type {number}
     * @memberof LendingSetRequestBody
     */
    'id'?: number;
    /**
     * 
     * @type {string}
     * @memberof LendingSetRequestBody
     */
    'lendStartDate'?: string;
    /**
     * 
     * @type {string}
     * @memberof LendingSetRequestBody
     */
    'lendDeadlineDate'?: string;
    /**
     * 
     * @type {string}
     * @memberof LendingSetRequestBody
     */
    'returnDate'?: string;
    /**
     * 
     * @type {string}
     * @memberof LendingSetRequestBody
     */
    'memo'?: string;
    /**
     * 
     * @type {Array<string>}
     * @memberof LendingSetRequestBody
     */
    'bookStock'?: Array<string>;
    /**
     * 
     * @type {string}
     * @memberof LendingSetRequestBody
     */
    'lendingStatus'?: string;
    /**
     * 
     * @type {string}
     * @memberof LendingSetRequestBody
     */
    'customer'?: string;
}
/**
 * 
 * @export
 * @interface LendingSetResponse
 */
export interface LendingSetResponse {
    /**
     * 
     * @type {number}
     * @memberof LendingSetResponse
     */
    'id'?: number;
    /**
     * 
     * @type {string}
     * @memberof LendingSetResponse
     */
    'lendStartDate'?: string;
    /**
     * 
     * @type {string}
     * @memberof LendingSetResponse
     */
    'lendDeadlineDate'?: string;
    /**
     * 
     * @type {string}
     * @memberof LendingSetResponse
     */
    'returnDate'?: string;
    /**
     * 
     * @type {string}
     * @memberof LendingSetResponse
     */
    'memo'?: string;
    /**
     * 
     * @type {Array<BookStock>}
     * @memberof LendingSetResponse
     */
    'bookStock'?: Array<BookStock>;
    /**
     * 
     * @type {LendingStatus}
     * @memberof LendingSetResponse
     */
    'lendingStatus'?: LendingStatus;
    /**
     * 
     * @type {Customer}
     * @memberof LendingSetResponse
     */
    'customer'?: Customer;
}
/**
 * 
 * @export
 * @interface LendingStatus
 */
export interface LendingStatus {
    /**
     * 
     * @type {number}
     * @memberof LendingStatus
     */
    'id'?: number;
    /**
     * 
     * @type {string}
     * @memberof LendingStatus
     */
    'name'?: string;
}
/**
 * 
 * @export
 * @interface LendingStatusRequestBody
 */
export interface LendingStatusRequestBody {
    /**
     * 
     * @type {number}
     * @memberof LendingStatusRequestBody
     */
    'id'?: number;
    /**
     * 
     * @type {string}
     * @memberof LendingStatusRequestBody
     */
    'name'?: string;
}
/**
 * 
 * @export
 * @interface Link
 */
export interface Link {
    /**
     * 
     * @type {string}
     * @memberof Link
     */
    'href'?: string;
    /**
     * 
     * @type {string}
     * @memberof Link
     */
    'hreflang'?: string;
    /**
     * 
     * @type {string}
     * @memberof Link
     */
    'title'?: string;
    /**
     * 
     * @type {string}
     * @memberof Link
     */
    'type'?: string;
    /**
     * 
     * @type {string}
     * @memberof Link
     */
    'deprecation'?: string;
    /**
     * 
     * @type {string}
     * @memberof Link
     */
    'profile'?: string;
    /**
     * 
     * @type {string}
     * @memberof Link
     */
    'name'?: string;
    /**
     * 
     * @type {boolean}
     * @memberof Link
     */
    'templated'?: boolean;
}
/**
 * 
 * @export
 * @interface NdcCategory
 */
export interface NdcCategory {
    /**
     * 
     * @type {number}
     * @memberof NdcCategory
     */
    'id'?: number;
    /**
     * 
     * @type {string}
     * @memberof NdcCategory
     */
    'name'?: string;
    /**
     * 
     * @type {string}
     * @memberof NdcCategory
     */
    'number'?: string;
}
/**
 * 
 * @export
 * @interface NdcCategoryRequestBody
 */
export interface NdcCategoryRequestBody {
    /**
     * 
     * @type {number}
     * @memberof NdcCategoryRequestBody
     */
    'id'?: number;
    /**
     * 
     * @type {string}
     * @memberof NdcCategoryRequestBody
     */
    'name'?: string;
    /**
     * 
     * @type {string}
     * @memberof NdcCategoryRequestBody
     */
    'number'?: string;
}
/**
 * 
 * @export
 * @interface PageMapStringObject
 */
export interface PageMapStringObject {
    /**
     * 
     * @type {number}
     * @memberof PageMapStringObject
     */
    'totalElements'?: number;
    /**
     * 
     * @type {number}
     * @memberof PageMapStringObject
     */
    'totalPages'?: number;
    /**
     * 
     * @type {PageableObject}
     * @memberof PageMapStringObject
     */
    'pageable'?: PageableObject;
    /**
     * 
     * @type {boolean}
     * @memberof PageMapStringObject
     */
    'first'?: boolean;
    /**
     * 
     * @type {boolean}
     * @memberof PageMapStringObject
     */
    'last'?: boolean;
    /**
     * 
     * @type {number}
     * @memberof PageMapStringObject
     */
    'size'?: number;
    /**
     * 
     * @type {Array<{ [key: string]: object; }>}
     * @memberof PageMapStringObject
     */
    'content'?: Array<{ [key: string]: object; }>;
    /**
     * 
     * @type {number}
     * @memberof PageMapStringObject
     */
    'number'?: number;
    /**
     * 
     * @type {SortObject}
     * @memberof PageMapStringObject
     */
    'sort'?: SortObject;
    /**
     * 
     * @type {number}
     * @memberof PageMapStringObject
     */
    'numberOfElements'?: number;
    /**
     * 
     * @type {boolean}
     * @memberof PageMapStringObject
     */
    'empty'?: boolean;
}
/**
 * 
 * @export
 * @interface PageMetadata
 */
export interface PageMetadata {
    /**
     * 
     * @type {number}
     * @memberof PageMetadata
     */
    'size'?: number;
    /**
     * 
     * @type {number}
     * @memberof PageMetadata
     */
    'totalElements'?: number;
    /**
     * 
     * @type {number}
     * @memberof PageMetadata
     */
    'totalPages'?: number;
    /**
     * 
     * @type {number}
     * @memberof PageMetadata
     */
    'number'?: number;
}
/**
 * 
 * @export
 * @interface PageableObject
 */
export interface PageableObject {
    /**
     * 
     * @type {boolean}
     * @memberof PageableObject
     */
    'paged'?: boolean;
    /**
     * 
     * @type {number}
     * @memberof PageableObject
     */
    'pageNumber'?: number;
    /**
     * 
     * @type {number}
     * @memberof PageableObject
     */
    'pageSize'?: number;
    /**
     * 
     * @type {boolean}
     * @memberof PageableObject
     */
    'unpaged'?: boolean;
    /**
     * 
     * @type {number}
     * @memberof PageableObject
     */
    'offset'?: number;
    /**
     * 
     * @type {SortObject}
     * @memberof PageableObject
     */
    'sort'?: SortObject;
}
/**
 * 
 * @export
 * @interface PagedModelEntityModelAuthor
 */
export interface PagedModelEntityModelAuthor {
    /**
     * 
     * @type {PagedModelEntityModelAuthorEmbedded}
     * @memberof PagedModelEntityModelAuthor
     */
    '_embedded'?: PagedModelEntityModelAuthorEmbedded;
    /**
     * 
     * @type {{ [key: string]: Link; }}
     * @memberof PagedModelEntityModelAuthor
     */
    '_links'?: { [key: string]: Link; };
    /**
     * 
     * @type {PageMetadata}
     * @memberof PagedModelEntityModelAuthor
     */
    'page'?: PageMetadata;
}
/**
 * 
 * @export
 * @interface PagedModelEntityModelAuthorEmbedded
 */
export interface PagedModelEntityModelAuthorEmbedded {
    /**
     * 
     * @type {Array<EntityModelAuthor>}
     * @memberof PagedModelEntityModelAuthorEmbedded
     */
    'authors'?: Array<EntityModelAuthor>;
}
/**
 * 
 * @export
 * @interface PagedModelEntityModelBookMaster
 */
export interface PagedModelEntityModelBookMaster {
    /**
     * 
     * @type {PagedModelEntityModelBookMasterEmbedded}
     * @memberof PagedModelEntityModelBookMaster
     */
    '_embedded'?: PagedModelEntityModelBookMasterEmbedded;
    /**
     * 
     * @type {{ [key: string]: Link; }}
     * @memberof PagedModelEntityModelBookMaster
     */
    '_links'?: { [key: string]: Link; };
    /**
     * 
     * @type {PageMetadata}
     * @memberof PagedModelEntityModelBookMaster
     */
    'page'?: PageMetadata;
}
/**
 * 
 * @export
 * @interface PagedModelEntityModelBookMasterEmbedded
 */
export interface PagedModelEntityModelBookMasterEmbedded {
    /**
     * 
     * @type {Array<EntityModelBookMaster>}
     * @memberof PagedModelEntityModelBookMasterEmbedded
     */
    'bookMasters'?: Array<EntityModelBookMaster>;
}
/**
 * 
 * @export
 * @interface PagedModelEntityModelBookStock
 */
export interface PagedModelEntityModelBookStock {
    /**
     * 
     * @type {PagedModelEntityModelBookStockEmbedded}
     * @memberof PagedModelEntityModelBookStock
     */
    '_embedded'?: PagedModelEntityModelBookStockEmbedded;
    /**
     * 
     * @type {{ [key: string]: Link; }}
     * @memberof PagedModelEntityModelBookStock
     */
    '_links'?: { [key: string]: Link; };
    /**
     * 
     * @type {PageMetadata}
     * @memberof PagedModelEntityModelBookStock
     */
    'page'?: PageMetadata;
}
/**
 * 
 * @export
 * @interface PagedModelEntityModelBookStockEmbedded
 */
export interface PagedModelEntityModelBookStockEmbedded {
    /**
     * 
     * @type {Array<EntityModelBookStock>}
     * @memberof PagedModelEntityModelBookStockEmbedded
     */
    'bookStocks'?: Array<EntityModelBookStock>;
}
/**
 * 
 * @export
 * @interface PagedModelEntityModelBookStockStatus
 */
export interface PagedModelEntityModelBookStockStatus {
    /**
     * 
     * @type {PagedModelEntityModelBookStockStatusEmbedded}
     * @memberof PagedModelEntityModelBookStockStatus
     */
    '_embedded'?: PagedModelEntityModelBookStockStatusEmbedded;
    /**
     * 
     * @type {{ [key: string]: Link; }}
     * @memberof PagedModelEntityModelBookStockStatus
     */
    '_links'?: { [key: string]: Link; };
    /**
     * 
     * @type {PageMetadata}
     * @memberof PagedModelEntityModelBookStockStatus
     */
    'page'?: PageMetadata;
}
/**
 * 
 * @export
 * @interface PagedModelEntityModelBookStockStatusEmbedded
 */
export interface PagedModelEntityModelBookStockStatusEmbedded {
    /**
     * 
     * @type {Array<EntityModelBookStockStatus>}
     * @memberof PagedModelEntityModelBookStockStatusEmbedded
     */
    'bookStockStatuses'?: Array<EntityModelBookStockStatus>;
}
/**
 * 
 * @export
 * @interface PagedModelEntityModelCustomer
 */
export interface PagedModelEntityModelCustomer {
    /**
     * 
     * @type {PagedModelEntityModelCustomerEmbedded}
     * @memberof PagedModelEntityModelCustomer
     */
    '_embedded'?: PagedModelEntityModelCustomerEmbedded;
    /**
     * 
     * @type {{ [key: string]: Link; }}
     * @memberof PagedModelEntityModelCustomer
     */
    '_links'?: { [key: string]: Link; };
    /**
     * 
     * @type {PageMetadata}
     * @memberof PagedModelEntityModelCustomer
     */
    'page'?: PageMetadata;
}
/**
 * 
 * @export
 * @interface PagedModelEntityModelCustomerEmbedded
 */
export interface PagedModelEntityModelCustomerEmbedded {
    /**
     * 
     * @type {Array<EntityModelCustomer>}
     * @memberof PagedModelEntityModelCustomerEmbedded
     */
    'customers'?: Array<EntityModelCustomer>;
}
/**
 * 
 * @export
 * @interface PagedModelEntityModelLendingSet
 */
export interface PagedModelEntityModelLendingSet {
    /**
     * 
     * @type {PagedModelEntityModelLendingSetEmbedded}
     * @memberof PagedModelEntityModelLendingSet
     */
    '_embedded'?: PagedModelEntityModelLendingSetEmbedded;
    /**
     * 
     * @type {{ [key: string]: Link; }}
     * @memberof PagedModelEntityModelLendingSet
     */
    '_links'?: { [key: string]: Link; };
    /**
     * 
     * @type {PageMetadata}
     * @memberof PagedModelEntityModelLendingSet
     */
    'page'?: PageMetadata;
}
/**
 * 
 * @export
 * @interface PagedModelEntityModelLendingSetEmbedded
 */
export interface PagedModelEntityModelLendingSetEmbedded {
    /**
     * 
     * @type {Array<EntityModelLendingSet>}
     * @memberof PagedModelEntityModelLendingSetEmbedded
     */
    'lendingSets'?: Array<EntityModelLendingSet>;
}
/**
 * 
 * @export
 * @interface PagedModelEntityModelLendingStatus
 */
export interface PagedModelEntityModelLendingStatus {
    /**
     * 
     * @type {PagedModelEntityModelLendingStatusEmbedded}
     * @memberof PagedModelEntityModelLendingStatus
     */
    '_embedded'?: PagedModelEntityModelLendingStatusEmbedded;
    /**
     * 
     * @type {{ [key: string]: Link; }}
     * @memberof PagedModelEntityModelLendingStatus
     */
    '_links'?: { [key: string]: Link; };
    /**
     * 
     * @type {PageMetadata}
     * @memberof PagedModelEntityModelLendingStatus
     */
    'page'?: PageMetadata;
}
/**
 * 
 * @export
 * @interface PagedModelEntityModelLendingStatusEmbedded
 */
export interface PagedModelEntityModelLendingStatusEmbedded {
    /**
     * 
     * @type {Array<EntityModelLendingStatus>}
     * @memberof PagedModelEntityModelLendingStatusEmbedded
     */
    'lendingStatuses'?: Array<EntityModelLendingStatus>;
}
/**
 * 
 * @export
 * @interface PagedModelEntityModelNdcCategory
 */
export interface PagedModelEntityModelNdcCategory {
    /**
     * 
     * @type {PagedModelEntityModelNdcCategoryEmbedded}
     * @memberof PagedModelEntityModelNdcCategory
     */
    '_embedded'?: PagedModelEntityModelNdcCategoryEmbedded;
    /**
     * 
     * @type {{ [key: string]: Link; }}
     * @memberof PagedModelEntityModelNdcCategory
     */
    '_links'?: { [key: string]: Link; };
    /**
     * 
     * @type {PageMetadata}
     * @memberof PagedModelEntityModelNdcCategory
     */
    'page'?: PageMetadata;
}
/**
 * 
 * @export
 * @interface PagedModelEntityModelNdcCategoryEmbedded
 */
export interface PagedModelEntityModelNdcCategoryEmbedded {
    /**
     * 
     * @type {Array<EntityModelNdcCategory>}
     * @memberof PagedModelEntityModelNdcCategoryEmbedded
     */
    'ndcCategories'?: Array<EntityModelNdcCategory>;
}
/**
 * 
 * @export
 * @interface RepresentationModelObject
 */
export interface RepresentationModelObject {
    /**
     * 
     * @type {{ [key: string]: Link; }}
     * @memberof RepresentationModelObject
     */
    '_links'?: { [key: string]: Link; };
}
/**
 * 
 * @export
 * @interface SortObject
 */
export interface SortObject {
    /**
     * 
     * @type {boolean}
     * @memberof SortObject
     */
    'sorted'?: boolean;
    /**
     * 
     * @type {boolean}
     * @memberof SortObject
     */
    'unsorted'?: boolean;
    /**
     * 
     * @type {boolean}
     * @memberof SortObject
     */
    'empty'?: boolean;
}

/**
 * AuthorEntityControllerApi - axios parameter creator
 * @export
 */
export const AuthorEntityControllerApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * delete-author
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteItemResourceAuthorDelete: async (id: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('deleteItemResourceAuthorDelete', 'id', id)
            const localVarPath = `/authors/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * get-author
         * @param {number} [page] Zero-based page index (0..N)
         * @param {number} [size] The size of the page to be returned
         * @param {Array<string>} [sort] Sorting criteria in the format: property,(asc|desc). Default sort order is ascending. Multiple sort criteria are supported.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getCollectionResourceAuthorGet: async (page?: number, size?: number, sort?: Array<string>, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/authors`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }

            if (size !== undefined) {
                localVarQueryParameter['size'] = size;
            }

            if (sort) {
                localVarQueryParameter['sort'] = sort;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * get-author
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getItemResourceAuthorGet: async (id: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('getItemResourceAuthorGet', 'id', id)
            const localVarPath = `/authors/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * patch-author
         * @param {string} id 
         * @param {AuthorRequestBody} authorRequestBody 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        patchItemResourceAuthorPatch: async (id: string, authorRequestBody: AuthorRequestBody, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('patchItemResourceAuthorPatch', 'id', id)
            // verify required parameter 'authorRequestBody' is not null or undefined
            assertParamExists('patchItemResourceAuthorPatch', 'authorRequestBody', authorRequestBody)
            const localVarPath = `/authors/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(authorRequestBody, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * create-author
         * @param {AuthorRequestBody} authorRequestBody 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postCollectionResourceAuthorPost: async (authorRequestBody: AuthorRequestBody, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'authorRequestBody' is not null or undefined
            assertParamExists('postCollectionResourceAuthorPost', 'authorRequestBody', authorRequestBody)
            const localVarPath = `/authors`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(authorRequestBody, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * update-author
         * @param {string} id 
         * @param {AuthorRequestBody} authorRequestBody 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        putItemResourceAuthorPut: async (id: string, authorRequestBody: AuthorRequestBody, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('putItemResourceAuthorPut', 'id', id)
            // verify required parameter 'authorRequestBody' is not null or undefined
            assertParamExists('putItemResourceAuthorPut', 'authorRequestBody', authorRequestBody)
            const localVarPath = `/authors/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(authorRequestBody, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * AuthorEntityControllerApi - functional programming interface
 * @export
 */
export const AuthorEntityControllerApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = AuthorEntityControllerApiAxiosParamCreator(configuration)
    return {
        /**
         * delete-author
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deleteItemResourceAuthorDelete(id: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.deleteItemResourceAuthorDelete(id, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['AuthorEntityControllerApi.deleteItemResourceAuthorDelete']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * get-author
         * @param {number} [page] Zero-based page index (0..N)
         * @param {number} [size] The size of the page to be returned
         * @param {Array<string>} [sort] Sorting criteria in the format: property,(asc|desc). Default sort order is ascending. Multiple sort criteria are supported.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getCollectionResourceAuthorGet(page?: number, size?: number, sort?: Array<string>, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<PagedModelEntityModelAuthor>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getCollectionResourceAuthorGet(page, size, sort, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['AuthorEntityControllerApi.getCollectionResourceAuthorGet']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * get-author
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getItemResourceAuthorGet(id: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<EntityModelAuthor>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getItemResourceAuthorGet(id, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['AuthorEntityControllerApi.getItemResourceAuthorGet']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * patch-author
         * @param {string} id 
         * @param {AuthorRequestBody} authorRequestBody 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async patchItemResourceAuthorPatch(id: string, authorRequestBody: AuthorRequestBody, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<EntityModelAuthor>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.patchItemResourceAuthorPatch(id, authorRequestBody, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['AuthorEntityControllerApi.patchItemResourceAuthorPatch']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * create-author
         * @param {AuthorRequestBody} authorRequestBody 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async postCollectionResourceAuthorPost(authorRequestBody: AuthorRequestBody, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<EntityModelAuthor>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.postCollectionResourceAuthorPost(authorRequestBody, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['AuthorEntityControllerApi.postCollectionResourceAuthorPost']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * update-author
         * @param {string} id 
         * @param {AuthorRequestBody} authorRequestBody 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async putItemResourceAuthorPut(id: string, authorRequestBody: AuthorRequestBody, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<EntityModelAuthor>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.putItemResourceAuthorPut(id, authorRequestBody, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['AuthorEntityControllerApi.putItemResourceAuthorPut']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * AuthorEntityControllerApi - factory interface
 * @export
 */
export const AuthorEntityControllerApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = AuthorEntityControllerApiFp(configuration)
    return {
        /**
         * delete-author
         * @param {AuthorEntityControllerApiDeleteItemResourceAuthorDeleteRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteItemResourceAuthorDelete(requestParameters: AuthorEntityControllerApiDeleteItemResourceAuthorDeleteRequest, options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.deleteItemResourceAuthorDelete(requestParameters.id, options).then((request) => request(axios, basePath));
        },
        /**
         * get-author
         * @param {AuthorEntityControllerApiGetCollectionResourceAuthorGetRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getCollectionResourceAuthorGet(requestParameters: AuthorEntityControllerApiGetCollectionResourceAuthorGetRequest = {}, options?: RawAxiosRequestConfig): AxiosPromise<PagedModelEntityModelAuthor> {
            return localVarFp.getCollectionResourceAuthorGet(requestParameters.page, requestParameters.size, requestParameters.sort, options).then((request) => request(axios, basePath));
        },
        /**
         * get-author
         * @param {AuthorEntityControllerApiGetItemResourceAuthorGetRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getItemResourceAuthorGet(requestParameters: AuthorEntityControllerApiGetItemResourceAuthorGetRequest, options?: RawAxiosRequestConfig): AxiosPromise<EntityModelAuthor> {
            return localVarFp.getItemResourceAuthorGet(requestParameters.id, options).then((request) => request(axios, basePath));
        },
        /**
         * patch-author
         * @param {AuthorEntityControllerApiPatchItemResourceAuthorPatchRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        patchItemResourceAuthorPatch(requestParameters: AuthorEntityControllerApiPatchItemResourceAuthorPatchRequest, options?: RawAxiosRequestConfig): AxiosPromise<EntityModelAuthor> {
            return localVarFp.patchItemResourceAuthorPatch(requestParameters.id, requestParameters.authorRequestBody, options).then((request) => request(axios, basePath));
        },
        /**
         * create-author
         * @param {AuthorEntityControllerApiPostCollectionResourceAuthorPostRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postCollectionResourceAuthorPost(requestParameters: AuthorEntityControllerApiPostCollectionResourceAuthorPostRequest, options?: RawAxiosRequestConfig): AxiosPromise<EntityModelAuthor> {
            return localVarFp.postCollectionResourceAuthorPost(requestParameters.authorRequestBody, options).then((request) => request(axios, basePath));
        },
        /**
         * update-author
         * @param {AuthorEntityControllerApiPutItemResourceAuthorPutRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        putItemResourceAuthorPut(requestParameters: AuthorEntityControllerApiPutItemResourceAuthorPutRequest, options?: RawAxiosRequestConfig): AxiosPromise<EntityModelAuthor> {
            return localVarFp.putItemResourceAuthorPut(requestParameters.id, requestParameters.authorRequestBody, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * AuthorEntityControllerApi - interface
 * @export
 * @interface AuthorEntityControllerApi
 */
export interface AuthorEntityControllerApiInterface {
    /**
     * delete-author
     * @param {AuthorEntityControllerApiDeleteItemResourceAuthorDeleteRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AuthorEntityControllerApiInterface
     */
    deleteItemResourceAuthorDelete(requestParameters: AuthorEntityControllerApiDeleteItemResourceAuthorDeleteRequest, options?: RawAxiosRequestConfig): AxiosPromise<void>;

    /**
     * get-author
     * @param {AuthorEntityControllerApiGetCollectionResourceAuthorGetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AuthorEntityControllerApiInterface
     */
    getCollectionResourceAuthorGet(requestParameters?: AuthorEntityControllerApiGetCollectionResourceAuthorGetRequest, options?: RawAxiosRequestConfig): AxiosPromise<PagedModelEntityModelAuthor>;

    /**
     * get-author
     * @param {AuthorEntityControllerApiGetItemResourceAuthorGetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AuthorEntityControllerApiInterface
     */
    getItemResourceAuthorGet(requestParameters: AuthorEntityControllerApiGetItemResourceAuthorGetRequest, options?: RawAxiosRequestConfig): AxiosPromise<EntityModelAuthor>;

    /**
     * patch-author
     * @param {AuthorEntityControllerApiPatchItemResourceAuthorPatchRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AuthorEntityControllerApiInterface
     */
    patchItemResourceAuthorPatch(requestParameters: AuthorEntityControllerApiPatchItemResourceAuthorPatchRequest, options?: RawAxiosRequestConfig): AxiosPromise<EntityModelAuthor>;

    /**
     * create-author
     * @param {AuthorEntityControllerApiPostCollectionResourceAuthorPostRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AuthorEntityControllerApiInterface
     */
    postCollectionResourceAuthorPost(requestParameters: AuthorEntityControllerApiPostCollectionResourceAuthorPostRequest, options?: RawAxiosRequestConfig): AxiosPromise<EntityModelAuthor>;

    /**
     * update-author
     * @param {AuthorEntityControllerApiPutItemResourceAuthorPutRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AuthorEntityControllerApiInterface
     */
    putItemResourceAuthorPut(requestParameters: AuthorEntityControllerApiPutItemResourceAuthorPutRequest, options?: RawAxiosRequestConfig): AxiosPromise<EntityModelAuthor>;

}

/**
 * Request parameters for deleteItemResourceAuthorDelete operation in AuthorEntityControllerApi.
 * @export
 * @interface AuthorEntityControllerApiDeleteItemResourceAuthorDeleteRequest
 */
export interface AuthorEntityControllerApiDeleteItemResourceAuthorDeleteRequest {
    /**
     * 
     * @type {string}
     * @memberof AuthorEntityControllerApiDeleteItemResourceAuthorDelete
     */
    readonly id: string
}

/**
 * Request parameters for getCollectionResourceAuthorGet operation in AuthorEntityControllerApi.
 * @export
 * @interface AuthorEntityControllerApiGetCollectionResourceAuthorGetRequest
 */
export interface AuthorEntityControllerApiGetCollectionResourceAuthorGetRequest {
    /**
     * Zero-based page index (0..N)
     * @type {number}
     * @memberof AuthorEntityControllerApiGetCollectionResourceAuthorGet
     */
    readonly page?: number

    /**
     * The size of the page to be returned
     * @type {number}
     * @memberof AuthorEntityControllerApiGetCollectionResourceAuthorGet
     */
    readonly size?: number

    /**
     * Sorting criteria in the format: property,(asc|desc). Default sort order is ascending. Multiple sort criteria are supported.
     * @type {Array<string>}
     * @memberof AuthorEntityControllerApiGetCollectionResourceAuthorGet
     */
    readonly sort?: Array<string>
}

/**
 * Request parameters for getItemResourceAuthorGet operation in AuthorEntityControllerApi.
 * @export
 * @interface AuthorEntityControllerApiGetItemResourceAuthorGetRequest
 */
export interface AuthorEntityControllerApiGetItemResourceAuthorGetRequest {
    /**
     * 
     * @type {string}
     * @memberof AuthorEntityControllerApiGetItemResourceAuthorGet
     */
    readonly id: string
}

/**
 * Request parameters for patchItemResourceAuthorPatch operation in AuthorEntityControllerApi.
 * @export
 * @interface AuthorEntityControllerApiPatchItemResourceAuthorPatchRequest
 */
export interface AuthorEntityControllerApiPatchItemResourceAuthorPatchRequest {
    /**
     * 
     * @type {string}
     * @memberof AuthorEntityControllerApiPatchItemResourceAuthorPatch
     */
    readonly id: string

    /**
     * 
     * @type {AuthorRequestBody}
     * @memberof AuthorEntityControllerApiPatchItemResourceAuthorPatch
     */
    readonly authorRequestBody: AuthorRequestBody
}

/**
 * Request parameters for postCollectionResourceAuthorPost operation in AuthorEntityControllerApi.
 * @export
 * @interface AuthorEntityControllerApiPostCollectionResourceAuthorPostRequest
 */
export interface AuthorEntityControllerApiPostCollectionResourceAuthorPostRequest {
    /**
     * 
     * @type {AuthorRequestBody}
     * @memberof AuthorEntityControllerApiPostCollectionResourceAuthorPost
     */
    readonly authorRequestBody: AuthorRequestBody
}

/**
 * Request parameters for putItemResourceAuthorPut operation in AuthorEntityControllerApi.
 * @export
 * @interface AuthorEntityControllerApiPutItemResourceAuthorPutRequest
 */
export interface AuthorEntityControllerApiPutItemResourceAuthorPutRequest {
    /**
     * 
     * @type {string}
     * @memberof AuthorEntityControllerApiPutItemResourceAuthorPut
     */
    readonly id: string

    /**
     * 
     * @type {AuthorRequestBody}
     * @memberof AuthorEntityControllerApiPutItemResourceAuthorPut
     */
    readonly authorRequestBody: AuthorRequestBody
}

/**
 * AuthorEntityControllerApi - object-oriented interface
 * @export
 * @class AuthorEntityControllerApi
 * @extends {BaseAPI}
 */
export class AuthorEntityControllerApi extends BaseAPI implements AuthorEntityControllerApiInterface {
    /**
     * delete-author
     * @param {AuthorEntityControllerApiDeleteItemResourceAuthorDeleteRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AuthorEntityControllerApi
     */
    public deleteItemResourceAuthorDelete(requestParameters: AuthorEntityControllerApiDeleteItemResourceAuthorDeleteRequest, options?: RawAxiosRequestConfig) {
        return AuthorEntityControllerApiFp(this.configuration).deleteItemResourceAuthorDelete(requestParameters.id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * get-author
     * @param {AuthorEntityControllerApiGetCollectionResourceAuthorGetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AuthorEntityControllerApi
     */
    public getCollectionResourceAuthorGet(requestParameters: AuthorEntityControllerApiGetCollectionResourceAuthorGetRequest = {}, options?: RawAxiosRequestConfig) {
        return AuthorEntityControllerApiFp(this.configuration).getCollectionResourceAuthorGet(requestParameters.page, requestParameters.size, requestParameters.sort, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * get-author
     * @param {AuthorEntityControllerApiGetItemResourceAuthorGetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AuthorEntityControllerApi
     */
    public getItemResourceAuthorGet(requestParameters: AuthorEntityControllerApiGetItemResourceAuthorGetRequest, options?: RawAxiosRequestConfig) {
        return AuthorEntityControllerApiFp(this.configuration).getItemResourceAuthorGet(requestParameters.id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * patch-author
     * @param {AuthorEntityControllerApiPatchItemResourceAuthorPatchRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AuthorEntityControllerApi
     */
    public patchItemResourceAuthorPatch(requestParameters: AuthorEntityControllerApiPatchItemResourceAuthorPatchRequest, options?: RawAxiosRequestConfig) {
        return AuthorEntityControllerApiFp(this.configuration).patchItemResourceAuthorPatch(requestParameters.id, requestParameters.authorRequestBody, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * create-author
     * @param {AuthorEntityControllerApiPostCollectionResourceAuthorPostRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AuthorEntityControllerApi
     */
    public postCollectionResourceAuthorPost(requestParameters: AuthorEntityControllerApiPostCollectionResourceAuthorPostRequest, options?: RawAxiosRequestConfig) {
        return AuthorEntityControllerApiFp(this.configuration).postCollectionResourceAuthorPost(requestParameters.authorRequestBody, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * update-author
     * @param {AuthorEntityControllerApiPutItemResourceAuthorPutRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AuthorEntityControllerApi
     */
    public putItemResourceAuthorPut(requestParameters: AuthorEntityControllerApiPutItemResourceAuthorPutRequest, options?: RawAxiosRequestConfig) {
        return AuthorEntityControllerApiFp(this.configuration).putItemResourceAuthorPut(requestParameters.id, requestParameters.authorRequestBody, options).then((request) => request(this.axios, this.basePath));
    }
}



/**
 * AuthorPropertyReferenceControllerApi - axios parameter creator
 * @export
 */
export const AuthorPropertyReferenceControllerApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * patch-bookmaster-by-author-Id
         * @param {string} id 
         * @param {CollectionModelObject} collectionModelObject 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createPropertyReferenceAuthorPatch: async (id: string, collectionModelObject: CollectionModelObject, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('createPropertyReferenceAuthorPatch', 'id', id)
            // verify required parameter 'collectionModelObject' is not null or undefined
            assertParamExists('createPropertyReferenceAuthorPatch', 'collectionModelObject', collectionModelObject)
            const localVarPath = `/authors/{id}/bookMaster`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(collectionModelObject, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * update-bookmaster-by-author-Id
         * @param {string} id 
         * @param {CollectionModelObject} collectionModelObject 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createPropertyReferenceAuthorPut: async (id: string, collectionModelObject: CollectionModelObject, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('createPropertyReferenceAuthorPut', 'id', id)
            // verify required parameter 'collectionModelObject' is not null or undefined
            assertParamExists('createPropertyReferenceAuthorPut', 'collectionModelObject', collectionModelObject)
            const localVarPath = `/authors/{id}/bookMaster`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(collectionModelObject, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * delete-bookmaster-by-author-Id
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deletePropertyReferenceAuthorDelete: async (id: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('deletePropertyReferenceAuthorDelete', 'id', id)
            const localVarPath = `/authors/{id}/bookMaster`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * delete-bookmaster-by-author-Id
         * @param {string} id 
         * @param {string} propertyId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deletePropertyReferenceIdAuthorDelete: async (id: string, propertyId: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('deletePropertyReferenceIdAuthorDelete', 'id', id)
            // verify required parameter 'propertyId' is not null or undefined
            assertParamExists('deletePropertyReferenceIdAuthorDelete', 'propertyId', propertyId)
            const localVarPath = `/authors/{id}/bookMaster/{propertyId}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)))
                .replace(`{${"propertyId"}}`, encodeURIComponent(String(propertyId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * get-bookmaster-by-author-Id
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        followPropertyReferenceAuthorGet: async (id: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('followPropertyReferenceAuthorGet', 'id', id)
            const localVarPath = `/authors/{id}/bookMaster`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * get-bookmaster-by-author-Id
         * @param {string} id 
         * @param {string} propertyId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        followPropertyReferenceAuthorGet1: async (id: string, propertyId: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('followPropertyReferenceAuthorGet1', 'id', id)
            // verify required parameter 'propertyId' is not null or undefined
            assertParamExists('followPropertyReferenceAuthorGet1', 'propertyId', propertyId)
            const localVarPath = `/authors/{id}/bookMaster/{propertyId}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)))
                .replace(`{${"propertyId"}}`, encodeURIComponent(String(propertyId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * AuthorPropertyReferenceControllerApi - functional programming interface
 * @export
 */
export const AuthorPropertyReferenceControllerApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = AuthorPropertyReferenceControllerApiAxiosParamCreator(configuration)
    return {
        /**
         * patch-bookmaster-by-author-Id
         * @param {string} id 
         * @param {CollectionModelObject} collectionModelObject 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async createPropertyReferenceAuthorPatch(id: string, collectionModelObject: CollectionModelObject, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CollectionModelBookMaster>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.createPropertyReferenceAuthorPatch(id, collectionModelObject, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['AuthorPropertyReferenceControllerApi.createPropertyReferenceAuthorPatch']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * update-bookmaster-by-author-Id
         * @param {string} id 
         * @param {CollectionModelObject} collectionModelObject 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async createPropertyReferenceAuthorPut(id: string, collectionModelObject: CollectionModelObject, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CollectionModelBookMaster>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.createPropertyReferenceAuthorPut(id, collectionModelObject, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['AuthorPropertyReferenceControllerApi.createPropertyReferenceAuthorPut']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * delete-bookmaster-by-author-Id
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deletePropertyReferenceAuthorDelete(id: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.deletePropertyReferenceAuthorDelete(id, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['AuthorPropertyReferenceControllerApi.deletePropertyReferenceAuthorDelete']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * delete-bookmaster-by-author-Id
         * @param {string} id 
         * @param {string} propertyId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deletePropertyReferenceIdAuthorDelete(id: string, propertyId: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.deletePropertyReferenceIdAuthorDelete(id, propertyId, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['AuthorPropertyReferenceControllerApi.deletePropertyReferenceIdAuthorDelete']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * get-bookmaster-by-author-Id
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async followPropertyReferenceAuthorGet(id: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CollectionModelBookMaster>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.followPropertyReferenceAuthorGet(id, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['AuthorPropertyReferenceControllerApi.followPropertyReferenceAuthorGet']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * get-bookmaster-by-author-Id
         * @param {string} id 
         * @param {string} propertyId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async followPropertyReferenceAuthorGet1(id: string, propertyId: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CollectionModelBookMaster>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.followPropertyReferenceAuthorGet1(id, propertyId, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['AuthorPropertyReferenceControllerApi.followPropertyReferenceAuthorGet1']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * AuthorPropertyReferenceControllerApi - factory interface
 * @export
 */
export const AuthorPropertyReferenceControllerApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = AuthorPropertyReferenceControllerApiFp(configuration)
    return {
        /**
         * patch-bookmaster-by-author-Id
         * @param {AuthorPropertyReferenceControllerApiCreatePropertyReferenceAuthorPatchRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createPropertyReferenceAuthorPatch(requestParameters: AuthorPropertyReferenceControllerApiCreatePropertyReferenceAuthorPatchRequest, options?: RawAxiosRequestConfig): AxiosPromise<CollectionModelBookMaster> {
            return localVarFp.createPropertyReferenceAuthorPatch(requestParameters.id, requestParameters.collectionModelObject, options).then((request) => request(axios, basePath));
        },
        /**
         * update-bookmaster-by-author-Id
         * @param {AuthorPropertyReferenceControllerApiCreatePropertyReferenceAuthorPutRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createPropertyReferenceAuthorPut(requestParameters: AuthorPropertyReferenceControllerApiCreatePropertyReferenceAuthorPutRequest, options?: RawAxiosRequestConfig): AxiosPromise<CollectionModelBookMaster> {
            return localVarFp.createPropertyReferenceAuthorPut(requestParameters.id, requestParameters.collectionModelObject, options).then((request) => request(axios, basePath));
        },
        /**
         * delete-bookmaster-by-author-Id
         * @param {AuthorPropertyReferenceControllerApiDeletePropertyReferenceAuthorDeleteRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deletePropertyReferenceAuthorDelete(requestParameters: AuthorPropertyReferenceControllerApiDeletePropertyReferenceAuthorDeleteRequest, options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.deletePropertyReferenceAuthorDelete(requestParameters.id, options).then((request) => request(axios, basePath));
        },
        /**
         * delete-bookmaster-by-author-Id
         * @param {AuthorPropertyReferenceControllerApiDeletePropertyReferenceIdAuthorDeleteRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deletePropertyReferenceIdAuthorDelete(requestParameters: AuthorPropertyReferenceControllerApiDeletePropertyReferenceIdAuthorDeleteRequest, options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.deletePropertyReferenceIdAuthorDelete(requestParameters.id, requestParameters.propertyId, options).then((request) => request(axios, basePath));
        },
        /**
         * get-bookmaster-by-author-Id
         * @param {AuthorPropertyReferenceControllerApiFollowPropertyReferenceAuthorGetRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        followPropertyReferenceAuthorGet(requestParameters: AuthorPropertyReferenceControllerApiFollowPropertyReferenceAuthorGetRequest, options?: RawAxiosRequestConfig): AxiosPromise<CollectionModelBookMaster> {
            return localVarFp.followPropertyReferenceAuthorGet(requestParameters.id, options).then((request) => request(axios, basePath));
        },
        /**
         * get-bookmaster-by-author-Id
         * @param {AuthorPropertyReferenceControllerApiFollowPropertyReferenceAuthorGet1Request} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        followPropertyReferenceAuthorGet1(requestParameters: AuthorPropertyReferenceControllerApiFollowPropertyReferenceAuthorGet1Request, options?: RawAxiosRequestConfig): AxiosPromise<CollectionModelBookMaster> {
            return localVarFp.followPropertyReferenceAuthorGet1(requestParameters.id, requestParameters.propertyId, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * AuthorPropertyReferenceControllerApi - interface
 * @export
 * @interface AuthorPropertyReferenceControllerApi
 */
export interface AuthorPropertyReferenceControllerApiInterface {
    /**
     * patch-bookmaster-by-author-Id
     * @param {AuthorPropertyReferenceControllerApiCreatePropertyReferenceAuthorPatchRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AuthorPropertyReferenceControllerApiInterface
     */
    createPropertyReferenceAuthorPatch(requestParameters: AuthorPropertyReferenceControllerApiCreatePropertyReferenceAuthorPatchRequest, options?: RawAxiosRequestConfig): AxiosPromise<CollectionModelBookMaster>;

    /**
     * update-bookmaster-by-author-Id
     * @param {AuthorPropertyReferenceControllerApiCreatePropertyReferenceAuthorPutRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AuthorPropertyReferenceControllerApiInterface
     */
    createPropertyReferenceAuthorPut(requestParameters: AuthorPropertyReferenceControllerApiCreatePropertyReferenceAuthorPutRequest, options?: RawAxiosRequestConfig): AxiosPromise<CollectionModelBookMaster>;

    /**
     * delete-bookmaster-by-author-Id
     * @param {AuthorPropertyReferenceControllerApiDeletePropertyReferenceAuthorDeleteRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AuthorPropertyReferenceControllerApiInterface
     */
    deletePropertyReferenceAuthorDelete(requestParameters: AuthorPropertyReferenceControllerApiDeletePropertyReferenceAuthorDeleteRequest, options?: RawAxiosRequestConfig): AxiosPromise<void>;

    /**
     * delete-bookmaster-by-author-Id
     * @param {AuthorPropertyReferenceControllerApiDeletePropertyReferenceIdAuthorDeleteRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AuthorPropertyReferenceControllerApiInterface
     */
    deletePropertyReferenceIdAuthorDelete(requestParameters: AuthorPropertyReferenceControllerApiDeletePropertyReferenceIdAuthorDeleteRequest, options?: RawAxiosRequestConfig): AxiosPromise<void>;

    /**
     * get-bookmaster-by-author-Id
     * @param {AuthorPropertyReferenceControllerApiFollowPropertyReferenceAuthorGetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AuthorPropertyReferenceControllerApiInterface
     */
    followPropertyReferenceAuthorGet(requestParameters: AuthorPropertyReferenceControllerApiFollowPropertyReferenceAuthorGetRequest, options?: RawAxiosRequestConfig): AxiosPromise<CollectionModelBookMaster>;

    /**
     * get-bookmaster-by-author-Id
     * @param {AuthorPropertyReferenceControllerApiFollowPropertyReferenceAuthorGet1Request} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AuthorPropertyReferenceControllerApiInterface
     */
    followPropertyReferenceAuthorGet1(requestParameters: AuthorPropertyReferenceControllerApiFollowPropertyReferenceAuthorGet1Request, options?: RawAxiosRequestConfig): AxiosPromise<CollectionModelBookMaster>;

}

/**
 * Request parameters for createPropertyReferenceAuthorPatch operation in AuthorPropertyReferenceControllerApi.
 * @export
 * @interface AuthorPropertyReferenceControllerApiCreatePropertyReferenceAuthorPatchRequest
 */
export interface AuthorPropertyReferenceControllerApiCreatePropertyReferenceAuthorPatchRequest {
    /**
     * 
     * @type {string}
     * @memberof AuthorPropertyReferenceControllerApiCreatePropertyReferenceAuthorPatch
     */
    readonly id: string

    /**
     * 
     * @type {CollectionModelObject}
     * @memberof AuthorPropertyReferenceControllerApiCreatePropertyReferenceAuthorPatch
     */
    readonly collectionModelObject: CollectionModelObject
}

/**
 * Request parameters for createPropertyReferenceAuthorPut operation in AuthorPropertyReferenceControllerApi.
 * @export
 * @interface AuthorPropertyReferenceControllerApiCreatePropertyReferenceAuthorPutRequest
 */
export interface AuthorPropertyReferenceControllerApiCreatePropertyReferenceAuthorPutRequest {
    /**
     * 
     * @type {string}
     * @memberof AuthorPropertyReferenceControllerApiCreatePropertyReferenceAuthorPut
     */
    readonly id: string

    /**
     * 
     * @type {CollectionModelObject}
     * @memberof AuthorPropertyReferenceControllerApiCreatePropertyReferenceAuthorPut
     */
    readonly collectionModelObject: CollectionModelObject
}

/**
 * Request parameters for deletePropertyReferenceAuthorDelete operation in AuthorPropertyReferenceControllerApi.
 * @export
 * @interface AuthorPropertyReferenceControllerApiDeletePropertyReferenceAuthorDeleteRequest
 */
export interface AuthorPropertyReferenceControllerApiDeletePropertyReferenceAuthorDeleteRequest {
    /**
     * 
     * @type {string}
     * @memberof AuthorPropertyReferenceControllerApiDeletePropertyReferenceAuthorDelete
     */
    readonly id: string
}

/**
 * Request parameters for deletePropertyReferenceIdAuthorDelete operation in AuthorPropertyReferenceControllerApi.
 * @export
 * @interface AuthorPropertyReferenceControllerApiDeletePropertyReferenceIdAuthorDeleteRequest
 */
export interface AuthorPropertyReferenceControllerApiDeletePropertyReferenceIdAuthorDeleteRequest {
    /**
     * 
     * @type {string}
     * @memberof AuthorPropertyReferenceControllerApiDeletePropertyReferenceIdAuthorDelete
     */
    readonly id: string

    /**
     * 
     * @type {string}
     * @memberof AuthorPropertyReferenceControllerApiDeletePropertyReferenceIdAuthorDelete
     */
    readonly propertyId: string
}

/**
 * Request parameters for followPropertyReferenceAuthorGet operation in AuthorPropertyReferenceControllerApi.
 * @export
 * @interface AuthorPropertyReferenceControllerApiFollowPropertyReferenceAuthorGetRequest
 */
export interface AuthorPropertyReferenceControllerApiFollowPropertyReferenceAuthorGetRequest {
    /**
     * 
     * @type {string}
     * @memberof AuthorPropertyReferenceControllerApiFollowPropertyReferenceAuthorGet
     */
    readonly id: string
}

/**
 * Request parameters for followPropertyReferenceAuthorGet1 operation in AuthorPropertyReferenceControllerApi.
 * @export
 * @interface AuthorPropertyReferenceControllerApiFollowPropertyReferenceAuthorGet1Request
 */
export interface AuthorPropertyReferenceControllerApiFollowPropertyReferenceAuthorGet1Request {
    /**
     * 
     * @type {string}
     * @memberof AuthorPropertyReferenceControllerApiFollowPropertyReferenceAuthorGet1
     */
    readonly id: string

    /**
     * 
     * @type {string}
     * @memberof AuthorPropertyReferenceControllerApiFollowPropertyReferenceAuthorGet1
     */
    readonly propertyId: string
}

/**
 * AuthorPropertyReferenceControllerApi - object-oriented interface
 * @export
 * @class AuthorPropertyReferenceControllerApi
 * @extends {BaseAPI}
 */
export class AuthorPropertyReferenceControllerApi extends BaseAPI implements AuthorPropertyReferenceControllerApiInterface {
    /**
     * patch-bookmaster-by-author-Id
     * @param {AuthorPropertyReferenceControllerApiCreatePropertyReferenceAuthorPatchRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AuthorPropertyReferenceControllerApi
     */
    public createPropertyReferenceAuthorPatch(requestParameters: AuthorPropertyReferenceControllerApiCreatePropertyReferenceAuthorPatchRequest, options?: RawAxiosRequestConfig) {
        return AuthorPropertyReferenceControllerApiFp(this.configuration).createPropertyReferenceAuthorPatch(requestParameters.id, requestParameters.collectionModelObject, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * update-bookmaster-by-author-Id
     * @param {AuthorPropertyReferenceControllerApiCreatePropertyReferenceAuthorPutRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AuthorPropertyReferenceControllerApi
     */
    public createPropertyReferenceAuthorPut(requestParameters: AuthorPropertyReferenceControllerApiCreatePropertyReferenceAuthorPutRequest, options?: RawAxiosRequestConfig) {
        return AuthorPropertyReferenceControllerApiFp(this.configuration).createPropertyReferenceAuthorPut(requestParameters.id, requestParameters.collectionModelObject, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * delete-bookmaster-by-author-Id
     * @param {AuthorPropertyReferenceControllerApiDeletePropertyReferenceAuthorDeleteRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AuthorPropertyReferenceControllerApi
     */
    public deletePropertyReferenceAuthorDelete(requestParameters: AuthorPropertyReferenceControllerApiDeletePropertyReferenceAuthorDeleteRequest, options?: RawAxiosRequestConfig) {
        return AuthorPropertyReferenceControllerApiFp(this.configuration).deletePropertyReferenceAuthorDelete(requestParameters.id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * delete-bookmaster-by-author-Id
     * @param {AuthorPropertyReferenceControllerApiDeletePropertyReferenceIdAuthorDeleteRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AuthorPropertyReferenceControllerApi
     */
    public deletePropertyReferenceIdAuthorDelete(requestParameters: AuthorPropertyReferenceControllerApiDeletePropertyReferenceIdAuthorDeleteRequest, options?: RawAxiosRequestConfig) {
        return AuthorPropertyReferenceControllerApiFp(this.configuration).deletePropertyReferenceIdAuthorDelete(requestParameters.id, requestParameters.propertyId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * get-bookmaster-by-author-Id
     * @param {AuthorPropertyReferenceControllerApiFollowPropertyReferenceAuthorGetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AuthorPropertyReferenceControllerApi
     */
    public followPropertyReferenceAuthorGet(requestParameters: AuthorPropertyReferenceControllerApiFollowPropertyReferenceAuthorGetRequest, options?: RawAxiosRequestConfig) {
        return AuthorPropertyReferenceControllerApiFp(this.configuration).followPropertyReferenceAuthorGet(requestParameters.id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * get-bookmaster-by-author-Id
     * @param {AuthorPropertyReferenceControllerApiFollowPropertyReferenceAuthorGet1Request} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AuthorPropertyReferenceControllerApi
     */
    public followPropertyReferenceAuthorGet1(requestParameters: AuthorPropertyReferenceControllerApiFollowPropertyReferenceAuthorGet1Request, options?: RawAxiosRequestConfig) {
        return AuthorPropertyReferenceControllerApiFp(this.configuration).followPropertyReferenceAuthorGet1(requestParameters.id, requestParameters.propertyId, options).then((request) => request(this.axios, this.basePath));
    }
}



/**
 * AuthorSearchControllerApi - axios parameter creator
 * @export
 */
export const AuthorSearchControllerApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @param {number} [id] 
         * @param {string} [name] 
         * @param {number} [page] Zero-based page index (0..N)
         * @param {number} [size] The size of the page to be returned
         * @param {Array<string>} [sort] Sorting criteria in the format: property,(asc|desc). Default sort order is ascending. Multiple sort criteria are supported.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        executeSearchAuthorGet: async (id?: number, name?: string, page?: number, size?: number, sort?: Array<string>, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/authors/search/findByComplexConditions`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (id !== undefined) {
                localVarQueryParameter['id'] = id;
            }

            if (name !== undefined) {
                localVarQueryParameter['name'] = name;
            }

            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }

            if (size !== undefined) {
                localVarQueryParameter['size'] = size;
            }

            if (sort) {
                localVarQueryParameter['sort'] = sort;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * AuthorSearchControllerApi - functional programming interface
 * @export
 */
export const AuthorSearchControllerApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = AuthorSearchControllerApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @param {number} [id] 
         * @param {string} [name] 
         * @param {number} [page] Zero-based page index (0..N)
         * @param {number} [size] The size of the page to be returned
         * @param {Array<string>} [sort] Sorting criteria in the format: property,(asc|desc). Default sort order is ascending. Multiple sort criteria are supported.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async executeSearchAuthorGet(id?: number, name?: string, page?: number, size?: number, sort?: Array<string>, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<PagedModelEntityModelAuthor>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.executeSearchAuthorGet(id, name, page, size, sort, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['AuthorSearchControllerApi.executeSearchAuthorGet']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * AuthorSearchControllerApi - factory interface
 * @export
 */
export const AuthorSearchControllerApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = AuthorSearchControllerApiFp(configuration)
    return {
        /**
         * 
         * @param {AuthorSearchControllerApiExecuteSearchAuthorGetRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        executeSearchAuthorGet(requestParameters: AuthorSearchControllerApiExecuteSearchAuthorGetRequest = {}, options?: RawAxiosRequestConfig): AxiosPromise<PagedModelEntityModelAuthor> {
            return localVarFp.executeSearchAuthorGet(requestParameters.id, requestParameters.name, requestParameters.page, requestParameters.size, requestParameters.sort, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * AuthorSearchControllerApi - interface
 * @export
 * @interface AuthorSearchControllerApi
 */
export interface AuthorSearchControllerApiInterface {
    /**
     * 
     * @param {AuthorSearchControllerApiExecuteSearchAuthorGetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AuthorSearchControllerApiInterface
     */
    executeSearchAuthorGet(requestParameters?: AuthorSearchControllerApiExecuteSearchAuthorGetRequest, options?: RawAxiosRequestConfig): AxiosPromise<PagedModelEntityModelAuthor>;

}

/**
 * Request parameters for executeSearchAuthorGet operation in AuthorSearchControllerApi.
 * @export
 * @interface AuthorSearchControllerApiExecuteSearchAuthorGetRequest
 */
export interface AuthorSearchControllerApiExecuteSearchAuthorGetRequest {
    /**
     * 
     * @type {number}
     * @memberof AuthorSearchControllerApiExecuteSearchAuthorGet
     */
    readonly id?: number

    /**
     * 
     * @type {string}
     * @memberof AuthorSearchControllerApiExecuteSearchAuthorGet
     */
    readonly name?: string

    /**
     * Zero-based page index (0..N)
     * @type {number}
     * @memberof AuthorSearchControllerApiExecuteSearchAuthorGet
     */
    readonly page?: number

    /**
     * The size of the page to be returned
     * @type {number}
     * @memberof AuthorSearchControllerApiExecuteSearchAuthorGet
     */
    readonly size?: number

    /**
     * Sorting criteria in the format: property,(asc|desc). Default sort order is ascending. Multiple sort criteria are supported.
     * @type {Array<string>}
     * @memberof AuthorSearchControllerApiExecuteSearchAuthorGet
     */
    readonly sort?: Array<string>
}

/**
 * AuthorSearchControllerApi - object-oriented interface
 * @export
 * @class AuthorSearchControllerApi
 * @extends {BaseAPI}
 */
export class AuthorSearchControllerApi extends BaseAPI implements AuthorSearchControllerApiInterface {
    /**
     * 
     * @param {AuthorSearchControllerApiExecuteSearchAuthorGetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AuthorSearchControllerApi
     */
    public executeSearchAuthorGet(requestParameters: AuthorSearchControllerApiExecuteSearchAuthorGetRequest = {}, options?: RawAxiosRequestConfig) {
        return AuthorSearchControllerApiFp(this.configuration).executeSearchAuthorGet(requestParameters.id, requestParameters.name, requestParameters.page, requestParameters.size, requestParameters.sort, options).then((request) => request(this.axios, this.basePath));
    }
}



/**
 * BookMasterAuthorRelationshipEntityControllerApi - axios parameter creator
 * @export
 */
export const BookMasterAuthorRelationshipEntityControllerApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * delete-bookmasterauthorrelationship
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteItemResourceBookmasterauthorrelationshipDelete: async (id: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('deleteItemResourceBookmasterauthorrelationshipDelete', 'id', id)
            const localVarPath = `/bookMasterAuthorRelationships/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * get-bookmasterauthorrelationship
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getCollectionResourceBookmasterauthorrelationshipGet: async (options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/bookMasterAuthorRelationships`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * get-bookmasterauthorrelationship
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getItemResourceBookmasterauthorrelationshipGet: async (id: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('getItemResourceBookmasterauthorrelationshipGet', 'id', id)
            const localVarPath = `/bookMasterAuthorRelationships/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * patch-bookmasterauthorrelationship
         * @param {string} id 
         * @param {BookMasterAuthorRelationshipRequestBody} bookMasterAuthorRelationshipRequestBody 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        patchItemResourceBookmasterauthorrelationshipPatch: async (id: string, bookMasterAuthorRelationshipRequestBody: BookMasterAuthorRelationshipRequestBody, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('patchItemResourceBookmasterauthorrelationshipPatch', 'id', id)
            // verify required parameter 'bookMasterAuthorRelationshipRequestBody' is not null or undefined
            assertParamExists('patchItemResourceBookmasterauthorrelationshipPatch', 'bookMasterAuthorRelationshipRequestBody', bookMasterAuthorRelationshipRequestBody)
            const localVarPath = `/bookMasterAuthorRelationships/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(bookMasterAuthorRelationshipRequestBody, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * create-bookmasterauthorrelationship
         * @param {BookMasterAuthorRelationshipRequestBody} bookMasterAuthorRelationshipRequestBody 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postCollectionResourceBookmasterauthorrelationshipPost: async (bookMasterAuthorRelationshipRequestBody: BookMasterAuthorRelationshipRequestBody, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'bookMasterAuthorRelationshipRequestBody' is not null or undefined
            assertParamExists('postCollectionResourceBookmasterauthorrelationshipPost', 'bookMasterAuthorRelationshipRequestBody', bookMasterAuthorRelationshipRequestBody)
            const localVarPath = `/bookMasterAuthorRelationships`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(bookMasterAuthorRelationshipRequestBody, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * update-bookmasterauthorrelationship
         * @param {string} id 
         * @param {BookMasterAuthorRelationshipRequestBody} bookMasterAuthorRelationshipRequestBody 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        putItemResourceBookmasterauthorrelationshipPut: async (id: string, bookMasterAuthorRelationshipRequestBody: BookMasterAuthorRelationshipRequestBody, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('putItemResourceBookmasterauthorrelationshipPut', 'id', id)
            // verify required parameter 'bookMasterAuthorRelationshipRequestBody' is not null or undefined
            assertParamExists('putItemResourceBookmasterauthorrelationshipPut', 'bookMasterAuthorRelationshipRequestBody', bookMasterAuthorRelationshipRequestBody)
            const localVarPath = `/bookMasterAuthorRelationships/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(bookMasterAuthorRelationshipRequestBody, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * BookMasterAuthorRelationshipEntityControllerApi - functional programming interface
 * @export
 */
export const BookMasterAuthorRelationshipEntityControllerApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = BookMasterAuthorRelationshipEntityControllerApiAxiosParamCreator(configuration)
    return {
        /**
         * delete-bookmasterauthorrelationship
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deleteItemResourceBookmasterauthorrelationshipDelete(id: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.deleteItemResourceBookmasterauthorrelationshipDelete(id, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['BookMasterAuthorRelationshipEntityControllerApi.deleteItemResourceBookmasterauthorrelationshipDelete']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * get-bookmasterauthorrelationship
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getCollectionResourceBookmasterauthorrelationshipGet(options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CollectionModelEntityModelBookMasterAuthorRelationship>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getCollectionResourceBookmasterauthorrelationshipGet(options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['BookMasterAuthorRelationshipEntityControllerApi.getCollectionResourceBookmasterauthorrelationshipGet']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * get-bookmasterauthorrelationship
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getItemResourceBookmasterauthorrelationshipGet(id: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<EntityModelBookMasterAuthorRelationship>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getItemResourceBookmasterauthorrelationshipGet(id, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['BookMasterAuthorRelationshipEntityControllerApi.getItemResourceBookmasterauthorrelationshipGet']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * patch-bookmasterauthorrelationship
         * @param {string} id 
         * @param {BookMasterAuthorRelationshipRequestBody} bookMasterAuthorRelationshipRequestBody 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async patchItemResourceBookmasterauthorrelationshipPatch(id: string, bookMasterAuthorRelationshipRequestBody: BookMasterAuthorRelationshipRequestBody, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<EntityModelBookMasterAuthorRelationship>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.patchItemResourceBookmasterauthorrelationshipPatch(id, bookMasterAuthorRelationshipRequestBody, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['BookMasterAuthorRelationshipEntityControllerApi.patchItemResourceBookmasterauthorrelationshipPatch']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * create-bookmasterauthorrelationship
         * @param {BookMasterAuthorRelationshipRequestBody} bookMasterAuthorRelationshipRequestBody 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async postCollectionResourceBookmasterauthorrelationshipPost(bookMasterAuthorRelationshipRequestBody: BookMasterAuthorRelationshipRequestBody, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<EntityModelBookMasterAuthorRelationship>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.postCollectionResourceBookmasterauthorrelationshipPost(bookMasterAuthorRelationshipRequestBody, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['BookMasterAuthorRelationshipEntityControllerApi.postCollectionResourceBookmasterauthorrelationshipPost']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * update-bookmasterauthorrelationship
         * @param {string} id 
         * @param {BookMasterAuthorRelationshipRequestBody} bookMasterAuthorRelationshipRequestBody 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async putItemResourceBookmasterauthorrelationshipPut(id: string, bookMasterAuthorRelationshipRequestBody: BookMasterAuthorRelationshipRequestBody, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<EntityModelBookMasterAuthorRelationship>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.putItemResourceBookmasterauthorrelationshipPut(id, bookMasterAuthorRelationshipRequestBody, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['BookMasterAuthorRelationshipEntityControllerApi.putItemResourceBookmasterauthorrelationshipPut']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * BookMasterAuthorRelationshipEntityControllerApi - factory interface
 * @export
 */
export const BookMasterAuthorRelationshipEntityControllerApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = BookMasterAuthorRelationshipEntityControllerApiFp(configuration)
    return {
        /**
         * delete-bookmasterauthorrelationship
         * @param {BookMasterAuthorRelationshipEntityControllerApiDeleteItemResourceBookmasterauthorrelationshipDeleteRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteItemResourceBookmasterauthorrelationshipDelete(requestParameters: BookMasterAuthorRelationshipEntityControllerApiDeleteItemResourceBookmasterauthorrelationshipDeleteRequest, options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.deleteItemResourceBookmasterauthorrelationshipDelete(requestParameters.id, options).then((request) => request(axios, basePath));
        },
        /**
         * get-bookmasterauthorrelationship
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getCollectionResourceBookmasterauthorrelationshipGet(options?: RawAxiosRequestConfig): AxiosPromise<CollectionModelEntityModelBookMasterAuthorRelationship> {
            return localVarFp.getCollectionResourceBookmasterauthorrelationshipGet(options).then((request) => request(axios, basePath));
        },
        /**
         * get-bookmasterauthorrelationship
         * @param {BookMasterAuthorRelationshipEntityControllerApiGetItemResourceBookmasterauthorrelationshipGetRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getItemResourceBookmasterauthorrelationshipGet(requestParameters: BookMasterAuthorRelationshipEntityControllerApiGetItemResourceBookmasterauthorrelationshipGetRequest, options?: RawAxiosRequestConfig): AxiosPromise<EntityModelBookMasterAuthorRelationship> {
            return localVarFp.getItemResourceBookmasterauthorrelationshipGet(requestParameters.id, options).then((request) => request(axios, basePath));
        },
        /**
         * patch-bookmasterauthorrelationship
         * @param {BookMasterAuthorRelationshipEntityControllerApiPatchItemResourceBookmasterauthorrelationshipPatchRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        patchItemResourceBookmasterauthorrelationshipPatch(requestParameters: BookMasterAuthorRelationshipEntityControllerApiPatchItemResourceBookmasterauthorrelationshipPatchRequest, options?: RawAxiosRequestConfig): AxiosPromise<EntityModelBookMasterAuthorRelationship> {
            return localVarFp.patchItemResourceBookmasterauthorrelationshipPatch(requestParameters.id, requestParameters.bookMasterAuthorRelationshipRequestBody, options).then((request) => request(axios, basePath));
        },
        /**
         * create-bookmasterauthorrelationship
         * @param {BookMasterAuthorRelationshipEntityControllerApiPostCollectionResourceBookmasterauthorrelationshipPostRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postCollectionResourceBookmasterauthorrelationshipPost(requestParameters: BookMasterAuthorRelationshipEntityControllerApiPostCollectionResourceBookmasterauthorrelationshipPostRequest, options?: RawAxiosRequestConfig): AxiosPromise<EntityModelBookMasterAuthorRelationship> {
            return localVarFp.postCollectionResourceBookmasterauthorrelationshipPost(requestParameters.bookMasterAuthorRelationshipRequestBody, options).then((request) => request(axios, basePath));
        },
        /**
         * update-bookmasterauthorrelationship
         * @param {BookMasterAuthorRelationshipEntityControllerApiPutItemResourceBookmasterauthorrelationshipPutRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        putItemResourceBookmasterauthorrelationshipPut(requestParameters: BookMasterAuthorRelationshipEntityControllerApiPutItemResourceBookmasterauthorrelationshipPutRequest, options?: RawAxiosRequestConfig): AxiosPromise<EntityModelBookMasterAuthorRelationship> {
            return localVarFp.putItemResourceBookmasterauthorrelationshipPut(requestParameters.id, requestParameters.bookMasterAuthorRelationshipRequestBody, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * BookMasterAuthorRelationshipEntityControllerApi - interface
 * @export
 * @interface BookMasterAuthorRelationshipEntityControllerApi
 */
export interface BookMasterAuthorRelationshipEntityControllerApiInterface {
    /**
     * delete-bookmasterauthorrelationship
     * @param {BookMasterAuthorRelationshipEntityControllerApiDeleteItemResourceBookmasterauthorrelationshipDeleteRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BookMasterAuthorRelationshipEntityControllerApiInterface
     */
    deleteItemResourceBookmasterauthorrelationshipDelete(requestParameters: BookMasterAuthorRelationshipEntityControllerApiDeleteItemResourceBookmasterauthorrelationshipDeleteRequest, options?: RawAxiosRequestConfig): AxiosPromise<void>;

    /**
     * get-bookmasterauthorrelationship
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BookMasterAuthorRelationshipEntityControllerApiInterface
     */
    getCollectionResourceBookmasterauthorrelationshipGet(options?: RawAxiosRequestConfig): AxiosPromise<CollectionModelEntityModelBookMasterAuthorRelationship>;

    /**
     * get-bookmasterauthorrelationship
     * @param {BookMasterAuthorRelationshipEntityControllerApiGetItemResourceBookmasterauthorrelationshipGetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BookMasterAuthorRelationshipEntityControllerApiInterface
     */
    getItemResourceBookmasterauthorrelationshipGet(requestParameters: BookMasterAuthorRelationshipEntityControllerApiGetItemResourceBookmasterauthorrelationshipGetRequest, options?: RawAxiosRequestConfig): AxiosPromise<EntityModelBookMasterAuthorRelationship>;

    /**
     * patch-bookmasterauthorrelationship
     * @param {BookMasterAuthorRelationshipEntityControllerApiPatchItemResourceBookmasterauthorrelationshipPatchRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BookMasterAuthorRelationshipEntityControllerApiInterface
     */
    patchItemResourceBookmasterauthorrelationshipPatch(requestParameters: BookMasterAuthorRelationshipEntityControllerApiPatchItemResourceBookmasterauthorrelationshipPatchRequest, options?: RawAxiosRequestConfig): AxiosPromise<EntityModelBookMasterAuthorRelationship>;

    /**
     * create-bookmasterauthorrelationship
     * @param {BookMasterAuthorRelationshipEntityControllerApiPostCollectionResourceBookmasterauthorrelationshipPostRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BookMasterAuthorRelationshipEntityControllerApiInterface
     */
    postCollectionResourceBookmasterauthorrelationshipPost(requestParameters: BookMasterAuthorRelationshipEntityControllerApiPostCollectionResourceBookmasterauthorrelationshipPostRequest, options?: RawAxiosRequestConfig): AxiosPromise<EntityModelBookMasterAuthorRelationship>;

    /**
     * update-bookmasterauthorrelationship
     * @param {BookMasterAuthorRelationshipEntityControllerApiPutItemResourceBookmasterauthorrelationshipPutRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BookMasterAuthorRelationshipEntityControllerApiInterface
     */
    putItemResourceBookmasterauthorrelationshipPut(requestParameters: BookMasterAuthorRelationshipEntityControllerApiPutItemResourceBookmasterauthorrelationshipPutRequest, options?: RawAxiosRequestConfig): AxiosPromise<EntityModelBookMasterAuthorRelationship>;

}

/**
 * Request parameters for deleteItemResourceBookmasterauthorrelationshipDelete operation in BookMasterAuthorRelationshipEntityControllerApi.
 * @export
 * @interface BookMasterAuthorRelationshipEntityControllerApiDeleteItemResourceBookmasterauthorrelationshipDeleteRequest
 */
export interface BookMasterAuthorRelationshipEntityControllerApiDeleteItemResourceBookmasterauthorrelationshipDeleteRequest {
    /**
     * 
     * @type {string}
     * @memberof BookMasterAuthorRelationshipEntityControllerApiDeleteItemResourceBookmasterauthorrelationshipDelete
     */
    readonly id: string
}

/**
 * Request parameters for getItemResourceBookmasterauthorrelationshipGet operation in BookMasterAuthorRelationshipEntityControllerApi.
 * @export
 * @interface BookMasterAuthorRelationshipEntityControllerApiGetItemResourceBookmasterauthorrelationshipGetRequest
 */
export interface BookMasterAuthorRelationshipEntityControllerApiGetItemResourceBookmasterauthorrelationshipGetRequest {
    /**
     * 
     * @type {string}
     * @memberof BookMasterAuthorRelationshipEntityControllerApiGetItemResourceBookmasterauthorrelationshipGet
     */
    readonly id: string
}

/**
 * Request parameters for patchItemResourceBookmasterauthorrelationshipPatch operation in BookMasterAuthorRelationshipEntityControllerApi.
 * @export
 * @interface BookMasterAuthorRelationshipEntityControllerApiPatchItemResourceBookmasterauthorrelationshipPatchRequest
 */
export interface BookMasterAuthorRelationshipEntityControllerApiPatchItemResourceBookmasterauthorrelationshipPatchRequest {
    /**
     * 
     * @type {string}
     * @memberof BookMasterAuthorRelationshipEntityControllerApiPatchItemResourceBookmasterauthorrelationshipPatch
     */
    readonly id: string

    /**
     * 
     * @type {BookMasterAuthorRelationshipRequestBody}
     * @memberof BookMasterAuthorRelationshipEntityControllerApiPatchItemResourceBookmasterauthorrelationshipPatch
     */
    readonly bookMasterAuthorRelationshipRequestBody: BookMasterAuthorRelationshipRequestBody
}

/**
 * Request parameters for postCollectionResourceBookmasterauthorrelationshipPost operation in BookMasterAuthorRelationshipEntityControllerApi.
 * @export
 * @interface BookMasterAuthorRelationshipEntityControllerApiPostCollectionResourceBookmasterauthorrelationshipPostRequest
 */
export interface BookMasterAuthorRelationshipEntityControllerApiPostCollectionResourceBookmasterauthorrelationshipPostRequest {
    /**
     * 
     * @type {BookMasterAuthorRelationshipRequestBody}
     * @memberof BookMasterAuthorRelationshipEntityControllerApiPostCollectionResourceBookmasterauthorrelationshipPost
     */
    readonly bookMasterAuthorRelationshipRequestBody: BookMasterAuthorRelationshipRequestBody
}

/**
 * Request parameters for putItemResourceBookmasterauthorrelationshipPut operation in BookMasterAuthorRelationshipEntityControllerApi.
 * @export
 * @interface BookMasterAuthorRelationshipEntityControllerApiPutItemResourceBookmasterauthorrelationshipPutRequest
 */
export interface BookMasterAuthorRelationshipEntityControllerApiPutItemResourceBookmasterauthorrelationshipPutRequest {
    /**
     * 
     * @type {string}
     * @memberof BookMasterAuthorRelationshipEntityControllerApiPutItemResourceBookmasterauthorrelationshipPut
     */
    readonly id: string

    /**
     * 
     * @type {BookMasterAuthorRelationshipRequestBody}
     * @memberof BookMasterAuthorRelationshipEntityControllerApiPutItemResourceBookmasterauthorrelationshipPut
     */
    readonly bookMasterAuthorRelationshipRequestBody: BookMasterAuthorRelationshipRequestBody
}

/**
 * BookMasterAuthorRelationshipEntityControllerApi - object-oriented interface
 * @export
 * @class BookMasterAuthorRelationshipEntityControllerApi
 * @extends {BaseAPI}
 */
export class BookMasterAuthorRelationshipEntityControllerApi extends BaseAPI implements BookMasterAuthorRelationshipEntityControllerApiInterface {
    /**
     * delete-bookmasterauthorrelationship
     * @param {BookMasterAuthorRelationshipEntityControllerApiDeleteItemResourceBookmasterauthorrelationshipDeleteRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BookMasterAuthorRelationshipEntityControllerApi
     */
    public deleteItemResourceBookmasterauthorrelationshipDelete(requestParameters: BookMasterAuthorRelationshipEntityControllerApiDeleteItemResourceBookmasterauthorrelationshipDeleteRequest, options?: RawAxiosRequestConfig) {
        return BookMasterAuthorRelationshipEntityControllerApiFp(this.configuration).deleteItemResourceBookmasterauthorrelationshipDelete(requestParameters.id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * get-bookmasterauthorrelationship
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BookMasterAuthorRelationshipEntityControllerApi
     */
    public getCollectionResourceBookmasterauthorrelationshipGet(options?: RawAxiosRequestConfig) {
        return BookMasterAuthorRelationshipEntityControllerApiFp(this.configuration).getCollectionResourceBookmasterauthorrelationshipGet(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * get-bookmasterauthorrelationship
     * @param {BookMasterAuthorRelationshipEntityControllerApiGetItemResourceBookmasterauthorrelationshipGetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BookMasterAuthorRelationshipEntityControllerApi
     */
    public getItemResourceBookmasterauthorrelationshipGet(requestParameters: BookMasterAuthorRelationshipEntityControllerApiGetItemResourceBookmasterauthorrelationshipGetRequest, options?: RawAxiosRequestConfig) {
        return BookMasterAuthorRelationshipEntityControllerApiFp(this.configuration).getItemResourceBookmasterauthorrelationshipGet(requestParameters.id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * patch-bookmasterauthorrelationship
     * @param {BookMasterAuthorRelationshipEntityControllerApiPatchItemResourceBookmasterauthorrelationshipPatchRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BookMasterAuthorRelationshipEntityControllerApi
     */
    public patchItemResourceBookmasterauthorrelationshipPatch(requestParameters: BookMasterAuthorRelationshipEntityControllerApiPatchItemResourceBookmasterauthorrelationshipPatchRequest, options?: RawAxiosRequestConfig) {
        return BookMasterAuthorRelationshipEntityControllerApiFp(this.configuration).patchItemResourceBookmasterauthorrelationshipPatch(requestParameters.id, requestParameters.bookMasterAuthorRelationshipRequestBody, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * create-bookmasterauthorrelationship
     * @param {BookMasterAuthorRelationshipEntityControllerApiPostCollectionResourceBookmasterauthorrelationshipPostRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BookMasterAuthorRelationshipEntityControllerApi
     */
    public postCollectionResourceBookmasterauthorrelationshipPost(requestParameters: BookMasterAuthorRelationshipEntityControllerApiPostCollectionResourceBookmasterauthorrelationshipPostRequest, options?: RawAxiosRequestConfig) {
        return BookMasterAuthorRelationshipEntityControllerApiFp(this.configuration).postCollectionResourceBookmasterauthorrelationshipPost(requestParameters.bookMasterAuthorRelationshipRequestBody, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * update-bookmasterauthorrelationship
     * @param {BookMasterAuthorRelationshipEntityControllerApiPutItemResourceBookmasterauthorrelationshipPutRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BookMasterAuthorRelationshipEntityControllerApi
     */
    public putItemResourceBookmasterauthorrelationshipPut(requestParameters: BookMasterAuthorRelationshipEntityControllerApiPutItemResourceBookmasterauthorrelationshipPutRequest, options?: RawAxiosRequestConfig) {
        return BookMasterAuthorRelationshipEntityControllerApiFp(this.configuration).putItemResourceBookmasterauthorrelationshipPut(requestParameters.id, requestParameters.bookMasterAuthorRelationshipRequestBody, options).then((request) => request(this.axios, this.basePath));
    }
}



/**
 * BookMasterAuthorRelationshipPropertyReferenceControllerApi - axios parameter creator
 * @export
 */
export const BookMasterAuthorRelationshipPropertyReferenceControllerApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * patch-author-by-bookmasterauthorrelationship-Id
         * @param {string} id 
         * @param {CollectionModelObject} collectionModelObject 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createPropertyReferenceBookmasterauthorrelationshipPatch: async (id: string, collectionModelObject: CollectionModelObject, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('createPropertyReferenceBookmasterauthorrelationshipPatch', 'id', id)
            // verify required parameter 'collectionModelObject' is not null or undefined
            assertParamExists('createPropertyReferenceBookmasterauthorrelationshipPatch', 'collectionModelObject', collectionModelObject)
            const localVarPath = `/bookMasterAuthorRelationships/{id}/author`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(collectionModelObject, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * patch-bookmaster-by-bookmasterauthorrelationship-Id
         * @param {string} id 
         * @param {CollectionModelObject} collectionModelObject 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createPropertyReferenceBookmasterauthorrelationshipPatch1: async (id: string, collectionModelObject: CollectionModelObject, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('createPropertyReferenceBookmasterauthorrelationshipPatch1', 'id', id)
            // verify required parameter 'collectionModelObject' is not null or undefined
            assertParamExists('createPropertyReferenceBookmasterauthorrelationshipPatch1', 'collectionModelObject', collectionModelObject)
            const localVarPath = `/bookMasterAuthorRelationships/{id}/bookMaster`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(collectionModelObject, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * update-author-by-bookmasterauthorrelationship-Id
         * @param {string} id 
         * @param {CollectionModelObject} collectionModelObject 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createPropertyReferenceBookmasterauthorrelationshipPut: async (id: string, collectionModelObject: CollectionModelObject, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('createPropertyReferenceBookmasterauthorrelationshipPut', 'id', id)
            // verify required parameter 'collectionModelObject' is not null or undefined
            assertParamExists('createPropertyReferenceBookmasterauthorrelationshipPut', 'collectionModelObject', collectionModelObject)
            const localVarPath = `/bookMasterAuthorRelationships/{id}/author`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(collectionModelObject, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * update-bookmaster-by-bookmasterauthorrelationship-Id
         * @param {string} id 
         * @param {CollectionModelObject} collectionModelObject 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createPropertyReferenceBookmasterauthorrelationshipPut1: async (id: string, collectionModelObject: CollectionModelObject, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('createPropertyReferenceBookmasterauthorrelationshipPut1', 'id', id)
            // verify required parameter 'collectionModelObject' is not null or undefined
            assertParamExists('createPropertyReferenceBookmasterauthorrelationshipPut1', 'collectionModelObject', collectionModelObject)
            const localVarPath = `/bookMasterAuthorRelationships/{id}/bookMaster`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(collectionModelObject, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * delete-author-by-bookmasterauthorrelationship-Id
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deletePropertyReferenceBookmasterauthorrelationshipDelete: async (id: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('deletePropertyReferenceBookmasterauthorrelationshipDelete', 'id', id)
            const localVarPath = `/bookMasterAuthorRelationships/{id}/author`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * delete-bookmaster-by-bookmasterauthorrelationship-Id
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deletePropertyReferenceBookmasterauthorrelationshipDelete1: async (id: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('deletePropertyReferenceBookmasterauthorrelationshipDelete1', 'id', id)
            const localVarPath = `/bookMasterAuthorRelationships/{id}/bookMaster`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * delete-author-by-bookmasterauthorrelationship-Id
         * @param {string} id 
         * @param {string} propertyId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deletePropertyReferenceIdBookmasterauthorrelationshipDelete: async (id: string, propertyId: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('deletePropertyReferenceIdBookmasterauthorrelationshipDelete', 'id', id)
            // verify required parameter 'propertyId' is not null or undefined
            assertParamExists('deletePropertyReferenceIdBookmasterauthorrelationshipDelete', 'propertyId', propertyId)
            const localVarPath = `/bookMasterAuthorRelationships/{id}/author/{propertyId}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)))
                .replace(`{${"propertyId"}}`, encodeURIComponent(String(propertyId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * delete-bookmaster-by-bookmasterauthorrelationship-Id
         * @param {string} id 
         * @param {string} propertyId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deletePropertyReferenceIdBookmasterauthorrelationshipDelete1: async (id: string, propertyId: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('deletePropertyReferenceIdBookmasterauthorrelationshipDelete1', 'id', id)
            // verify required parameter 'propertyId' is not null or undefined
            assertParamExists('deletePropertyReferenceIdBookmasterauthorrelationshipDelete1', 'propertyId', propertyId)
            const localVarPath = `/bookMasterAuthorRelationships/{id}/bookMaster/{propertyId}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)))
                .replace(`{${"propertyId"}}`, encodeURIComponent(String(propertyId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * get-author-by-bookmasterauthorrelationship-Id
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        followPropertyReferenceBookmasterauthorrelationshipGet: async (id: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('followPropertyReferenceBookmasterauthorrelationshipGet', 'id', id)
            const localVarPath = `/bookMasterAuthorRelationships/{id}/author`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * get-author-by-bookmasterauthorrelationship-Id
         * @param {string} id 
         * @param {string} propertyId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        followPropertyReferenceBookmasterauthorrelationshipGet1: async (id: string, propertyId: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('followPropertyReferenceBookmasterauthorrelationshipGet1', 'id', id)
            // verify required parameter 'propertyId' is not null or undefined
            assertParamExists('followPropertyReferenceBookmasterauthorrelationshipGet1', 'propertyId', propertyId)
            const localVarPath = `/bookMasterAuthorRelationships/{id}/author/{propertyId}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)))
                .replace(`{${"propertyId"}}`, encodeURIComponent(String(propertyId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * get-bookmaster-by-bookmasterauthorrelationship-Id
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        followPropertyReferenceBookmasterauthorrelationshipGet2: async (id: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('followPropertyReferenceBookmasterauthorrelationshipGet2', 'id', id)
            const localVarPath = `/bookMasterAuthorRelationships/{id}/bookMaster`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * get-bookmaster-by-bookmasterauthorrelationship-Id
         * @param {string} id 
         * @param {string} propertyId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        followPropertyReferenceBookmasterauthorrelationshipGet3: async (id: string, propertyId: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('followPropertyReferenceBookmasterauthorrelationshipGet3', 'id', id)
            // verify required parameter 'propertyId' is not null or undefined
            assertParamExists('followPropertyReferenceBookmasterauthorrelationshipGet3', 'propertyId', propertyId)
            const localVarPath = `/bookMasterAuthorRelationships/{id}/bookMaster/{propertyId}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)))
                .replace(`{${"propertyId"}}`, encodeURIComponent(String(propertyId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * BookMasterAuthorRelationshipPropertyReferenceControllerApi - functional programming interface
 * @export
 */
export const BookMasterAuthorRelationshipPropertyReferenceControllerApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = BookMasterAuthorRelationshipPropertyReferenceControllerApiAxiosParamCreator(configuration)
    return {
        /**
         * patch-author-by-bookmasterauthorrelationship-Id
         * @param {string} id 
         * @param {CollectionModelObject} collectionModelObject 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async createPropertyReferenceBookmasterauthorrelationshipPatch(id: string, collectionModelObject: CollectionModelObject, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<EntityModelAuthor>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.createPropertyReferenceBookmasterauthorrelationshipPatch(id, collectionModelObject, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['BookMasterAuthorRelationshipPropertyReferenceControllerApi.createPropertyReferenceBookmasterauthorrelationshipPatch']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * patch-bookmaster-by-bookmasterauthorrelationship-Id
         * @param {string} id 
         * @param {CollectionModelObject} collectionModelObject 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async createPropertyReferenceBookmasterauthorrelationshipPatch1(id: string, collectionModelObject: CollectionModelObject, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<EntityModelBookMaster>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.createPropertyReferenceBookmasterauthorrelationshipPatch1(id, collectionModelObject, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['BookMasterAuthorRelationshipPropertyReferenceControllerApi.createPropertyReferenceBookmasterauthorrelationshipPatch1']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * update-author-by-bookmasterauthorrelationship-Id
         * @param {string} id 
         * @param {CollectionModelObject} collectionModelObject 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async createPropertyReferenceBookmasterauthorrelationshipPut(id: string, collectionModelObject: CollectionModelObject, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<EntityModelAuthor>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.createPropertyReferenceBookmasterauthorrelationshipPut(id, collectionModelObject, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['BookMasterAuthorRelationshipPropertyReferenceControllerApi.createPropertyReferenceBookmasterauthorrelationshipPut']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * update-bookmaster-by-bookmasterauthorrelationship-Id
         * @param {string} id 
         * @param {CollectionModelObject} collectionModelObject 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async createPropertyReferenceBookmasterauthorrelationshipPut1(id: string, collectionModelObject: CollectionModelObject, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<EntityModelBookMaster>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.createPropertyReferenceBookmasterauthorrelationshipPut1(id, collectionModelObject, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['BookMasterAuthorRelationshipPropertyReferenceControllerApi.createPropertyReferenceBookmasterauthorrelationshipPut1']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * delete-author-by-bookmasterauthorrelationship-Id
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deletePropertyReferenceBookmasterauthorrelationshipDelete(id: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.deletePropertyReferenceBookmasterauthorrelationshipDelete(id, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['BookMasterAuthorRelationshipPropertyReferenceControllerApi.deletePropertyReferenceBookmasterauthorrelationshipDelete']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * delete-bookmaster-by-bookmasterauthorrelationship-Id
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deletePropertyReferenceBookmasterauthorrelationshipDelete1(id: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.deletePropertyReferenceBookmasterauthorrelationshipDelete1(id, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['BookMasterAuthorRelationshipPropertyReferenceControllerApi.deletePropertyReferenceBookmasterauthorrelationshipDelete1']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * delete-author-by-bookmasterauthorrelationship-Id
         * @param {string} id 
         * @param {string} propertyId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deletePropertyReferenceIdBookmasterauthorrelationshipDelete(id: string, propertyId: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.deletePropertyReferenceIdBookmasterauthorrelationshipDelete(id, propertyId, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['BookMasterAuthorRelationshipPropertyReferenceControllerApi.deletePropertyReferenceIdBookmasterauthorrelationshipDelete']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * delete-bookmaster-by-bookmasterauthorrelationship-Id
         * @param {string} id 
         * @param {string} propertyId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deletePropertyReferenceIdBookmasterauthorrelationshipDelete1(id: string, propertyId: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.deletePropertyReferenceIdBookmasterauthorrelationshipDelete1(id, propertyId, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['BookMasterAuthorRelationshipPropertyReferenceControllerApi.deletePropertyReferenceIdBookmasterauthorrelationshipDelete1']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * get-author-by-bookmasterauthorrelationship-Id
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async followPropertyReferenceBookmasterauthorrelationshipGet(id: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<EntityModelAuthor>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.followPropertyReferenceBookmasterauthorrelationshipGet(id, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['BookMasterAuthorRelationshipPropertyReferenceControllerApi.followPropertyReferenceBookmasterauthorrelationshipGet']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * get-author-by-bookmasterauthorrelationship-Id
         * @param {string} id 
         * @param {string} propertyId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async followPropertyReferenceBookmasterauthorrelationshipGet1(id: string, propertyId: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<EntityModelAuthor>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.followPropertyReferenceBookmasterauthorrelationshipGet1(id, propertyId, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['BookMasterAuthorRelationshipPropertyReferenceControllerApi.followPropertyReferenceBookmasterauthorrelationshipGet1']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * get-bookmaster-by-bookmasterauthorrelationship-Id
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async followPropertyReferenceBookmasterauthorrelationshipGet2(id: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<EntityModelBookMaster>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.followPropertyReferenceBookmasterauthorrelationshipGet2(id, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['BookMasterAuthorRelationshipPropertyReferenceControllerApi.followPropertyReferenceBookmasterauthorrelationshipGet2']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * get-bookmaster-by-bookmasterauthorrelationship-Id
         * @param {string} id 
         * @param {string} propertyId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async followPropertyReferenceBookmasterauthorrelationshipGet3(id: string, propertyId: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<EntityModelBookMaster>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.followPropertyReferenceBookmasterauthorrelationshipGet3(id, propertyId, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['BookMasterAuthorRelationshipPropertyReferenceControllerApi.followPropertyReferenceBookmasterauthorrelationshipGet3']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * BookMasterAuthorRelationshipPropertyReferenceControllerApi - factory interface
 * @export
 */
export const BookMasterAuthorRelationshipPropertyReferenceControllerApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = BookMasterAuthorRelationshipPropertyReferenceControllerApiFp(configuration)
    return {
        /**
         * patch-author-by-bookmasterauthorrelationship-Id
         * @param {BookMasterAuthorRelationshipPropertyReferenceControllerApiCreatePropertyReferenceBookmasterauthorrelationshipPatchRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createPropertyReferenceBookmasterauthorrelationshipPatch(requestParameters: BookMasterAuthorRelationshipPropertyReferenceControllerApiCreatePropertyReferenceBookmasterauthorrelationshipPatchRequest, options?: RawAxiosRequestConfig): AxiosPromise<EntityModelAuthor> {
            return localVarFp.createPropertyReferenceBookmasterauthorrelationshipPatch(requestParameters.id, requestParameters.collectionModelObject, options).then((request) => request(axios, basePath));
        },
        /**
         * patch-bookmaster-by-bookmasterauthorrelationship-Id
         * @param {BookMasterAuthorRelationshipPropertyReferenceControllerApiCreatePropertyReferenceBookmasterauthorrelationshipPatch1Request} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createPropertyReferenceBookmasterauthorrelationshipPatch1(requestParameters: BookMasterAuthorRelationshipPropertyReferenceControllerApiCreatePropertyReferenceBookmasterauthorrelationshipPatch1Request, options?: RawAxiosRequestConfig): AxiosPromise<EntityModelBookMaster> {
            return localVarFp.createPropertyReferenceBookmasterauthorrelationshipPatch1(requestParameters.id, requestParameters.collectionModelObject, options).then((request) => request(axios, basePath));
        },
        /**
         * update-author-by-bookmasterauthorrelationship-Id
         * @param {BookMasterAuthorRelationshipPropertyReferenceControllerApiCreatePropertyReferenceBookmasterauthorrelationshipPutRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createPropertyReferenceBookmasterauthorrelationshipPut(requestParameters: BookMasterAuthorRelationshipPropertyReferenceControllerApiCreatePropertyReferenceBookmasterauthorrelationshipPutRequest, options?: RawAxiosRequestConfig): AxiosPromise<EntityModelAuthor> {
            return localVarFp.createPropertyReferenceBookmasterauthorrelationshipPut(requestParameters.id, requestParameters.collectionModelObject, options).then((request) => request(axios, basePath));
        },
        /**
         * update-bookmaster-by-bookmasterauthorrelationship-Id
         * @param {BookMasterAuthorRelationshipPropertyReferenceControllerApiCreatePropertyReferenceBookmasterauthorrelationshipPut1Request} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createPropertyReferenceBookmasterauthorrelationshipPut1(requestParameters: BookMasterAuthorRelationshipPropertyReferenceControllerApiCreatePropertyReferenceBookmasterauthorrelationshipPut1Request, options?: RawAxiosRequestConfig): AxiosPromise<EntityModelBookMaster> {
            return localVarFp.createPropertyReferenceBookmasterauthorrelationshipPut1(requestParameters.id, requestParameters.collectionModelObject, options).then((request) => request(axios, basePath));
        },
        /**
         * delete-author-by-bookmasterauthorrelationship-Id
         * @param {BookMasterAuthorRelationshipPropertyReferenceControllerApiDeletePropertyReferenceBookmasterauthorrelationshipDeleteRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deletePropertyReferenceBookmasterauthorrelationshipDelete(requestParameters: BookMasterAuthorRelationshipPropertyReferenceControllerApiDeletePropertyReferenceBookmasterauthorrelationshipDeleteRequest, options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.deletePropertyReferenceBookmasterauthorrelationshipDelete(requestParameters.id, options).then((request) => request(axios, basePath));
        },
        /**
         * delete-bookmaster-by-bookmasterauthorrelationship-Id
         * @param {BookMasterAuthorRelationshipPropertyReferenceControllerApiDeletePropertyReferenceBookmasterauthorrelationshipDelete1Request} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deletePropertyReferenceBookmasterauthorrelationshipDelete1(requestParameters: BookMasterAuthorRelationshipPropertyReferenceControllerApiDeletePropertyReferenceBookmasterauthorrelationshipDelete1Request, options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.deletePropertyReferenceBookmasterauthorrelationshipDelete1(requestParameters.id, options).then((request) => request(axios, basePath));
        },
        /**
         * delete-author-by-bookmasterauthorrelationship-Id
         * @param {BookMasterAuthorRelationshipPropertyReferenceControllerApiDeletePropertyReferenceIdBookmasterauthorrelationshipDeleteRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deletePropertyReferenceIdBookmasterauthorrelationshipDelete(requestParameters: BookMasterAuthorRelationshipPropertyReferenceControllerApiDeletePropertyReferenceIdBookmasterauthorrelationshipDeleteRequest, options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.deletePropertyReferenceIdBookmasterauthorrelationshipDelete(requestParameters.id, requestParameters.propertyId, options).then((request) => request(axios, basePath));
        },
        /**
         * delete-bookmaster-by-bookmasterauthorrelationship-Id
         * @param {BookMasterAuthorRelationshipPropertyReferenceControllerApiDeletePropertyReferenceIdBookmasterauthorrelationshipDelete1Request} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deletePropertyReferenceIdBookmasterauthorrelationshipDelete1(requestParameters: BookMasterAuthorRelationshipPropertyReferenceControllerApiDeletePropertyReferenceIdBookmasterauthorrelationshipDelete1Request, options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.deletePropertyReferenceIdBookmasterauthorrelationshipDelete1(requestParameters.id, requestParameters.propertyId, options).then((request) => request(axios, basePath));
        },
        /**
         * get-author-by-bookmasterauthorrelationship-Id
         * @param {BookMasterAuthorRelationshipPropertyReferenceControllerApiFollowPropertyReferenceBookmasterauthorrelationshipGetRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        followPropertyReferenceBookmasterauthorrelationshipGet(requestParameters: BookMasterAuthorRelationshipPropertyReferenceControllerApiFollowPropertyReferenceBookmasterauthorrelationshipGetRequest, options?: RawAxiosRequestConfig): AxiosPromise<EntityModelAuthor> {
            return localVarFp.followPropertyReferenceBookmasterauthorrelationshipGet(requestParameters.id, options).then((request) => request(axios, basePath));
        },
        /**
         * get-author-by-bookmasterauthorrelationship-Id
         * @param {BookMasterAuthorRelationshipPropertyReferenceControllerApiFollowPropertyReferenceBookmasterauthorrelationshipGet1Request} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        followPropertyReferenceBookmasterauthorrelationshipGet1(requestParameters: BookMasterAuthorRelationshipPropertyReferenceControllerApiFollowPropertyReferenceBookmasterauthorrelationshipGet1Request, options?: RawAxiosRequestConfig): AxiosPromise<EntityModelAuthor> {
            return localVarFp.followPropertyReferenceBookmasterauthorrelationshipGet1(requestParameters.id, requestParameters.propertyId, options).then((request) => request(axios, basePath));
        },
        /**
         * get-bookmaster-by-bookmasterauthorrelationship-Id
         * @param {BookMasterAuthorRelationshipPropertyReferenceControllerApiFollowPropertyReferenceBookmasterauthorrelationshipGet2Request} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        followPropertyReferenceBookmasterauthorrelationshipGet2(requestParameters: BookMasterAuthorRelationshipPropertyReferenceControllerApiFollowPropertyReferenceBookmasterauthorrelationshipGet2Request, options?: RawAxiosRequestConfig): AxiosPromise<EntityModelBookMaster> {
            return localVarFp.followPropertyReferenceBookmasterauthorrelationshipGet2(requestParameters.id, options).then((request) => request(axios, basePath));
        },
        /**
         * get-bookmaster-by-bookmasterauthorrelationship-Id
         * @param {BookMasterAuthorRelationshipPropertyReferenceControllerApiFollowPropertyReferenceBookmasterauthorrelationshipGet3Request} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        followPropertyReferenceBookmasterauthorrelationshipGet3(requestParameters: BookMasterAuthorRelationshipPropertyReferenceControllerApiFollowPropertyReferenceBookmasterauthorrelationshipGet3Request, options?: RawAxiosRequestConfig): AxiosPromise<EntityModelBookMaster> {
            return localVarFp.followPropertyReferenceBookmasterauthorrelationshipGet3(requestParameters.id, requestParameters.propertyId, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * BookMasterAuthorRelationshipPropertyReferenceControllerApi - interface
 * @export
 * @interface BookMasterAuthorRelationshipPropertyReferenceControllerApi
 */
export interface BookMasterAuthorRelationshipPropertyReferenceControllerApiInterface {
    /**
     * patch-author-by-bookmasterauthorrelationship-Id
     * @param {BookMasterAuthorRelationshipPropertyReferenceControllerApiCreatePropertyReferenceBookmasterauthorrelationshipPatchRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BookMasterAuthorRelationshipPropertyReferenceControllerApiInterface
     */
    createPropertyReferenceBookmasterauthorrelationshipPatch(requestParameters: BookMasterAuthorRelationshipPropertyReferenceControllerApiCreatePropertyReferenceBookmasterauthorrelationshipPatchRequest, options?: RawAxiosRequestConfig): AxiosPromise<EntityModelAuthor>;

    /**
     * patch-bookmaster-by-bookmasterauthorrelationship-Id
     * @param {BookMasterAuthorRelationshipPropertyReferenceControllerApiCreatePropertyReferenceBookmasterauthorrelationshipPatch1Request} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BookMasterAuthorRelationshipPropertyReferenceControllerApiInterface
     */
    createPropertyReferenceBookmasterauthorrelationshipPatch1(requestParameters: BookMasterAuthorRelationshipPropertyReferenceControllerApiCreatePropertyReferenceBookmasterauthorrelationshipPatch1Request, options?: RawAxiosRequestConfig): AxiosPromise<EntityModelBookMaster>;

    /**
     * update-author-by-bookmasterauthorrelationship-Id
     * @param {BookMasterAuthorRelationshipPropertyReferenceControllerApiCreatePropertyReferenceBookmasterauthorrelationshipPutRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BookMasterAuthorRelationshipPropertyReferenceControllerApiInterface
     */
    createPropertyReferenceBookmasterauthorrelationshipPut(requestParameters: BookMasterAuthorRelationshipPropertyReferenceControllerApiCreatePropertyReferenceBookmasterauthorrelationshipPutRequest, options?: RawAxiosRequestConfig): AxiosPromise<EntityModelAuthor>;

    /**
     * update-bookmaster-by-bookmasterauthorrelationship-Id
     * @param {BookMasterAuthorRelationshipPropertyReferenceControllerApiCreatePropertyReferenceBookmasterauthorrelationshipPut1Request} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BookMasterAuthorRelationshipPropertyReferenceControllerApiInterface
     */
    createPropertyReferenceBookmasterauthorrelationshipPut1(requestParameters: BookMasterAuthorRelationshipPropertyReferenceControllerApiCreatePropertyReferenceBookmasterauthorrelationshipPut1Request, options?: RawAxiosRequestConfig): AxiosPromise<EntityModelBookMaster>;

    /**
     * delete-author-by-bookmasterauthorrelationship-Id
     * @param {BookMasterAuthorRelationshipPropertyReferenceControllerApiDeletePropertyReferenceBookmasterauthorrelationshipDeleteRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BookMasterAuthorRelationshipPropertyReferenceControllerApiInterface
     */
    deletePropertyReferenceBookmasterauthorrelationshipDelete(requestParameters: BookMasterAuthorRelationshipPropertyReferenceControllerApiDeletePropertyReferenceBookmasterauthorrelationshipDeleteRequest, options?: RawAxiosRequestConfig): AxiosPromise<void>;

    /**
     * delete-bookmaster-by-bookmasterauthorrelationship-Id
     * @param {BookMasterAuthorRelationshipPropertyReferenceControllerApiDeletePropertyReferenceBookmasterauthorrelationshipDelete1Request} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BookMasterAuthorRelationshipPropertyReferenceControllerApiInterface
     */
    deletePropertyReferenceBookmasterauthorrelationshipDelete1(requestParameters: BookMasterAuthorRelationshipPropertyReferenceControllerApiDeletePropertyReferenceBookmasterauthorrelationshipDelete1Request, options?: RawAxiosRequestConfig): AxiosPromise<void>;

    /**
     * delete-author-by-bookmasterauthorrelationship-Id
     * @param {BookMasterAuthorRelationshipPropertyReferenceControllerApiDeletePropertyReferenceIdBookmasterauthorrelationshipDeleteRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BookMasterAuthorRelationshipPropertyReferenceControllerApiInterface
     */
    deletePropertyReferenceIdBookmasterauthorrelationshipDelete(requestParameters: BookMasterAuthorRelationshipPropertyReferenceControllerApiDeletePropertyReferenceIdBookmasterauthorrelationshipDeleteRequest, options?: RawAxiosRequestConfig): AxiosPromise<void>;

    /**
     * delete-bookmaster-by-bookmasterauthorrelationship-Id
     * @param {BookMasterAuthorRelationshipPropertyReferenceControllerApiDeletePropertyReferenceIdBookmasterauthorrelationshipDelete1Request} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BookMasterAuthorRelationshipPropertyReferenceControllerApiInterface
     */
    deletePropertyReferenceIdBookmasterauthorrelationshipDelete1(requestParameters: BookMasterAuthorRelationshipPropertyReferenceControllerApiDeletePropertyReferenceIdBookmasterauthorrelationshipDelete1Request, options?: RawAxiosRequestConfig): AxiosPromise<void>;

    /**
     * get-author-by-bookmasterauthorrelationship-Id
     * @param {BookMasterAuthorRelationshipPropertyReferenceControllerApiFollowPropertyReferenceBookmasterauthorrelationshipGetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BookMasterAuthorRelationshipPropertyReferenceControllerApiInterface
     */
    followPropertyReferenceBookmasterauthorrelationshipGet(requestParameters: BookMasterAuthorRelationshipPropertyReferenceControllerApiFollowPropertyReferenceBookmasterauthorrelationshipGetRequest, options?: RawAxiosRequestConfig): AxiosPromise<EntityModelAuthor>;

    /**
     * get-author-by-bookmasterauthorrelationship-Id
     * @param {BookMasterAuthorRelationshipPropertyReferenceControllerApiFollowPropertyReferenceBookmasterauthorrelationshipGet1Request} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BookMasterAuthorRelationshipPropertyReferenceControllerApiInterface
     */
    followPropertyReferenceBookmasterauthorrelationshipGet1(requestParameters: BookMasterAuthorRelationshipPropertyReferenceControllerApiFollowPropertyReferenceBookmasterauthorrelationshipGet1Request, options?: RawAxiosRequestConfig): AxiosPromise<EntityModelAuthor>;

    /**
     * get-bookmaster-by-bookmasterauthorrelationship-Id
     * @param {BookMasterAuthorRelationshipPropertyReferenceControllerApiFollowPropertyReferenceBookmasterauthorrelationshipGet2Request} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BookMasterAuthorRelationshipPropertyReferenceControllerApiInterface
     */
    followPropertyReferenceBookmasterauthorrelationshipGet2(requestParameters: BookMasterAuthorRelationshipPropertyReferenceControllerApiFollowPropertyReferenceBookmasterauthorrelationshipGet2Request, options?: RawAxiosRequestConfig): AxiosPromise<EntityModelBookMaster>;

    /**
     * get-bookmaster-by-bookmasterauthorrelationship-Id
     * @param {BookMasterAuthorRelationshipPropertyReferenceControllerApiFollowPropertyReferenceBookmasterauthorrelationshipGet3Request} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BookMasterAuthorRelationshipPropertyReferenceControllerApiInterface
     */
    followPropertyReferenceBookmasterauthorrelationshipGet3(requestParameters: BookMasterAuthorRelationshipPropertyReferenceControllerApiFollowPropertyReferenceBookmasterauthorrelationshipGet3Request, options?: RawAxiosRequestConfig): AxiosPromise<EntityModelBookMaster>;

}

/**
 * Request parameters for createPropertyReferenceBookmasterauthorrelationshipPatch operation in BookMasterAuthorRelationshipPropertyReferenceControllerApi.
 * @export
 * @interface BookMasterAuthorRelationshipPropertyReferenceControllerApiCreatePropertyReferenceBookmasterauthorrelationshipPatchRequest
 */
export interface BookMasterAuthorRelationshipPropertyReferenceControllerApiCreatePropertyReferenceBookmasterauthorrelationshipPatchRequest {
    /**
     * 
     * @type {string}
     * @memberof BookMasterAuthorRelationshipPropertyReferenceControllerApiCreatePropertyReferenceBookmasterauthorrelationshipPatch
     */
    readonly id: string

    /**
     * 
     * @type {CollectionModelObject}
     * @memberof BookMasterAuthorRelationshipPropertyReferenceControllerApiCreatePropertyReferenceBookmasterauthorrelationshipPatch
     */
    readonly collectionModelObject: CollectionModelObject
}

/**
 * Request parameters for createPropertyReferenceBookmasterauthorrelationshipPatch1 operation in BookMasterAuthorRelationshipPropertyReferenceControllerApi.
 * @export
 * @interface BookMasterAuthorRelationshipPropertyReferenceControllerApiCreatePropertyReferenceBookmasterauthorrelationshipPatch1Request
 */
export interface BookMasterAuthorRelationshipPropertyReferenceControllerApiCreatePropertyReferenceBookmasterauthorrelationshipPatch1Request {
    /**
     * 
     * @type {string}
     * @memberof BookMasterAuthorRelationshipPropertyReferenceControllerApiCreatePropertyReferenceBookmasterauthorrelationshipPatch1
     */
    readonly id: string

    /**
     * 
     * @type {CollectionModelObject}
     * @memberof BookMasterAuthorRelationshipPropertyReferenceControllerApiCreatePropertyReferenceBookmasterauthorrelationshipPatch1
     */
    readonly collectionModelObject: CollectionModelObject
}

/**
 * Request parameters for createPropertyReferenceBookmasterauthorrelationshipPut operation in BookMasterAuthorRelationshipPropertyReferenceControllerApi.
 * @export
 * @interface BookMasterAuthorRelationshipPropertyReferenceControllerApiCreatePropertyReferenceBookmasterauthorrelationshipPutRequest
 */
export interface BookMasterAuthorRelationshipPropertyReferenceControllerApiCreatePropertyReferenceBookmasterauthorrelationshipPutRequest {
    /**
     * 
     * @type {string}
     * @memberof BookMasterAuthorRelationshipPropertyReferenceControllerApiCreatePropertyReferenceBookmasterauthorrelationshipPut
     */
    readonly id: string

    /**
     * 
     * @type {CollectionModelObject}
     * @memberof BookMasterAuthorRelationshipPropertyReferenceControllerApiCreatePropertyReferenceBookmasterauthorrelationshipPut
     */
    readonly collectionModelObject: CollectionModelObject
}

/**
 * Request parameters for createPropertyReferenceBookmasterauthorrelationshipPut1 operation in BookMasterAuthorRelationshipPropertyReferenceControllerApi.
 * @export
 * @interface BookMasterAuthorRelationshipPropertyReferenceControllerApiCreatePropertyReferenceBookmasterauthorrelationshipPut1Request
 */
export interface BookMasterAuthorRelationshipPropertyReferenceControllerApiCreatePropertyReferenceBookmasterauthorrelationshipPut1Request {
    /**
     * 
     * @type {string}
     * @memberof BookMasterAuthorRelationshipPropertyReferenceControllerApiCreatePropertyReferenceBookmasterauthorrelationshipPut1
     */
    readonly id: string

    /**
     * 
     * @type {CollectionModelObject}
     * @memberof BookMasterAuthorRelationshipPropertyReferenceControllerApiCreatePropertyReferenceBookmasterauthorrelationshipPut1
     */
    readonly collectionModelObject: CollectionModelObject
}

/**
 * Request parameters for deletePropertyReferenceBookmasterauthorrelationshipDelete operation in BookMasterAuthorRelationshipPropertyReferenceControllerApi.
 * @export
 * @interface BookMasterAuthorRelationshipPropertyReferenceControllerApiDeletePropertyReferenceBookmasterauthorrelationshipDeleteRequest
 */
export interface BookMasterAuthorRelationshipPropertyReferenceControllerApiDeletePropertyReferenceBookmasterauthorrelationshipDeleteRequest {
    /**
     * 
     * @type {string}
     * @memberof BookMasterAuthorRelationshipPropertyReferenceControllerApiDeletePropertyReferenceBookmasterauthorrelationshipDelete
     */
    readonly id: string
}

/**
 * Request parameters for deletePropertyReferenceBookmasterauthorrelationshipDelete1 operation in BookMasterAuthorRelationshipPropertyReferenceControllerApi.
 * @export
 * @interface BookMasterAuthorRelationshipPropertyReferenceControllerApiDeletePropertyReferenceBookmasterauthorrelationshipDelete1Request
 */
export interface BookMasterAuthorRelationshipPropertyReferenceControllerApiDeletePropertyReferenceBookmasterauthorrelationshipDelete1Request {
    /**
     * 
     * @type {string}
     * @memberof BookMasterAuthorRelationshipPropertyReferenceControllerApiDeletePropertyReferenceBookmasterauthorrelationshipDelete1
     */
    readonly id: string
}

/**
 * Request parameters for deletePropertyReferenceIdBookmasterauthorrelationshipDelete operation in BookMasterAuthorRelationshipPropertyReferenceControllerApi.
 * @export
 * @interface BookMasterAuthorRelationshipPropertyReferenceControllerApiDeletePropertyReferenceIdBookmasterauthorrelationshipDeleteRequest
 */
export interface BookMasterAuthorRelationshipPropertyReferenceControllerApiDeletePropertyReferenceIdBookmasterauthorrelationshipDeleteRequest {
    /**
     * 
     * @type {string}
     * @memberof BookMasterAuthorRelationshipPropertyReferenceControllerApiDeletePropertyReferenceIdBookmasterauthorrelationshipDelete
     */
    readonly id: string

    /**
     * 
     * @type {string}
     * @memberof BookMasterAuthorRelationshipPropertyReferenceControllerApiDeletePropertyReferenceIdBookmasterauthorrelationshipDelete
     */
    readonly propertyId: string
}

/**
 * Request parameters for deletePropertyReferenceIdBookmasterauthorrelationshipDelete1 operation in BookMasterAuthorRelationshipPropertyReferenceControllerApi.
 * @export
 * @interface BookMasterAuthorRelationshipPropertyReferenceControllerApiDeletePropertyReferenceIdBookmasterauthorrelationshipDelete1Request
 */
export interface BookMasterAuthorRelationshipPropertyReferenceControllerApiDeletePropertyReferenceIdBookmasterauthorrelationshipDelete1Request {
    /**
     * 
     * @type {string}
     * @memberof BookMasterAuthorRelationshipPropertyReferenceControllerApiDeletePropertyReferenceIdBookmasterauthorrelationshipDelete1
     */
    readonly id: string

    /**
     * 
     * @type {string}
     * @memberof BookMasterAuthorRelationshipPropertyReferenceControllerApiDeletePropertyReferenceIdBookmasterauthorrelationshipDelete1
     */
    readonly propertyId: string
}

/**
 * Request parameters for followPropertyReferenceBookmasterauthorrelationshipGet operation in BookMasterAuthorRelationshipPropertyReferenceControllerApi.
 * @export
 * @interface BookMasterAuthorRelationshipPropertyReferenceControllerApiFollowPropertyReferenceBookmasterauthorrelationshipGetRequest
 */
export interface BookMasterAuthorRelationshipPropertyReferenceControllerApiFollowPropertyReferenceBookmasterauthorrelationshipGetRequest {
    /**
     * 
     * @type {string}
     * @memberof BookMasterAuthorRelationshipPropertyReferenceControllerApiFollowPropertyReferenceBookmasterauthorrelationshipGet
     */
    readonly id: string
}

/**
 * Request parameters for followPropertyReferenceBookmasterauthorrelationshipGet1 operation in BookMasterAuthorRelationshipPropertyReferenceControllerApi.
 * @export
 * @interface BookMasterAuthorRelationshipPropertyReferenceControllerApiFollowPropertyReferenceBookmasterauthorrelationshipGet1Request
 */
export interface BookMasterAuthorRelationshipPropertyReferenceControllerApiFollowPropertyReferenceBookmasterauthorrelationshipGet1Request {
    /**
     * 
     * @type {string}
     * @memberof BookMasterAuthorRelationshipPropertyReferenceControllerApiFollowPropertyReferenceBookmasterauthorrelationshipGet1
     */
    readonly id: string

    /**
     * 
     * @type {string}
     * @memberof BookMasterAuthorRelationshipPropertyReferenceControllerApiFollowPropertyReferenceBookmasterauthorrelationshipGet1
     */
    readonly propertyId: string
}

/**
 * Request parameters for followPropertyReferenceBookmasterauthorrelationshipGet2 operation in BookMasterAuthorRelationshipPropertyReferenceControllerApi.
 * @export
 * @interface BookMasterAuthorRelationshipPropertyReferenceControllerApiFollowPropertyReferenceBookmasterauthorrelationshipGet2Request
 */
export interface BookMasterAuthorRelationshipPropertyReferenceControllerApiFollowPropertyReferenceBookmasterauthorrelationshipGet2Request {
    /**
     * 
     * @type {string}
     * @memberof BookMasterAuthorRelationshipPropertyReferenceControllerApiFollowPropertyReferenceBookmasterauthorrelationshipGet2
     */
    readonly id: string
}

/**
 * Request parameters for followPropertyReferenceBookmasterauthorrelationshipGet3 operation in BookMasterAuthorRelationshipPropertyReferenceControllerApi.
 * @export
 * @interface BookMasterAuthorRelationshipPropertyReferenceControllerApiFollowPropertyReferenceBookmasterauthorrelationshipGet3Request
 */
export interface BookMasterAuthorRelationshipPropertyReferenceControllerApiFollowPropertyReferenceBookmasterauthorrelationshipGet3Request {
    /**
     * 
     * @type {string}
     * @memberof BookMasterAuthorRelationshipPropertyReferenceControllerApiFollowPropertyReferenceBookmasterauthorrelationshipGet3
     */
    readonly id: string

    /**
     * 
     * @type {string}
     * @memberof BookMasterAuthorRelationshipPropertyReferenceControllerApiFollowPropertyReferenceBookmasterauthorrelationshipGet3
     */
    readonly propertyId: string
}

/**
 * BookMasterAuthorRelationshipPropertyReferenceControllerApi - object-oriented interface
 * @export
 * @class BookMasterAuthorRelationshipPropertyReferenceControllerApi
 * @extends {BaseAPI}
 */
export class BookMasterAuthorRelationshipPropertyReferenceControllerApi extends BaseAPI implements BookMasterAuthorRelationshipPropertyReferenceControllerApiInterface {
    /**
     * patch-author-by-bookmasterauthorrelationship-Id
     * @param {BookMasterAuthorRelationshipPropertyReferenceControllerApiCreatePropertyReferenceBookmasterauthorrelationshipPatchRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BookMasterAuthorRelationshipPropertyReferenceControllerApi
     */
    public createPropertyReferenceBookmasterauthorrelationshipPatch(requestParameters: BookMasterAuthorRelationshipPropertyReferenceControllerApiCreatePropertyReferenceBookmasterauthorrelationshipPatchRequest, options?: RawAxiosRequestConfig) {
        return BookMasterAuthorRelationshipPropertyReferenceControllerApiFp(this.configuration).createPropertyReferenceBookmasterauthorrelationshipPatch(requestParameters.id, requestParameters.collectionModelObject, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * patch-bookmaster-by-bookmasterauthorrelationship-Id
     * @param {BookMasterAuthorRelationshipPropertyReferenceControllerApiCreatePropertyReferenceBookmasterauthorrelationshipPatch1Request} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BookMasterAuthorRelationshipPropertyReferenceControllerApi
     */
    public createPropertyReferenceBookmasterauthorrelationshipPatch1(requestParameters: BookMasterAuthorRelationshipPropertyReferenceControllerApiCreatePropertyReferenceBookmasterauthorrelationshipPatch1Request, options?: RawAxiosRequestConfig) {
        return BookMasterAuthorRelationshipPropertyReferenceControllerApiFp(this.configuration).createPropertyReferenceBookmasterauthorrelationshipPatch1(requestParameters.id, requestParameters.collectionModelObject, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * update-author-by-bookmasterauthorrelationship-Id
     * @param {BookMasterAuthorRelationshipPropertyReferenceControllerApiCreatePropertyReferenceBookmasterauthorrelationshipPutRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BookMasterAuthorRelationshipPropertyReferenceControllerApi
     */
    public createPropertyReferenceBookmasterauthorrelationshipPut(requestParameters: BookMasterAuthorRelationshipPropertyReferenceControllerApiCreatePropertyReferenceBookmasterauthorrelationshipPutRequest, options?: RawAxiosRequestConfig) {
        return BookMasterAuthorRelationshipPropertyReferenceControllerApiFp(this.configuration).createPropertyReferenceBookmasterauthorrelationshipPut(requestParameters.id, requestParameters.collectionModelObject, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * update-bookmaster-by-bookmasterauthorrelationship-Id
     * @param {BookMasterAuthorRelationshipPropertyReferenceControllerApiCreatePropertyReferenceBookmasterauthorrelationshipPut1Request} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BookMasterAuthorRelationshipPropertyReferenceControllerApi
     */
    public createPropertyReferenceBookmasterauthorrelationshipPut1(requestParameters: BookMasterAuthorRelationshipPropertyReferenceControllerApiCreatePropertyReferenceBookmasterauthorrelationshipPut1Request, options?: RawAxiosRequestConfig) {
        return BookMasterAuthorRelationshipPropertyReferenceControllerApiFp(this.configuration).createPropertyReferenceBookmasterauthorrelationshipPut1(requestParameters.id, requestParameters.collectionModelObject, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * delete-author-by-bookmasterauthorrelationship-Id
     * @param {BookMasterAuthorRelationshipPropertyReferenceControllerApiDeletePropertyReferenceBookmasterauthorrelationshipDeleteRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BookMasterAuthorRelationshipPropertyReferenceControllerApi
     */
    public deletePropertyReferenceBookmasterauthorrelationshipDelete(requestParameters: BookMasterAuthorRelationshipPropertyReferenceControllerApiDeletePropertyReferenceBookmasterauthorrelationshipDeleteRequest, options?: RawAxiosRequestConfig) {
        return BookMasterAuthorRelationshipPropertyReferenceControllerApiFp(this.configuration).deletePropertyReferenceBookmasterauthorrelationshipDelete(requestParameters.id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * delete-bookmaster-by-bookmasterauthorrelationship-Id
     * @param {BookMasterAuthorRelationshipPropertyReferenceControllerApiDeletePropertyReferenceBookmasterauthorrelationshipDelete1Request} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BookMasterAuthorRelationshipPropertyReferenceControllerApi
     */
    public deletePropertyReferenceBookmasterauthorrelationshipDelete1(requestParameters: BookMasterAuthorRelationshipPropertyReferenceControllerApiDeletePropertyReferenceBookmasterauthorrelationshipDelete1Request, options?: RawAxiosRequestConfig) {
        return BookMasterAuthorRelationshipPropertyReferenceControllerApiFp(this.configuration).deletePropertyReferenceBookmasterauthorrelationshipDelete1(requestParameters.id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * delete-author-by-bookmasterauthorrelationship-Id
     * @param {BookMasterAuthorRelationshipPropertyReferenceControllerApiDeletePropertyReferenceIdBookmasterauthorrelationshipDeleteRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BookMasterAuthorRelationshipPropertyReferenceControllerApi
     */
    public deletePropertyReferenceIdBookmasterauthorrelationshipDelete(requestParameters: BookMasterAuthorRelationshipPropertyReferenceControllerApiDeletePropertyReferenceIdBookmasterauthorrelationshipDeleteRequest, options?: RawAxiosRequestConfig) {
        return BookMasterAuthorRelationshipPropertyReferenceControllerApiFp(this.configuration).deletePropertyReferenceIdBookmasterauthorrelationshipDelete(requestParameters.id, requestParameters.propertyId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * delete-bookmaster-by-bookmasterauthorrelationship-Id
     * @param {BookMasterAuthorRelationshipPropertyReferenceControllerApiDeletePropertyReferenceIdBookmasterauthorrelationshipDelete1Request} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BookMasterAuthorRelationshipPropertyReferenceControllerApi
     */
    public deletePropertyReferenceIdBookmasterauthorrelationshipDelete1(requestParameters: BookMasterAuthorRelationshipPropertyReferenceControllerApiDeletePropertyReferenceIdBookmasterauthorrelationshipDelete1Request, options?: RawAxiosRequestConfig) {
        return BookMasterAuthorRelationshipPropertyReferenceControllerApiFp(this.configuration).deletePropertyReferenceIdBookmasterauthorrelationshipDelete1(requestParameters.id, requestParameters.propertyId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * get-author-by-bookmasterauthorrelationship-Id
     * @param {BookMasterAuthorRelationshipPropertyReferenceControllerApiFollowPropertyReferenceBookmasterauthorrelationshipGetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BookMasterAuthorRelationshipPropertyReferenceControllerApi
     */
    public followPropertyReferenceBookmasterauthorrelationshipGet(requestParameters: BookMasterAuthorRelationshipPropertyReferenceControllerApiFollowPropertyReferenceBookmasterauthorrelationshipGetRequest, options?: RawAxiosRequestConfig) {
        return BookMasterAuthorRelationshipPropertyReferenceControllerApiFp(this.configuration).followPropertyReferenceBookmasterauthorrelationshipGet(requestParameters.id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * get-author-by-bookmasterauthorrelationship-Id
     * @param {BookMasterAuthorRelationshipPropertyReferenceControllerApiFollowPropertyReferenceBookmasterauthorrelationshipGet1Request} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BookMasterAuthorRelationshipPropertyReferenceControllerApi
     */
    public followPropertyReferenceBookmasterauthorrelationshipGet1(requestParameters: BookMasterAuthorRelationshipPropertyReferenceControllerApiFollowPropertyReferenceBookmasterauthorrelationshipGet1Request, options?: RawAxiosRequestConfig) {
        return BookMasterAuthorRelationshipPropertyReferenceControllerApiFp(this.configuration).followPropertyReferenceBookmasterauthorrelationshipGet1(requestParameters.id, requestParameters.propertyId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * get-bookmaster-by-bookmasterauthorrelationship-Id
     * @param {BookMasterAuthorRelationshipPropertyReferenceControllerApiFollowPropertyReferenceBookmasterauthorrelationshipGet2Request} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BookMasterAuthorRelationshipPropertyReferenceControllerApi
     */
    public followPropertyReferenceBookmasterauthorrelationshipGet2(requestParameters: BookMasterAuthorRelationshipPropertyReferenceControllerApiFollowPropertyReferenceBookmasterauthorrelationshipGet2Request, options?: RawAxiosRequestConfig) {
        return BookMasterAuthorRelationshipPropertyReferenceControllerApiFp(this.configuration).followPropertyReferenceBookmasterauthorrelationshipGet2(requestParameters.id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * get-bookmaster-by-bookmasterauthorrelationship-Id
     * @param {BookMasterAuthorRelationshipPropertyReferenceControllerApiFollowPropertyReferenceBookmasterauthorrelationshipGet3Request} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BookMasterAuthorRelationshipPropertyReferenceControllerApi
     */
    public followPropertyReferenceBookmasterauthorrelationshipGet3(requestParameters: BookMasterAuthorRelationshipPropertyReferenceControllerApiFollowPropertyReferenceBookmasterauthorrelationshipGet3Request, options?: RawAxiosRequestConfig) {
        return BookMasterAuthorRelationshipPropertyReferenceControllerApiFp(this.configuration).followPropertyReferenceBookmasterauthorrelationshipGet3(requestParameters.id, requestParameters.propertyId, options).then((request) => request(this.axios, this.basePath));
    }
}



/**
 * BookMasterEntityControllerApi - axios parameter creator
 * @export
 */
export const BookMasterEntityControllerApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * get-bookmaster
         * @param {number} [page] Zero-based page index (0..N)
         * @param {number} [size] The size of the page to be returned
         * @param {Array<string>} [sort] Sorting criteria in the format: property,(asc|desc). Default sort order is ascending. Multiple sort criteria are supported.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getCollectionResourceBookmasterGet: async (page?: number, size?: number, sort?: Array<string>, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/bookMasters`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }

            if (size !== undefined) {
                localVarQueryParameter['size'] = size;
            }

            if (sort) {
                localVarQueryParameter['sort'] = sort;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * BookMasterEntityControllerApi - functional programming interface
 * @export
 */
export const BookMasterEntityControllerApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = BookMasterEntityControllerApiAxiosParamCreator(configuration)
    return {
        /**
         * get-bookmaster
         * @param {number} [page] Zero-based page index (0..N)
         * @param {number} [size] The size of the page to be returned
         * @param {Array<string>} [sort] Sorting criteria in the format: property,(asc|desc). Default sort order is ascending. Multiple sort criteria are supported.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getCollectionResourceBookmasterGet(page?: number, size?: number, sort?: Array<string>, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<PagedModelEntityModelBookMaster>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getCollectionResourceBookmasterGet(page, size, sort, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['BookMasterEntityControllerApi.getCollectionResourceBookmasterGet']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * BookMasterEntityControllerApi - factory interface
 * @export
 */
export const BookMasterEntityControllerApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = BookMasterEntityControllerApiFp(configuration)
    return {
        /**
         * get-bookmaster
         * @param {BookMasterEntityControllerApiGetCollectionResourceBookmasterGetRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getCollectionResourceBookmasterGet(requestParameters: BookMasterEntityControllerApiGetCollectionResourceBookmasterGetRequest = {}, options?: RawAxiosRequestConfig): AxiosPromise<PagedModelEntityModelBookMaster> {
            return localVarFp.getCollectionResourceBookmasterGet(requestParameters.page, requestParameters.size, requestParameters.sort, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * BookMasterEntityControllerApi - interface
 * @export
 * @interface BookMasterEntityControllerApi
 */
export interface BookMasterEntityControllerApiInterface {
    /**
     * get-bookmaster
     * @param {BookMasterEntityControllerApiGetCollectionResourceBookmasterGetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BookMasterEntityControllerApiInterface
     */
    getCollectionResourceBookmasterGet(requestParameters?: BookMasterEntityControllerApiGetCollectionResourceBookmasterGetRequest, options?: RawAxiosRequestConfig): AxiosPromise<PagedModelEntityModelBookMaster>;

}

/**
 * Request parameters for getCollectionResourceBookmasterGet operation in BookMasterEntityControllerApi.
 * @export
 * @interface BookMasterEntityControllerApiGetCollectionResourceBookmasterGetRequest
 */
export interface BookMasterEntityControllerApiGetCollectionResourceBookmasterGetRequest {
    /**
     * Zero-based page index (0..N)
     * @type {number}
     * @memberof BookMasterEntityControllerApiGetCollectionResourceBookmasterGet
     */
    readonly page?: number

    /**
     * The size of the page to be returned
     * @type {number}
     * @memberof BookMasterEntityControllerApiGetCollectionResourceBookmasterGet
     */
    readonly size?: number

    /**
     * Sorting criteria in the format: property,(asc|desc). Default sort order is ascending. Multiple sort criteria are supported.
     * @type {Array<string>}
     * @memberof BookMasterEntityControllerApiGetCollectionResourceBookmasterGet
     */
    readonly sort?: Array<string>
}

/**
 * BookMasterEntityControllerApi - object-oriented interface
 * @export
 * @class BookMasterEntityControllerApi
 * @extends {BaseAPI}
 */
export class BookMasterEntityControllerApi extends BaseAPI implements BookMasterEntityControllerApiInterface {
    /**
     * get-bookmaster
     * @param {BookMasterEntityControllerApiGetCollectionResourceBookmasterGetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BookMasterEntityControllerApi
     */
    public getCollectionResourceBookmasterGet(requestParameters: BookMasterEntityControllerApiGetCollectionResourceBookmasterGetRequest = {}, options?: RawAxiosRequestConfig) {
        return BookMasterEntityControllerApiFp(this.configuration).getCollectionResourceBookmasterGet(requestParameters.page, requestParameters.size, requestParameters.sort, options).then((request) => request(this.axios, this.basePath));
    }
}



/**
 * BookMasterSearchControllerApi - axios parameter creator
 * @export
 */
export const BookMasterSearchControllerApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @param {number} [id] 
         * @param {string} [name] 
         * @param {string} [publicationDateBegin] 
         * @param {string} [publicationDateEnd] 
         * @param {string} [ndcCategoryName] 
         * @param {number} [page] Zero-based page index (0..N)
         * @param {number} [size] The size of the page to be returned
         * @param {Array<string>} [sort] Sorting criteria in the format: property,(asc|desc). Default sort order is ascending. Multiple sort criteria are supported.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        executeSearchBookmasterGet: async (id?: number, name?: string, publicationDateBegin?: string, publicationDateEnd?: string, ndcCategoryName?: string, page?: number, size?: number, sort?: Array<string>, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/bookMasters/search/searchBookMaster`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (id !== undefined) {
                localVarQueryParameter['id'] = id;
            }

            if (name !== undefined) {
                localVarQueryParameter['name'] = name;
            }

            if (publicationDateBegin !== undefined) {
                localVarQueryParameter['publicationDateBegin'] = (publicationDateBegin as any instanceof Date) ?
                    (publicationDateBegin as any).toISOString().substring(0,10) :
                    publicationDateBegin;
            }

            if (publicationDateEnd !== undefined) {
                localVarQueryParameter['publicationDateEnd'] = (publicationDateEnd as any instanceof Date) ?
                    (publicationDateEnd as any).toISOString().substring(0,10) :
                    publicationDateEnd;
            }

            if (ndcCategoryName !== undefined) {
                localVarQueryParameter['ndcCategoryName'] = ndcCategoryName;
            }

            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }

            if (size !== undefined) {
                localVarQueryParameter['size'] = size;
            }

            if (sort) {
                localVarQueryParameter['sort'] = sort;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * BookMasterSearchControllerApi - functional programming interface
 * @export
 */
export const BookMasterSearchControllerApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = BookMasterSearchControllerApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @param {number} [id] 
         * @param {string} [name] 
         * @param {string} [publicationDateBegin] 
         * @param {string} [publicationDateEnd] 
         * @param {string} [ndcCategoryName] 
         * @param {number} [page] Zero-based page index (0..N)
         * @param {number} [size] The size of the page to be returned
         * @param {Array<string>} [sort] Sorting criteria in the format: property,(asc|desc). Default sort order is ascending. Multiple sort criteria are supported.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async executeSearchBookmasterGet(id?: number, name?: string, publicationDateBegin?: string, publicationDateEnd?: string, ndcCategoryName?: string, page?: number, size?: number, sort?: Array<string>, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<PagedModelEntityModelBookMaster>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.executeSearchBookmasterGet(id, name, publicationDateBegin, publicationDateEnd, ndcCategoryName, page, size, sort, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['BookMasterSearchControllerApi.executeSearchBookmasterGet']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * BookMasterSearchControllerApi - factory interface
 * @export
 */
export const BookMasterSearchControllerApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = BookMasterSearchControllerApiFp(configuration)
    return {
        /**
         * 
         * @param {BookMasterSearchControllerApiExecuteSearchBookmasterGetRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        executeSearchBookmasterGet(requestParameters: BookMasterSearchControllerApiExecuteSearchBookmasterGetRequest = {}, options?: RawAxiosRequestConfig): AxiosPromise<PagedModelEntityModelBookMaster> {
            return localVarFp.executeSearchBookmasterGet(requestParameters.id, requestParameters.name, requestParameters.publicationDateBegin, requestParameters.publicationDateEnd, requestParameters.ndcCategoryName, requestParameters.page, requestParameters.size, requestParameters.sort, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * BookMasterSearchControllerApi - interface
 * @export
 * @interface BookMasterSearchControllerApi
 */
export interface BookMasterSearchControllerApiInterface {
    /**
     * 
     * @param {BookMasterSearchControllerApiExecuteSearchBookmasterGetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BookMasterSearchControllerApiInterface
     */
    executeSearchBookmasterGet(requestParameters?: BookMasterSearchControllerApiExecuteSearchBookmasterGetRequest, options?: RawAxiosRequestConfig): AxiosPromise<PagedModelEntityModelBookMaster>;

}

/**
 * Request parameters for executeSearchBookmasterGet operation in BookMasterSearchControllerApi.
 * @export
 * @interface BookMasterSearchControllerApiExecuteSearchBookmasterGetRequest
 */
export interface BookMasterSearchControllerApiExecuteSearchBookmasterGetRequest {
    /**
     * 
     * @type {number}
     * @memberof BookMasterSearchControllerApiExecuteSearchBookmasterGet
     */
    readonly id?: number

    /**
     * 
     * @type {string}
     * @memberof BookMasterSearchControllerApiExecuteSearchBookmasterGet
     */
    readonly name?: string

    /**
     * 
     * @type {string}
     * @memberof BookMasterSearchControllerApiExecuteSearchBookmasterGet
     */
    readonly publicationDateBegin?: string

    /**
     * 
     * @type {string}
     * @memberof BookMasterSearchControllerApiExecuteSearchBookmasterGet
     */
    readonly publicationDateEnd?: string

    /**
     * 
     * @type {string}
     * @memberof BookMasterSearchControllerApiExecuteSearchBookmasterGet
     */
    readonly ndcCategoryName?: string

    /**
     * Zero-based page index (0..N)
     * @type {number}
     * @memberof BookMasterSearchControllerApiExecuteSearchBookmasterGet
     */
    readonly page?: number

    /**
     * The size of the page to be returned
     * @type {number}
     * @memberof BookMasterSearchControllerApiExecuteSearchBookmasterGet
     */
    readonly size?: number

    /**
     * Sorting criteria in the format: property,(asc|desc). Default sort order is ascending. Multiple sort criteria are supported.
     * @type {Array<string>}
     * @memberof BookMasterSearchControllerApiExecuteSearchBookmasterGet
     */
    readonly sort?: Array<string>
}

/**
 * BookMasterSearchControllerApi - object-oriented interface
 * @export
 * @class BookMasterSearchControllerApi
 * @extends {BaseAPI}
 */
export class BookMasterSearchControllerApi extends BaseAPI implements BookMasterSearchControllerApiInterface {
    /**
     * 
     * @param {BookMasterSearchControllerApiExecuteSearchBookmasterGetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BookMasterSearchControllerApi
     */
    public executeSearchBookmasterGet(requestParameters: BookMasterSearchControllerApiExecuteSearchBookmasterGetRequest = {}, options?: RawAxiosRequestConfig) {
        return BookMasterSearchControllerApiFp(this.configuration).executeSearchBookmasterGet(requestParameters.id, requestParameters.name, requestParameters.publicationDateBegin, requestParameters.publicationDateEnd, requestParameters.ndcCategoryName, requestParameters.page, requestParameters.size, requestParameters.sort, options).then((request) => request(this.axios, this.basePath));
    }
}



/**
 * BookStockEntityControllerApi - axios parameter creator
 * @export
 */
export const BookStockEntityControllerApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * delete-bookstock
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteItemResourceBookstockDelete: async (id: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('deleteItemResourceBookstockDelete', 'id', id)
            const localVarPath = `/bookStocks/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * get-bookstock
         * @param {number} [page] Zero-based page index (0..N)
         * @param {number} [size] The size of the page to be returned
         * @param {Array<string>} [sort] Sorting criteria in the format: property,(asc|desc). Default sort order is ascending. Multiple sort criteria are supported.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getCollectionResourceBookstockGet: async (page?: number, size?: number, sort?: Array<string>, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/bookStocks`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }

            if (size !== undefined) {
                localVarQueryParameter['size'] = size;
            }

            if (sort) {
                localVarQueryParameter['sort'] = sort;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * get-bookstock
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getItemResourceBookstockGet: async (id: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('getItemResourceBookstockGet', 'id', id)
            const localVarPath = `/bookStocks/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * patch-bookstock
         * @param {string} id 
         * @param {BookStockRequestBody} bookStockRequestBody 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        patchItemResourceBookstockPatch: async (id: string, bookStockRequestBody: BookStockRequestBody, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('patchItemResourceBookstockPatch', 'id', id)
            // verify required parameter 'bookStockRequestBody' is not null or undefined
            assertParamExists('patchItemResourceBookstockPatch', 'bookStockRequestBody', bookStockRequestBody)
            const localVarPath = `/bookStocks/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(bookStockRequestBody, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * create-bookstock
         * @param {BookStockRequestBody} bookStockRequestBody 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postCollectionResourceBookstockPost: async (bookStockRequestBody: BookStockRequestBody, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'bookStockRequestBody' is not null or undefined
            assertParamExists('postCollectionResourceBookstockPost', 'bookStockRequestBody', bookStockRequestBody)
            const localVarPath = `/bookStocks`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(bookStockRequestBody, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * update-bookstock
         * @param {string} id 
         * @param {BookStockRequestBody} bookStockRequestBody 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        putItemResourceBookstockPut: async (id: string, bookStockRequestBody: BookStockRequestBody, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('putItemResourceBookstockPut', 'id', id)
            // verify required parameter 'bookStockRequestBody' is not null or undefined
            assertParamExists('putItemResourceBookstockPut', 'bookStockRequestBody', bookStockRequestBody)
            const localVarPath = `/bookStocks/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(bookStockRequestBody, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * BookStockEntityControllerApi - functional programming interface
 * @export
 */
export const BookStockEntityControllerApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = BookStockEntityControllerApiAxiosParamCreator(configuration)
    return {
        /**
         * delete-bookstock
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deleteItemResourceBookstockDelete(id: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.deleteItemResourceBookstockDelete(id, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['BookStockEntityControllerApi.deleteItemResourceBookstockDelete']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * get-bookstock
         * @param {number} [page] Zero-based page index (0..N)
         * @param {number} [size] The size of the page to be returned
         * @param {Array<string>} [sort] Sorting criteria in the format: property,(asc|desc). Default sort order is ascending. Multiple sort criteria are supported.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getCollectionResourceBookstockGet(page?: number, size?: number, sort?: Array<string>, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<PagedModelEntityModelBookStock>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getCollectionResourceBookstockGet(page, size, sort, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['BookStockEntityControllerApi.getCollectionResourceBookstockGet']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * get-bookstock
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getItemResourceBookstockGet(id: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<EntityModelBookStock>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getItemResourceBookstockGet(id, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['BookStockEntityControllerApi.getItemResourceBookstockGet']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * patch-bookstock
         * @param {string} id 
         * @param {BookStockRequestBody} bookStockRequestBody 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async patchItemResourceBookstockPatch(id: string, bookStockRequestBody: BookStockRequestBody, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<EntityModelBookStock>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.patchItemResourceBookstockPatch(id, bookStockRequestBody, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['BookStockEntityControllerApi.patchItemResourceBookstockPatch']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * create-bookstock
         * @param {BookStockRequestBody} bookStockRequestBody 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async postCollectionResourceBookstockPost(bookStockRequestBody: BookStockRequestBody, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<EntityModelBookStock>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.postCollectionResourceBookstockPost(bookStockRequestBody, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['BookStockEntityControllerApi.postCollectionResourceBookstockPost']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * update-bookstock
         * @param {string} id 
         * @param {BookStockRequestBody} bookStockRequestBody 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async putItemResourceBookstockPut(id: string, bookStockRequestBody: BookStockRequestBody, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<EntityModelBookStock>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.putItemResourceBookstockPut(id, bookStockRequestBody, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['BookStockEntityControllerApi.putItemResourceBookstockPut']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * BookStockEntityControllerApi - factory interface
 * @export
 */
export const BookStockEntityControllerApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = BookStockEntityControllerApiFp(configuration)
    return {
        /**
         * delete-bookstock
         * @param {BookStockEntityControllerApiDeleteItemResourceBookstockDeleteRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteItemResourceBookstockDelete(requestParameters: BookStockEntityControllerApiDeleteItemResourceBookstockDeleteRequest, options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.deleteItemResourceBookstockDelete(requestParameters.id, options).then((request) => request(axios, basePath));
        },
        /**
         * get-bookstock
         * @param {BookStockEntityControllerApiGetCollectionResourceBookstockGetRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getCollectionResourceBookstockGet(requestParameters: BookStockEntityControllerApiGetCollectionResourceBookstockGetRequest = {}, options?: RawAxiosRequestConfig): AxiosPromise<PagedModelEntityModelBookStock> {
            return localVarFp.getCollectionResourceBookstockGet(requestParameters.page, requestParameters.size, requestParameters.sort, options).then((request) => request(axios, basePath));
        },
        /**
         * get-bookstock
         * @param {BookStockEntityControllerApiGetItemResourceBookstockGetRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getItemResourceBookstockGet(requestParameters: BookStockEntityControllerApiGetItemResourceBookstockGetRequest, options?: RawAxiosRequestConfig): AxiosPromise<EntityModelBookStock> {
            return localVarFp.getItemResourceBookstockGet(requestParameters.id, options).then((request) => request(axios, basePath));
        },
        /**
         * patch-bookstock
         * @param {BookStockEntityControllerApiPatchItemResourceBookstockPatchRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        patchItemResourceBookstockPatch(requestParameters: BookStockEntityControllerApiPatchItemResourceBookstockPatchRequest, options?: RawAxiosRequestConfig): AxiosPromise<EntityModelBookStock> {
            return localVarFp.patchItemResourceBookstockPatch(requestParameters.id, requestParameters.bookStockRequestBody, options).then((request) => request(axios, basePath));
        },
        /**
         * create-bookstock
         * @param {BookStockEntityControllerApiPostCollectionResourceBookstockPostRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postCollectionResourceBookstockPost(requestParameters: BookStockEntityControllerApiPostCollectionResourceBookstockPostRequest, options?: RawAxiosRequestConfig): AxiosPromise<EntityModelBookStock> {
            return localVarFp.postCollectionResourceBookstockPost(requestParameters.bookStockRequestBody, options).then((request) => request(axios, basePath));
        },
        /**
         * update-bookstock
         * @param {BookStockEntityControllerApiPutItemResourceBookstockPutRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        putItemResourceBookstockPut(requestParameters: BookStockEntityControllerApiPutItemResourceBookstockPutRequest, options?: RawAxiosRequestConfig): AxiosPromise<EntityModelBookStock> {
            return localVarFp.putItemResourceBookstockPut(requestParameters.id, requestParameters.bookStockRequestBody, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * BookStockEntityControllerApi - interface
 * @export
 * @interface BookStockEntityControllerApi
 */
export interface BookStockEntityControllerApiInterface {
    /**
     * delete-bookstock
     * @param {BookStockEntityControllerApiDeleteItemResourceBookstockDeleteRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BookStockEntityControllerApiInterface
     */
    deleteItemResourceBookstockDelete(requestParameters: BookStockEntityControllerApiDeleteItemResourceBookstockDeleteRequest, options?: RawAxiosRequestConfig): AxiosPromise<void>;

    /**
     * get-bookstock
     * @param {BookStockEntityControllerApiGetCollectionResourceBookstockGetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BookStockEntityControllerApiInterface
     */
    getCollectionResourceBookstockGet(requestParameters?: BookStockEntityControllerApiGetCollectionResourceBookstockGetRequest, options?: RawAxiosRequestConfig): AxiosPromise<PagedModelEntityModelBookStock>;

    /**
     * get-bookstock
     * @param {BookStockEntityControllerApiGetItemResourceBookstockGetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BookStockEntityControllerApiInterface
     */
    getItemResourceBookstockGet(requestParameters: BookStockEntityControllerApiGetItemResourceBookstockGetRequest, options?: RawAxiosRequestConfig): AxiosPromise<EntityModelBookStock>;

    /**
     * patch-bookstock
     * @param {BookStockEntityControllerApiPatchItemResourceBookstockPatchRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BookStockEntityControllerApiInterface
     */
    patchItemResourceBookstockPatch(requestParameters: BookStockEntityControllerApiPatchItemResourceBookstockPatchRequest, options?: RawAxiosRequestConfig): AxiosPromise<EntityModelBookStock>;

    /**
     * create-bookstock
     * @param {BookStockEntityControllerApiPostCollectionResourceBookstockPostRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BookStockEntityControllerApiInterface
     */
    postCollectionResourceBookstockPost(requestParameters: BookStockEntityControllerApiPostCollectionResourceBookstockPostRequest, options?: RawAxiosRequestConfig): AxiosPromise<EntityModelBookStock>;

    /**
     * update-bookstock
     * @param {BookStockEntityControllerApiPutItemResourceBookstockPutRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BookStockEntityControllerApiInterface
     */
    putItemResourceBookstockPut(requestParameters: BookStockEntityControllerApiPutItemResourceBookstockPutRequest, options?: RawAxiosRequestConfig): AxiosPromise<EntityModelBookStock>;

}

/**
 * Request parameters for deleteItemResourceBookstockDelete operation in BookStockEntityControllerApi.
 * @export
 * @interface BookStockEntityControllerApiDeleteItemResourceBookstockDeleteRequest
 */
export interface BookStockEntityControllerApiDeleteItemResourceBookstockDeleteRequest {
    /**
     * 
     * @type {string}
     * @memberof BookStockEntityControllerApiDeleteItemResourceBookstockDelete
     */
    readonly id: string
}

/**
 * Request parameters for getCollectionResourceBookstockGet operation in BookStockEntityControllerApi.
 * @export
 * @interface BookStockEntityControllerApiGetCollectionResourceBookstockGetRequest
 */
export interface BookStockEntityControllerApiGetCollectionResourceBookstockGetRequest {
    /**
     * Zero-based page index (0..N)
     * @type {number}
     * @memberof BookStockEntityControllerApiGetCollectionResourceBookstockGet
     */
    readonly page?: number

    /**
     * The size of the page to be returned
     * @type {number}
     * @memberof BookStockEntityControllerApiGetCollectionResourceBookstockGet
     */
    readonly size?: number

    /**
     * Sorting criteria in the format: property,(asc|desc). Default sort order is ascending. Multiple sort criteria are supported.
     * @type {Array<string>}
     * @memberof BookStockEntityControllerApiGetCollectionResourceBookstockGet
     */
    readonly sort?: Array<string>
}

/**
 * Request parameters for getItemResourceBookstockGet operation in BookStockEntityControllerApi.
 * @export
 * @interface BookStockEntityControllerApiGetItemResourceBookstockGetRequest
 */
export interface BookStockEntityControllerApiGetItemResourceBookstockGetRequest {
    /**
     * 
     * @type {string}
     * @memberof BookStockEntityControllerApiGetItemResourceBookstockGet
     */
    readonly id: string
}

/**
 * Request parameters for patchItemResourceBookstockPatch operation in BookStockEntityControllerApi.
 * @export
 * @interface BookStockEntityControllerApiPatchItemResourceBookstockPatchRequest
 */
export interface BookStockEntityControllerApiPatchItemResourceBookstockPatchRequest {
    /**
     * 
     * @type {string}
     * @memberof BookStockEntityControllerApiPatchItemResourceBookstockPatch
     */
    readonly id: string

    /**
     * 
     * @type {BookStockRequestBody}
     * @memberof BookStockEntityControllerApiPatchItemResourceBookstockPatch
     */
    readonly bookStockRequestBody: BookStockRequestBody
}

/**
 * Request parameters for postCollectionResourceBookstockPost operation in BookStockEntityControllerApi.
 * @export
 * @interface BookStockEntityControllerApiPostCollectionResourceBookstockPostRequest
 */
export interface BookStockEntityControllerApiPostCollectionResourceBookstockPostRequest {
    /**
     * 
     * @type {BookStockRequestBody}
     * @memberof BookStockEntityControllerApiPostCollectionResourceBookstockPost
     */
    readonly bookStockRequestBody: BookStockRequestBody
}

/**
 * Request parameters for putItemResourceBookstockPut operation in BookStockEntityControllerApi.
 * @export
 * @interface BookStockEntityControllerApiPutItemResourceBookstockPutRequest
 */
export interface BookStockEntityControllerApiPutItemResourceBookstockPutRequest {
    /**
     * 
     * @type {string}
     * @memberof BookStockEntityControllerApiPutItemResourceBookstockPut
     */
    readonly id: string

    /**
     * 
     * @type {BookStockRequestBody}
     * @memberof BookStockEntityControllerApiPutItemResourceBookstockPut
     */
    readonly bookStockRequestBody: BookStockRequestBody
}

/**
 * BookStockEntityControllerApi - object-oriented interface
 * @export
 * @class BookStockEntityControllerApi
 * @extends {BaseAPI}
 */
export class BookStockEntityControllerApi extends BaseAPI implements BookStockEntityControllerApiInterface {
    /**
     * delete-bookstock
     * @param {BookStockEntityControllerApiDeleteItemResourceBookstockDeleteRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BookStockEntityControllerApi
     */
    public deleteItemResourceBookstockDelete(requestParameters: BookStockEntityControllerApiDeleteItemResourceBookstockDeleteRequest, options?: RawAxiosRequestConfig) {
        return BookStockEntityControllerApiFp(this.configuration).deleteItemResourceBookstockDelete(requestParameters.id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * get-bookstock
     * @param {BookStockEntityControllerApiGetCollectionResourceBookstockGetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BookStockEntityControllerApi
     */
    public getCollectionResourceBookstockGet(requestParameters: BookStockEntityControllerApiGetCollectionResourceBookstockGetRequest = {}, options?: RawAxiosRequestConfig) {
        return BookStockEntityControllerApiFp(this.configuration).getCollectionResourceBookstockGet(requestParameters.page, requestParameters.size, requestParameters.sort, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * get-bookstock
     * @param {BookStockEntityControllerApiGetItemResourceBookstockGetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BookStockEntityControllerApi
     */
    public getItemResourceBookstockGet(requestParameters: BookStockEntityControllerApiGetItemResourceBookstockGetRequest, options?: RawAxiosRequestConfig) {
        return BookStockEntityControllerApiFp(this.configuration).getItemResourceBookstockGet(requestParameters.id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * patch-bookstock
     * @param {BookStockEntityControllerApiPatchItemResourceBookstockPatchRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BookStockEntityControllerApi
     */
    public patchItemResourceBookstockPatch(requestParameters: BookStockEntityControllerApiPatchItemResourceBookstockPatchRequest, options?: RawAxiosRequestConfig) {
        return BookStockEntityControllerApiFp(this.configuration).patchItemResourceBookstockPatch(requestParameters.id, requestParameters.bookStockRequestBody, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * create-bookstock
     * @param {BookStockEntityControllerApiPostCollectionResourceBookstockPostRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BookStockEntityControllerApi
     */
    public postCollectionResourceBookstockPost(requestParameters: BookStockEntityControllerApiPostCollectionResourceBookstockPostRequest, options?: RawAxiosRequestConfig) {
        return BookStockEntityControllerApiFp(this.configuration).postCollectionResourceBookstockPost(requestParameters.bookStockRequestBody, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * update-bookstock
     * @param {BookStockEntityControllerApiPutItemResourceBookstockPutRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BookStockEntityControllerApi
     */
    public putItemResourceBookstockPut(requestParameters: BookStockEntityControllerApiPutItemResourceBookstockPutRequest, options?: RawAxiosRequestConfig) {
        return BookStockEntityControllerApiFp(this.configuration).putItemResourceBookstockPut(requestParameters.id, requestParameters.bookStockRequestBody, options).then((request) => request(this.axios, this.basePath));
    }
}



/**
 * BookStockPropertyReferenceControllerApi - axios parameter creator
 * @export
 */
export const BookStockPropertyReferenceControllerApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * patch-bookmaster-by-bookstock-Id
         * @param {string} id 
         * @param {CollectionModelObject} collectionModelObject 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createPropertyReferenceBookstockPatch: async (id: string, collectionModelObject: CollectionModelObject, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('createPropertyReferenceBookstockPatch', 'id', id)
            // verify required parameter 'collectionModelObject' is not null or undefined
            assertParamExists('createPropertyReferenceBookstockPatch', 'collectionModelObject', collectionModelObject)
            const localVarPath = `/bookStocks/{id}/bookMaster`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(collectionModelObject, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * patch-bookstockstatus-by-bookstock-Id
         * @param {string} id 
         * @param {CollectionModelObject} collectionModelObject 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createPropertyReferenceBookstockPatch1: async (id: string, collectionModelObject: CollectionModelObject, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('createPropertyReferenceBookstockPatch1', 'id', id)
            // verify required parameter 'collectionModelObject' is not null or undefined
            assertParamExists('createPropertyReferenceBookstockPatch1', 'collectionModelObject', collectionModelObject)
            const localVarPath = `/bookStocks/{id}/bookStockStatus`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(collectionModelObject, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * patch-lendingset-by-bookstock-Id
         * @param {string} id 
         * @param {CollectionModelObject} collectionModelObject 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createPropertyReferenceBookstockPatch2: async (id: string, collectionModelObject: CollectionModelObject, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('createPropertyReferenceBookstockPatch2', 'id', id)
            // verify required parameter 'collectionModelObject' is not null or undefined
            assertParamExists('createPropertyReferenceBookstockPatch2', 'collectionModelObject', collectionModelObject)
            const localVarPath = `/bookStocks/{id}/lendingSet`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(collectionModelObject, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * update-bookmaster-by-bookstock-Id
         * @param {string} id 
         * @param {CollectionModelObject} collectionModelObject 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createPropertyReferenceBookstockPut: async (id: string, collectionModelObject: CollectionModelObject, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('createPropertyReferenceBookstockPut', 'id', id)
            // verify required parameter 'collectionModelObject' is not null or undefined
            assertParamExists('createPropertyReferenceBookstockPut', 'collectionModelObject', collectionModelObject)
            const localVarPath = `/bookStocks/{id}/bookMaster`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(collectionModelObject, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * update-bookstockstatus-by-bookstock-Id
         * @param {string} id 
         * @param {CollectionModelObject} collectionModelObject 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createPropertyReferenceBookstockPut1: async (id: string, collectionModelObject: CollectionModelObject, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('createPropertyReferenceBookstockPut1', 'id', id)
            // verify required parameter 'collectionModelObject' is not null or undefined
            assertParamExists('createPropertyReferenceBookstockPut1', 'collectionModelObject', collectionModelObject)
            const localVarPath = `/bookStocks/{id}/bookStockStatus`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(collectionModelObject, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * update-lendingset-by-bookstock-Id
         * @param {string} id 
         * @param {CollectionModelObject} collectionModelObject 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createPropertyReferenceBookstockPut2: async (id: string, collectionModelObject: CollectionModelObject, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('createPropertyReferenceBookstockPut2', 'id', id)
            // verify required parameter 'collectionModelObject' is not null or undefined
            assertParamExists('createPropertyReferenceBookstockPut2', 'collectionModelObject', collectionModelObject)
            const localVarPath = `/bookStocks/{id}/lendingSet`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(collectionModelObject, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * delete-bookmaster-by-bookstock-Id
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deletePropertyReferenceBookstockDelete: async (id: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('deletePropertyReferenceBookstockDelete', 'id', id)
            const localVarPath = `/bookStocks/{id}/bookMaster`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * delete-bookstockstatus-by-bookstock-Id
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deletePropertyReferenceBookstockDelete1: async (id: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('deletePropertyReferenceBookstockDelete1', 'id', id)
            const localVarPath = `/bookStocks/{id}/bookStockStatus`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * delete-lendingset-by-bookstock-Id
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deletePropertyReferenceBookstockDelete2: async (id: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('deletePropertyReferenceBookstockDelete2', 'id', id)
            const localVarPath = `/bookStocks/{id}/lendingSet`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * delete-bookmaster-by-bookstock-Id
         * @param {string} id 
         * @param {string} propertyId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deletePropertyReferenceIdBookstockDelete: async (id: string, propertyId: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('deletePropertyReferenceIdBookstockDelete', 'id', id)
            // verify required parameter 'propertyId' is not null or undefined
            assertParamExists('deletePropertyReferenceIdBookstockDelete', 'propertyId', propertyId)
            const localVarPath = `/bookStocks/{id}/bookMaster/{propertyId}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)))
                .replace(`{${"propertyId"}}`, encodeURIComponent(String(propertyId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * delete-bookstockstatus-by-bookstock-Id
         * @param {string} id 
         * @param {string} propertyId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deletePropertyReferenceIdBookstockDelete1: async (id: string, propertyId: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('deletePropertyReferenceIdBookstockDelete1', 'id', id)
            // verify required parameter 'propertyId' is not null or undefined
            assertParamExists('deletePropertyReferenceIdBookstockDelete1', 'propertyId', propertyId)
            const localVarPath = `/bookStocks/{id}/bookStockStatus/{propertyId}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)))
                .replace(`{${"propertyId"}}`, encodeURIComponent(String(propertyId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * delete-lendingset-by-bookstock-Id
         * @param {string} id 
         * @param {string} propertyId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deletePropertyReferenceIdBookstockDelete2: async (id: string, propertyId: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('deletePropertyReferenceIdBookstockDelete2', 'id', id)
            // verify required parameter 'propertyId' is not null or undefined
            assertParamExists('deletePropertyReferenceIdBookstockDelete2', 'propertyId', propertyId)
            const localVarPath = `/bookStocks/{id}/lendingSet/{propertyId}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)))
                .replace(`{${"propertyId"}}`, encodeURIComponent(String(propertyId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * get-bookmaster-by-bookstock-Id
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        followPropertyReferenceBookstockGet: async (id: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('followPropertyReferenceBookstockGet', 'id', id)
            const localVarPath = `/bookStocks/{id}/bookMaster`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * get-bookmaster-by-bookstock-Id
         * @param {string} id 
         * @param {string} propertyId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        followPropertyReferenceBookstockGet1: async (id: string, propertyId: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('followPropertyReferenceBookstockGet1', 'id', id)
            // verify required parameter 'propertyId' is not null or undefined
            assertParamExists('followPropertyReferenceBookstockGet1', 'propertyId', propertyId)
            const localVarPath = `/bookStocks/{id}/bookMaster/{propertyId}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)))
                .replace(`{${"propertyId"}}`, encodeURIComponent(String(propertyId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * get-bookstockstatus-by-bookstock-Id
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        followPropertyReferenceBookstockGet2: async (id: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('followPropertyReferenceBookstockGet2', 'id', id)
            const localVarPath = `/bookStocks/{id}/bookStockStatus`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * get-bookstockstatus-by-bookstock-Id
         * @param {string} id 
         * @param {string} propertyId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        followPropertyReferenceBookstockGet3: async (id: string, propertyId: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('followPropertyReferenceBookstockGet3', 'id', id)
            // verify required parameter 'propertyId' is not null or undefined
            assertParamExists('followPropertyReferenceBookstockGet3', 'propertyId', propertyId)
            const localVarPath = `/bookStocks/{id}/bookStockStatus/{propertyId}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)))
                .replace(`{${"propertyId"}}`, encodeURIComponent(String(propertyId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * get-lendingset-by-bookstock-Id
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        followPropertyReferenceBookstockGet4: async (id: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('followPropertyReferenceBookstockGet4', 'id', id)
            const localVarPath = `/bookStocks/{id}/lendingSet`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * get-lendingset-by-bookstock-Id
         * @param {string} id 
         * @param {string} propertyId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        followPropertyReferenceBookstockGet5: async (id: string, propertyId: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('followPropertyReferenceBookstockGet5', 'id', id)
            // verify required parameter 'propertyId' is not null or undefined
            assertParamExists('followPropertyReferenceBookstockGet5', 'propertyId', propertyId)
            const localVarPath = `/bookStocks/{id}/lendingSet/{propertyId}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)))
                .replace(`{${"propertyId"}}`, encodeURIComponent(String(propertyId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * BookStockPropertyReferenceControllerApi - functional programming interface
 * @export
 */
export const BookStockPropertyReferenceControllerApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = BookStockPropertyReferenceControllerApiAxiosParamCreator(configuration)
    return {
        /**
         * patch-bookmaster-by-bookstock-Id
         * @param {string} id 
         * @param {CollectionModelObject} collectionModelObject 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async createPropertyReferenceBookstockPatch(id: string, collectionModelObject: CollectionModelObject, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<EntityModelBookMaster>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.createPropertyReferenceBookstockPatch(id, collectionModelObject, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['BookStockPropertyReferenceControllerApi.createPropertyReferenceBookstockPatch']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * patch-bookstockstatus-by-bookstock-Id
         * @param {string} id 
         * @param {CollectionModelObject} collectionModelObject 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async createPropertyReferenceBookstockPatch1(id: string, collectionModelObject: CollectionModelObject, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<EntityModelBookStockStatus>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.createPropertyReferenceBookstockPatch1(id, collectionModelObject, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['BookStockPropertyReferenceControllerApi.createPropertyReferenceBookstockPatch1']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * patch-lendingset-by-bookstock-Id
         * @param {string} id 
         * @param {CollectionModelObject} collectionModelObject 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async createPropertyReferenceBookstockPatch2(id: string, collectionModelObject: CollectionModelObject, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CollectionModelLendingSet>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.createPropertyReferenceBookstockPatch2(id, collectionModelObject, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['BookStockPropertyReferenceControllerApi.createPropertyReferenceBookstockPatch2']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * update-bookmaster-by-bookstock-Id
         * @param {string} id 
         * @param {CollectionModelObject} collectionModelObject 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async createPropertyReferenceBookstockPut(id: string, collectionModelObject: CollectionModelObject, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<EntityModelBookMaster>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.createPropertyReferenceBookstockPut(id, collectionModelObject, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['BookStockPropertyReferenceControllerApi.createPropertyReferenceBookstockPut']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * update-bookstockstatus-by-bookstock-Id
         * @param {string} id 
         * @param {CollectionModelObject} collectionModelObject 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async createPropertyReferenceBookstockPut1(id: string, collectionModelObject: CollectionModelObject, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<EntityModelBookStockStatus>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.createPropertyReferenceBookstockPut1(id, collectionModelObject, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['BookStockPropertyReferenceControllerApi.createPropertyReferenceBookstockPut1']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * update-lendingset-by-bookstock-Id
         * @param {string} id 
         * @param {CollectionModelObject} collectionModelObject 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async createPropertyReferenceBookstockPut2(id: string, collectionModelObject: CollectionModelObject, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CollectionModelLendingSet>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.createPropertyReferenceBookstockPut2(id, collectionModelObject, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['BookStockPropertyReferenceControllerApi.createPropertyReferenceBookstockPut2']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * delete-bookmaster-by-bookstock-Id
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deletePropertyReferenceBookstockDelete(id: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.deletePropertyReferenceBookstockDelete(id, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['BookStockPropertyReferenceControllerApi.deletePropertyReferenceBookstockDelete']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * delete-bookstockstatus-by-bookstock-Id
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deletePropertyReferenceBookstockDelete1(id: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.deletePropertyReferenceBookstockDelete1(id, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['BookStockPropertyReferenceControllerApi.deletePropertyReferenceBookstockDelete1']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * delete-lendingset-by-bookstock-Id
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deletePropertyReferenceBookstockDelete2(id: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.deletePropertyReferenceBookstockDelete2(id, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['BookStockPropertyReferenceControllerApi.deletePropertyReferenceBookstockDelete2']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * delete-bookmaster-by-bookstock-Id
         * @param {string} id 
         * @param {string} propertyId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deletePropertyReferenceIdBookstockDelete(id: string, propertyId: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.deletePropertyReferenceIdBookstockDelete(id, propertyId, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['BookStockPropertyReferenceControllerApi.deletePropertyReferenceIdBookstockDelete']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * delete-bookstockstatus-by-bookstock-Id
         * @param {string} id 
         * @param {string} propertyId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deletePropertyReferenceIdBookstockDelete1(id: string, propertyId: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.deletePropertyReferenceIdBookstockDelete1(id, propertyId, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['BookStockPropertyReferenceControllerApi.deletePropertyReferenceIdBookstockDelete1']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * delete-lendingset-by-bookstock-Id
         * @param {string} id 
         * @param {string} propertyId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deletePropertyReferenceIdBookstockDelete2(id: string, propertyId: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.deletePropertyReferenceIdBookstockDelete2(id, propertyId, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['BookStockPropertyReferenceControllerApi.deletePropertyReferenceIdBookstockDelete2']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * get-bookmaster-by-bookstock-Id
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async followPropertyReferenceBookstockGet(id: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<EntityModelBookMaster>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.followPropertyReferenceBookstockGet(id, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['BookStockPropertyReferenceControllerApi.followPropertyReferenceBookstockGet']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * get-bookmaster-by-bookstock-Id
         * @param {string} id 
         * @param {string} propertyId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async followPropertyReferenceBookstockGet1(id: string, propertyId: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<EntityModelBookMaster>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.followPropertyReferenceBookstockGet1(id, propertyId, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['BookStockPropertyReferenceControllerApi.followPropertyReferenceBookstockGet1']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * get-bookstockstatus-by-bookstock-Id
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async followPropertyReferenceBookstockGet2(id: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<EntityModelBookStockStatus>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.followPropertyReferenceBookstockGet2(id, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['BookStockPropertyReferenceControllerApi.followPropertyReferenceBookstockGet2']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * get-bookstockstatus-by-bookstock-Id
         * @param {string} id 
         * @param {string} propertyId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async followPropertyReferenceBookstockGet3(id: string, propertyId: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<EntityModelBookStockStatus>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.followPropertyReferenceBookstockGet3(id, propertyId, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['BookStockPropertyReferenceControllerApi.followPropertyReferenceBookstockGet3']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * get-lendingset-by-bookstock-Id
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async followPropertyReferenceBookstockGet4(id: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CollectionModelLendingSet>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.followPropertyReferenceBookstockGet4(id, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['BookStockPropertyReferenceControllerApi.followPropertyReferenceBookstockGet4']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * get-lendingset-by-bookstock-Id
         * @param {string} id 
         * @param {string} propertyId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async followPropertyReferenceBookstockGet5(id: string, propertyId: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CollectionModelLendingSet>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.followPropertyReferenceBookstockGet5(id, propertyId, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['BookStockPropertyReferenceControllerApi.followPropertyReferenceBookstockGet5']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * BookStockPropertyReferenceControllerApi - factory interface
 * @export
 */
export const BookStockPropertyReferenceControllerApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = BookStockPropertyReferenceControllerApiFp(configuration)
    return {
        /**
         * patch-bookmaster-by-bookstock-Id
         * @param {BookStockPropertyReferenceControllerApiCreatePropertyReferenceBookstockPatchRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createPropertyReferenceBookstockPatch(requestParameters: BookStockPropertyReferenceControllerApiCreatePropertyReferenceBookstockPatchRequest, options?: RawAxiosRequestConfig): AxiosPromise<EntityModelBookMaster> {
            return localVarFp.createPropertyReferenceBookstockPatch(requestParameters.id, requestParameters.collectionModelObject, options).then((request) => request(axios, basePath));
        },
        /**
         * patch-bookstockstatus-by-bookstock-Id
         * @param {BookStockPropertyReferenceControllerApiCreatePropertyReferenceBookstockPatch1Request} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createPropertyReferenceBookstockPatch1(requestParameters: BookStockPropertyReferenceControllerApiCreatePropertyReferenceBookstockPatch1Request, options?: RawAxiosRequestConfig): AxiosPromise<EntityModelBookStockStatus> {
            return localVarFp.createPropertyReferenceBookstockPatch1(requestParameters.id, requestParameters.collectionModelObject, options).then((request) => request(axios, basePath));
        },
        /**
         * patch-lendingset-by-bookstock-Id
         * @param {BookStockPropertyReferenceControllerApiCreatePropertyReferenceBookstockPatch2Request} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createPropertyReferenceBookstockPatch2(requestParameters: BookStockPropertyReferenceControllerApiCreatePropertyReferenceBookstockPatch2Request, options?: RawAxiosRequestConfig): AxiosPromise<CollectionModelLendingSet> {
            return localVarFp.createPropertyReferenceBookstockPatch2(requestParameters.id, requestParameters.collectionModelObject, options).then((request) => request(axios, basePath));
        },
        /**
         * update-bookmaster-by-bookstock-Id
         * @param {BookStockPropertyReferenceControllerApiCreatePropertyReferenceBookstockPutRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createPropertyReferenceBookstockPut(requestParameters: BookStockPropertyReferenceControllerApiCreatePropertyReferenceBookstockPutRequest, options?: RawAxiosRequestConfig): AxiosPromise<EntityModelBookMaster> {
            return localVarFp.createPropertyReferenceBookstockPut(requestParameters.id, requestParameters.collectionModelObject, options).then((request) => request(axios, basePath));
        },
        /**
         * update-bookstockstatus-by-bookstock-Id
         * @param {BookStockPropertyReferenceControllerApiCreatePropertyReferenceBookstockPut1Request} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createPropertyReferenceBookstockPut1(requestParameters: BookStockPropertyReferenceControllerApiCreatePropertyReferenceBookstockPut1Request, options?: RawAxiosRequestConfig): AxiosPromise<EntityModelBookStockStatus> {
            return localVarFp.createPropertyReferenceBookstockPut1(requestParameters.id, requestParameters.collectionModelObject, options).then((request) => request(axios, basePath));
        },
        /**
         * update-lendingset-by-bookstock-Id
         * @param {BookStockPropertyReferenceControllerApiCreatePropertyReferenceBookstockPut2Request} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createPropertyReferenceBookstockPut2(requestParameters: BookStockPropertyReferenceControllerApiCreatePropertyReferenceBookstockPut2Request, options?: RawAxiosRequestConfig): AxiosPromise<CollectionModelLendingSet> {
            return localVarFp.createPropertyReferenceBookstockPut2(requestParameters.id, requestParameters.collectionModelObject, options).then((request) => request(axios, basePath));
        },
        /**
         * delete-bookmaster-by-bookstock-Id
         * @param {BookStockPropertyReferenceControllerApiDeletePropertyReferenceBookstockDeleteRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deletePropertyReferenceBookstockDelete(requestParameters: BookStockPropertyReferenceControllerApiDeletePropertyReferenceBookstockDeleteRequest, options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.deletePropertyReferenceBookstockDelete(requestParameters.id, options).then((request) => request(axios, basePath));
        },
        /**
         * delete-bookstockstatus-by-bookstock-Id
         * @param {BookStockPropertyReferenceControllerApiDeletePropertyReferenceBookstockDelete1Request} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deletePropertyReferenceBookstockDelete1(requestParameters: BookStockPropertyReferenceControllerApiDeletePropertyReferenceBookstockDelete1Request, options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.deletePropertyReferenceBookstockDelete1(requestParameters.id, options).then((request) => request(axios, basePath));
        },
        /**
         * delete-lendingset-by-bookstock-Id
         * @param {BookStockPropertyReferenceControllerApiDeletePropertyReferenceBookstockDelete2Request} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deletePropertyReferenceBookstockDelete2(requestParameters: BookStockPropertyReferenceControllerApiDeletePropertyReferenceBookstockDelete2Request, options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.deletePropertyReferenceBookstockDelete2(requestParameters.id, options).then((request) => request(axios, basePath));
        },
        /**
         * delete-bookmaster-by-bookstock-Id
         * @param {BookStockPropertyReferenceControllerApiDeletePropertyReferenceIdBookstockDeleteRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deletePropertyReferenceIdBookstockDelete(requestParameters: BookStockPropertyReferenceControllerApiDeletePropertyReferenceIdBookstockDeleteRequest, options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.deletePropertyReferenceIdBookstockDelete(requestParameters.id, requestParameters.propertyId, options).then((request) => request(axios, basePath));
        },
        /**
         * delete-bookstockstatus-by-bookstock-Id
         * @param {BookStockPropertyReferenceControllerApiDeletePropertyReferenceIdBookstockDelete1Request} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deletePropertyReferenceIdBookstockDelete1(requestParameters: BookStockPropertyReferenceControllerApiDeletePropertyReferenceIdBookstockDelete1Request, options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.deletePropertyReferenceIdBookstockDelete1(requestParameters.id, requestParameters.propertyId, options).then((request) => request(axios, basePath));
        },
        /**
         * delete-lendingset-by-bookstock-Id
         * @param {BookStockPropertyReferenceControllerApiDeletePropertyReferenceIdBookstockDelete2Request} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deletePropertyReferenceIdBookstockDelete2(requestParameters: BookStockPropertyReferenceControllerApiDeletePropertyReferenceIdBookstockDelete2Request, options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.deletePropertyReferenceIdBookstockDelete2(requestParameters.id, requestParameters.propertyId, options).then((request) => request(axios, basePath));
        },
        /**
         * get-bookmaster-by-bookstock-Id
         * @param {BookStockPropertyReferenceControllerApiFollowPropertyReferenceBookstockGetRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        followPropertyReferenceBookstockGet(requestParameters: BookStockPropertyReferenceControllerApiFollowPropertyReferenceBookstockGetRequest, options?: RawAxiosRequestConfig): AxiosPromise<EntityModelBookMaster> {
            return localVarFp.followPropertyReferenceBookstockGet(requestParameters.id, options).then((request) => request(axios, basePath));
        },
        /**
         * get-bookmaster-by-bookstock-Id
         * @param {BookStockPropertyReferenceControllerApiFollowPropertyReferenceBookstockGet1Request} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        followPropertyReferenceBookstockGet1(requestParameters: BookStockPropertyReferenceControllerApiFollowPropertyReferenceBookstockGet1Request, options?: RawAxiosRequestConfig): AxiosPromise<EntityModelBookMaster> {
            return localVarFp.followPropertyReferenceBookstockGet1(requestParameters.id, requestParameters.propertyId, options).then((request) => request(axios, basePath));
        },
        /**
         * get-bookstockstatus-by-bookstock-Id
         * @param {BookStockPropertyReferenceControllerApiFollowPropertyReferenceBookstockGet2Request} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        followPropertyReferenceBookstockGet2(requestParameters: BookStockPropertyReferenceControllerApiFollowPropertyReferenceBookstockGet2Request, options?: RawAxiosRequestConfig): AxiosPromise<EntityModelBookStockStatus> {
            return localVarFp.followPropertyReferenceBookstockGet2(requestParameters.id, options).then((request) => request(axios, basePath));
        },
        /**
         * get-bookstockstatus-by-bookstock-Id
         * @param {BookStockPropertyReferenceControllerApiFollowPropertyReferenceBookstockGet3Request} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        followPropertyReferenceBookstockGet3(requestParameters: BookStockPropertyReferenceControllerApiFollowPropertyReferenceBookstockGet3Request, options?: RawAxiosRequestConfig): AxiosPromise<EntityModelBookStockStatus> {
            return localVarFp.followPropertyReferenceBookstockGet3(requestParameters.id, requestParameters.propertyId, options).then((request) => request(axios, basePath));
        },
        /**
         * get-lendingset-by-bookstock-Id
         * @param {BookStockPropertyReferenceControllerApiFollowPropertyReferenceBookstockGet4Request} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        followPropertyReferenceBookstockGet4(requestParameters: BookStockPropertyReferenceControllerApiFollowPropertyReferenceBookstockGet4Request, options?: RawAxiosRequestConfig): AxiosPromise<CollectionModelLendingSet> {
            return localVarFp.followPropertyReferenceBookstockGet4(requestParameters.id, options).then((request) => request(axios, basePath));
        },
        /**
         * get-lendingset-by-bookstock-Id
         * @param {BookStockPropertyReferenceControllerApiFollowPropertyReferenceBookstockGet5Request} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        followPropertyReferenceBookstockGet5(requestParameters: BookStockPropertyReferenceControllerApiFollowPropertyReferenceBookstockGet5Request, options?: RawAxiosRequestConfig): AxiosPromise<CollectionModelLendingSet> {
            return localVarFp.followPropertyReferenceBookstockGet5(requestParameters.id, requestParameters.propertyId, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * BookStockPropertyReferenceControllerApi - interface
 * @export
 * @interface BookStockPropertyReferenceControllerApi
 */
export interface BookStockPropertyReferenceControllerApiInterface {
    /**
     * patch-bookmaster-by-bookstock-Id
     * @param {BookStockPropertyReferenceControllerApiCreatePropertyReferenceBookstockPatchRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BookStockPropertyReferenceControllerApiInterface
     */
    createPropertyReferenceBookstockPatch(requestParameters: BookStockPropertyReferenceControllerApiCreatePropertyReferenceBookstockPatchRequest, options?: RawAxiosRequestConfig): AxiosPromise<EntityModelBookMaster>;

    /**
     * patch-bookstockstatus-by-bookstock-Id
     * @param {BookStockPropertyReferenceControllerApiCreatePropertyReferenceBookstockPatch1Request} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BookStockPropertyReferenceControllerApiInterface
     */
    createPropertyReferenceBookstockPatch1(requestParameters: BookStockPropertyReferenceControllerApiCreatePropertyReferenceBookstockPatch1Request, options?: RawAxiosRequestConfig): AxiosPromise<EntityModelBookStockStatus>;

    /**
     * patch-lendingset-by-bookstock-Id
     * @param {BookStockPropertyReferenceControllerApiCreatePropertyReferenceBookstockPatch2Request} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BookStockPropertyReferenceControllerApiInterface
     */
    createPropertyReferenceBookstockPatch2(requestParameters: BookStockPropertyReferenceControllerApiCreatePropertyReferenceBookstockPatch2Request, options?: RawAxiosRequestConfig): AxiosPromise<CollectionModelLendingSet>;

    /**
     * update-bookmaster-by-bookstock-Id
     * @param {BookStockPropertyReferenceControllerApiCreatePropertyReferenceBookstockPutRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BookStockPropertyReferenceControllerApiInterface
     */
    createPropertyReferenceBookstockPut(requestParameters: BookStockPropertyReferenceControllerApiCreatePropertyReferenceBookstockPutRequest, options?: RawAxiosRequestConfig): AxiosPromise<EntityModelBookMaster>;

    /**
     * update-bookstockstatus-by-bookstock-Id
     * @param {BookStockPropertyReferenceControllerApiCreatePropertyReferenceBookstockPut1Request} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BookStockPropertyReferenceControllerApiInterface
     */
    createPropertyReferenceBookstockPut1(requestParameters: BookStockPropertyReferenceControllerApiCreatePropertyReferenceBookstockPut1Request, options?: RawAxiosRequestConfig): AxiosPromise<EntityModelBookStockStatus>;

    /**
     * update-lendingset-by-bookstock-Id
     * @param {BookStockPropertyReferenceControllerApiCreatePropertyReferenceBookstockPut2Request} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BookStockPropertyReferenceControllerApiInterface
     */
    createPropertyReferenceBookstockPut2(requestParameters: BookStockPropertyReferenceControllerApiCreatePropertyReferenceBookstockPut2Request, options?: RawAxiosRequestConfig): AxiosPromise<CollectionModelLendingSet>;

    /**
     * delete-bookmaster-by-bookstock-Id
     * @param {BookStockPropertyReferenceControllerApiDeletePropertyReferenceBookstockDeleteRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BookStockPropertyReferenceControllerApiInterface
     */
    deletePropertyReferenceBookstockDelete(requestParameters: BookStockPropertyReferenceControllerApiDeletePropertyReferenceBookstockDeleteRequest, options?: RawAxiosRequestConfig): AxiosPromise<void>;

    /**
     * delete-bookstockstatus-by-bookstock-Id
     * @param {BookStockPropertyReferenceControllerApiDeletePropertyReferenceBookstockDelete1Request} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BookStockPropertyReferenceControllerApiInterface
     */
    deletePropertyReferenceBookstockDelete1(requestParameters: BookStockPropertyReferenceControllerApiDeletePropertyReferenceBookstockDelete1Request, options?: RawAxiosRequestConfig): AxiosPromise<void>;

    /**
     * delete-lendingset-by-bookstock-Id
     * @param {BookStockPropertyReferenceControllerApiDeletePropertyReferenceBookstockDelete2Request} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BookStockPropertyReferenceControllerApiInterface
     */
    deletePropertyReferenceBookstockDelete2(requestParameters: BookStockPropertyReferenceControllerApiDeletePropertyReferenceBookstockDelete2Request, options?: RawAxiosRequestConfig): AxiosPromise<void>;

    /**
     * delete-bookmaster-by-bookstock-Id
     * @param {BookStockPropertyReferenceControllerApiDeletePropertyReferenceIdBookstockDeleteRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BookStockPropertyReferenceControllerApiInterface
     */
    deletePropertyReferenceIdBookstockDelete(requestParameters: BookStockPropertyReferenceControllerApiDeletePropertyReferenceIdBookstockDeleteRequest, options?: RawAxiosRequestConfig): AxiosPromise<void>;

    /**
     * delete-bookstockstatus-by-bookstock-Id
     * @param {BookStockPropertyReferenceControllerApiDeletePropertyReferenceIdBookstockDelete1Request} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BookStockPropertyReferenceControllerApiInterface
     */
    deletePropertyReferenceIdBookstockDelete1(requestParameters: BookStockPropertyReferenceControllerApiDeletePropertyReferenceIdBookstockDelete1Request, options?: RawAxiosRequestConfig): AxiosPromise<void>;

    /**
     * delete-lendingset-by-bookstock-Id
     * @param {BookStockPropertyReferenceControllerApiDeletePropertyReferenceIdBookstockDelete2Request} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BookStockPropertyReferenceControllerApiInterface
     */
    deletePropertyReferenceIdBookstockDelete2(requestParameters: BookStockPropertyReferenceControllerApiDeletePropertyReferenceIdBookstockDelete2Request, options?: RawAxiosRequestConfig): AxiosPromise<void>;

    /**
     * get-bookmaster-by-bookstock-Id
     * @param {BookStockPropertyReferenceControllerApiFollowPropertyReferenceBookstockGetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BookStockPropertyReferenceControllerApiInterface
     */
    followPropertyReferenceBookstockGet(requestParameters: BookStockPropertyReferenceControllerApiFollowPropertyReferenceBookstockGetRequest, options?: RawAxiosRequestConfig): AxiosPromise<EntityModelBookMaster>;

    /**
     * get-bookmaster-by-bookstock-Id
     * @param {BookStockPropertyReferenceControllerApiFollowPropertyReferenceBookstockGet1Request} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BookStockPropertyReferenceControllerApiInterface
     */
    followPropertyReferenceBookstockGet1(requestParameters: BookStockPropertyReferenceControllerApiFollowPropertyReferenceBookstockGet1Request, options?: RawAxiosRequestConfig): AxiosPromise<EntityModelBookMaster>;

    /**
     * get-bookstockstatus-by-bookstock-Id
     * @param {BookStockPropertyReferenceControllerApiFollowPropertyReferenceBookstockGet2Request} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BookStockPropertyReferenceControllerApiInterface
     */
    followPropertyReferenceBookstockGet2(requestParameters: BookStockPropertyReferenceControllerApiFollowPropertyReferenceBookstockGet2Request, options?: RawAxiosRequestConfig): AxiosPromise<EntityModelBookStockStatus>;

    /**
     * get-bookstockstatus-by-bookstock-Id
     * @param {BookStockPropertyReferenceControllerApiFollowPropertyReferenceBookstockGet3Request} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BookStockPropertyReferenceControllerApiInterface
     */
    followPropertyReferenceBookstockGet3(requestParameters: BookStockPropertyReferenceControllerApiFollowPropertyReferenceBookstockGet3Request, options?: RawAxiosRequestConfig): AxiosPromise<EntityModelBookStockStatus>;

    /**
     * get-lendingset-by-bookstock-Id
     * @param {BookStockPropertyReferenceControllerApiFollowPropertyReferenceBookstockGet4Request} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BookStockPropertyReferenceControllerApiInterface
     */
    followPropertyReferenceBookstockGet4(requestParameters: BookStockPropertyReferenceControllerApiFollowPropertyReferenceBookstockGet4Request, options?: RawAxiosRequestConfig): AxiosPromise<CollectionModelLendingSet>;

    /**
     * get-lendingset-by-bookstock-Id
     * @param {BookStockPropertyReferenceControllerApiFollowPropertyReferenceBookstockGet5Request} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BookStockPropertyReferenceControllerApiInterface
     */
    followPropertyReferenceBookstockGet5(requestParameters: BookStockPropertyReferenceControllerApiFollowPropertyReferenceBookstockGet5Request, options?: RawAxiosRequestConfig): AxiosPromise<CollectionModelLendingSet>;

}

/**
 * Request parameters for createPropertyReferenceBookstockPatch operation in BookStockPropertyReferenceControllerApi.
 * @export
 * @interface BookStockPropertyReferenceControllerApiCreatePropertyReferenceBookstockPatchRequest
 */
export interface BookStockPropertyReferenceControllerApiCreatePropertyReferenceBookstockPatchRequest {
    /**
     * 
     * @type {string}
     * @memberof BookStockPropertyReferenceControllerApiCreatePropertyReferenceBookstockPatch
     */
    readonly id: string

    /**
     * 
     * @type {CollectionModelObject}
     * @memberof BookStockPropertyReferenceControllerApiCreatePropertyReferenceBookstockPatch
     */
    readonly collectionModelObject: CollectionModelObject
}

/**
 * Request parameters for createPropertyReferenceBookstockPatch1 operation in BookStockPropertyReferenceControllerApi.
 * @export
 * @interface BookStockPropertyReferenceControllerApiCreatePropertyReferenceBookstockPatch1Request
 */
export interface BookStockPropertyReferenceControllerApiCreatePropertyReferenceBookstockPatch1Request {
    /**
     * 
     * @type {string}
     * @memberof BookStockPropertyReferenceControllerApiCreatePropertyReferenceBookstockPatch1
     */
    readonly id: string

    /**
     * 
     * @type {CollectionModelObject}
     * @memberof BookStockPropertyReferenceControllerApiCreatePropertyReferenceBookstockPatch1
     */
    readonly collectionModelObject: CollectionModelObject
}

/**
 * Request parameters for createPropertyReferenceBookstockPatch2 operation in BookStockPropertyReferenceControllerApi.
 * @export
 * @interface BookStockPropertyReferenceControllerApiCreatePropertyReferenceBookstockPatch2Request
 */
export interface BookStockPropertyReferenceControllerApiCreatePropertyReferenceBookstockPatch2Request {
    /**
     * 
     * @type {string}
     * @memberof BookStockPropertyReferenceControllerApiCreatePropertyReferenceBookstockPatch2
     */
    readonly id: string

    /**
     * 
     * @type {CollectionModelObject}
     * @memberof BookStockPropertyReferenceControllerApiCreatePropertyReferenceBookstockPatch2
     */
    readonly collectionModelObject: CollectionModelObject
}

/**
 * Request parameters for createPropertyReferenceBookstockPut operation in BookStockPropertyReferenceControllerApi.
 * @export
 * @interface BookStockPropertyReferenceControllerApiCreatePropertyReferenceBookstockPutRequest
 */
export interface BookStockPropertyReferenceControllerApiCreatePropertyReferenceBookstockPutRequest {
    /**
     * 
     * @type {string}
     * @memberof BookStockPropertyReferenceControllerApiCreatePropertyReferenceBookstockPut
     */
    readonly id: string

    /**
     * 
     * @type {CollectionModelObject}
     * @memberof BookStockPropertyReferenceControllerApiCreatePropertyReferenceBookstockPut
     */
    readonly collectionModelObject: CollectionModelObject
}

/**
 * Request parameters for createPropertyReferenceBookstockPut1 operation in BookStockPropertyReferenceControllerApi.
 * @export
 * @interface BookStockPropertyReferenceControllerApiCreatePropertyReferenceBookstockPut1Request
 */
export interface BookStockPropertyReferenceControllerApiCreatePropertyReferenceBookstockPut1Request {
    /**
     * 
     * @type {string}
     * @memberof BookStockPropertyReferenceControllerApiCreatePropertyReferenceBookstockPut1
     */
    readonly id: string

    /**
     * 
     * @type {CollectionModelObject}
     * @memberof BookStockPropertyReferenceControllerApiCreatePropertyReferenceBookstockPut1
     */
    readonly collectionModelObject: CollectionModelObject
}

/**
 * Request parameters for createPropertyReferenceBookstockPut2 operation in BookStockPropertyReferenceControllerApi.
 * @export
 * @interface BookStockPropertyReferenceControllerApiCreatePropertyReferenceBookstockPut2Request
 */
export interface BookStockPropertyReferenceControllerApiCreatePropertyReferenceBookstockPut2Request {
    /**
     * 
     * @type {string}
     * @memberof BookStockPropertyReferenceControllerApiCreatePropertyReferenceBookstockPut2
     */
    readonly id: string

    /**
     * 
     * @type {CollectionModelObject}
     * @memberof BookStockPropertyReferenceControllerApiCreatePropertyReferenceBookstockPut2
     */
    readonly collectionModelObject: CollectionModelObject
}

/**
 * Request parameters for deletePropertyReferenceBookstockDelete operation in BookStockPropertyReferenceControllerApi.
 * @export
 * @interface BookStockPropertyReferenceControllerApiDeletePropertyReferenceBookstockDeleteRequest
 */
export interface BookStockPropertyReferenceControllerApiDeletePropertyReferenceBookstockDeleteRequest {
    /**
     * 
     * @type {string}
     * @memberof BookStockPropertyReferenceControllerApiDeletePropertyReferenceBookstockDelete
     */
    readonly id: string
}

/**
 * Request parameters for deletePropertyReferenceBookstockDelete1 operation in BookStockPropertyReferenceControllerApi.
 * @export
 * @interface BookStockPropertyReferenceControllerApiDeletePropertyReferenceBookstockDelete1Request
 */
export interface BookStockPropertyReferenceControllerApiDeletePropertyReferenceBookstockDelete1Request {
    /**
     * 
     * @type {string}
     * @memberof BookStockPropertyReferenceControllerApiDeletePropertyReferenceBookstockDelete1
     */
    readonly id: string
}

/**
 * Request parameters for deletePropertyReferenceBookstockDelete2 operation in BookStockPropertyReferenceControllerApi.
 * @export
 * @interface BookStockPropertyReferenceControllerApiDeletePropertyReferenceBookstockDelete2Request
 */
export interface BookStockPropertyReferenceControllerApiDeletePropertyReferenceBookstockDelete2Request {
    /**
     * 
     * @type {string}
     * @memberof BookStockPropertyReferenceControllerApiDeletePropertyReferenceBookstockDelete2
     */
    readonly id: string
}

/**
 * Request parameters for deletePropertyReferenceIdBookstockDelete operation in BookStockPropertyReferenceControllerApi.
 * @export
 * @interface BookStockPropertyReferenceControllerApiDeletePropertyReferenceIdBookstockDeleteRequest
 */
export interface BookStockPropertyReferenceControllerApiDeletePropertyReferenceIdBookstockDeleteRequest {
    /**
     * 
     * @type {string}
     * @memberof BookStockPropertyReferenceControllerApiDeletePropertyReferenceIdBookstockDelete
     */
    readonly id: string

    /**
     * 
     * @type {string}
     * @memberof BookStockPropertyReferenceControllerApiDeletePropertyReferenceIdBookstockDelete
     */
    readonly propertyId: string
}

/**
 * Request parameters for deletePropertyReferenceIdBookstockDelete1 operation in BookStockPropertyReferenceControllerApi.
 * @export
 * @interface BookStockPropertyReferenceControllerApiDeletePropertyReferenceIdBookstockDelete1Request
 */
export interface BookStockPropertyReferenceControllerApiDeletePropertyReferenceIdBookstockDelete1Request {
    /**
     * 
     * @type {string}
     * @memberof BookStockPropertyReferenceControllerApiDeletePropertyReferenceIdBookstockDelete1
     */
    readonly id: string

    /**
     * 
     * @type {string}
     * @memberof BookStockPropertyReferenceControllerApiDeletePropertyReferenceIdBookstockDelete1
     */
    readonly propertyId: string
}

/**
 * Request parameters for deletePropertyReferenceIdBookstockDelete2 operation in BookStockPropertyReferenceControllerApi.
 * @export
 * @interface BookStockPropertyReferenceControllerApiDeletePropertyReferenceIdBookstockDelete2Request
 */
export interface BookStockPropertyReferenceControllerApiDeletePropertyReferenceIdBookstockDelete2Request {
    /**
     * 
     * @type {string}
     * @memberof BookStockPropertyReferenceControllerApiDeletePropertyReferenceIdBookstockDelete2
     */
    readonly id: string

    /**
     * 
     * @type {string}
     * @memberof BookStockPropertyReferenceControllerApiDeletePropertyReferenceIdBookstockDelete2
     */
    readonly propertyId: string
}

/**
 * Request parameters for followPropertyReferenceBookstockGet operation in BookStockPropertyReferenceControllerApi.
 * @export
 * @interface BookStockPropertyReferenceControllerApiFollowPropertyReferenceBookstockGetRequest
 */
export interface BookStockPropertyReferenceControllerApiFollowPropertyReferenceBookstockGetRequest {
    /**
     * 
     * @type {string}
     * @memberof BookStockPropertyReferenceControllerApiFollowPropertyReferenceBookstockGet
     */
    readonly id: string
}

/**
 * Request parameters for followPropertyReferenceBookstockGet1 operation in BookStockPropertyReferenceControllerApi.
 * @export
 * @interface BookStockPropertyReferenceControllerApiFollowPropertyReferenceBookstockGet1Request
 */
export interface BookStockPropertyReferenceControllerApiFollowPropertyReferenceBookstockGet1Request {
    /**
     * 
     * @type {string}
     * @memberof BookStockPropertyReferenceControllerApiFollowPropertyReferenceBookstockGet1
     */
    readonly id: string

    /**
     * 
     * @type {string}
     * @memberof BookStockPropertyReferenceControllerApiFollowPropertyReferenceBookstockGet1
     */
    readonly propertyId: string
}

/**
 * Request parameters for followPropertyReferenceBookstockGet2 operation in BookStockPropertyReferenceControllerApi.
 * @export
 * @interface BookStockPropertyReferenceControllerApiFollowPropertyReferenceBookstockGet2Request
 */
export interface BookStockPropertyReferenceControllerApiFollowPropertyReferenceBookstockGet2Request {
    /**
     * 
     * @type {string}
     * @memberof BookStockPropertyReferenceControllerApiFollowPropertyReferenceBookstockGet2
     */
    readonly id: string
}

/**
 * Request parameters for followPropertyReferenceBookstockGet3 operation in BookStockPropertyReferenceControllerApi.
 * @export
 * @interface BookStockPropertyReferenceControllerApiFollowPropertyReferenceBookstockGet3Request
 */
export interface BookStockPropertyReferenceControllerApiFollowPropertyReferenceBookstockGet3Request {
    /**
     * 
     * @type {string}
     * @memberof BookStockPropertyReferenceControllerApiFollowPropertyReferenceBookstockGet3
     */
    readonly id: string

    /**
     * 
     * @type {string}
     * @memberof BookStockPropertyReferenceControllerApiFollowPropertyReferenceBookstockGet3
     */
    readonly propertyId: string
}

/**
 * Request parameters for followPropertyReferenceBookstockGet4 operation in BookStockPropertyReferenceControllerApi.
 * @export
 * @interface BookStockPropertyReferenceControllerApiFollowPropertyReferenceBookstockGet4Request
 */
export interface BookStockPropertyReferenceControllerApiFollowPropertyReferenceBookstockGet4Request {
    /**
     * 
     * @type {string}
     * @memberof BookStockPropertyReferenceControllerApiFollowPropertyReferenceBookstockGet4
     */
    readonly id: string
}

/**
 * Request parameters for followPropertyReferenceBookstockGet5 operation in BookStockPropertyReferenceControllerApi.
 * @export
 * @interface BookStockPropertyReferenceControllerApiFollowPropertyReferenceBookstockGet5Request
 */
export interface BookStockPropertyReferenceControllerApiFollowPropertyReferenceBookstockGet5Request {
    /**
     * 
     * @type {string}
     * @memberof BookStockPropertyReferenceControllerApiFollowPropertyReferenceBookstockGet5
     */
    readonly id: string

    /**
     * 
     * @type {string}
     * @memberof BookStockPropertyReferenceControllerApiFollowPropertyReferenceBookstockGet5
     */
    readonly propertyId: string
}

/**
 * BookStockPropertyReferenceControllerApi - object-oriented interface
 * @export
 * @class BookStockPropertyReferenceControllerApi
 * @extends {BaseAPI}
 */
export class BookStockPropertyReferenceControllerApi extends BaseAPI implements BookStockPropertyReferenceControllerApiInterface {
    /**
     * patch-bookmaster-by-bookstock-Id
     * @param {BookStockPropertyReferenceControllerApiCreatePropertyReferenceBookstockPatchRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BookStockPropertyReferenceControllerApi
     */
    public createPropertyReferenceBookstockPatch(requestParameters: BookStockPropertyReferenceControllerApiCreatePropertyReferenceBookstockPatchRequest, options?: RawAxiosRequestConfig) {
        return BookStockPropertyReferenceControllerApiFp(this.configuration).createPropertyReferenceBookstockPatch(requestParameters.id, requestParameters.collectionModelObject, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * patch-bookstockstatus-by-bookstock-Id
     * @param {BookStockPropertyReferenceControllerApiCreatePropertyReferenceBookstockPatch1Request} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BookStockPropertyReferenceControllerApi
     */
    public createPropertyReferenceBookstockPatch1(requestParameters: BookStockPropertyReferenceControllerApiCreatePropertyReferenceBookstockPatch1Request, options?: RawAxiosRequestConfig) {
        return BookStockPropertyReferenceControllerApiFp(this.configuration).createPropertyReferenceBookstockPatch1(requestParameters.id, requestParameters.collectionModelObject, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * patch-lendingset-by-bookstock-Id
     * @param {BookStockPropertyReferenceControllerApiCreatePropertyReferenceBookstockPatch2Request} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BookStockPropertyReferenceControllerApi
     */
    public createPropertyReferenceBookstockPatch2(requestParameters: BookStockPropertyReferenceControllerApiCreatePropertyReferenceBookstockPatch2Request, options?: RawAxiosRequestConfig) {
        return BookStockPropertyReferenceControllerApiFp(this.configuration).createPropertyReferenceBookstockPatch2(requestParameters.id, requestParameters.collectionModelObject, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * update-bookmaster-by-bookstock-Id
     * @param {BookStockPropertyReferenceControllerApiCreatePropertyReferenceBookstockPutRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BookStockPropertyReferenceControllerApi
     */
    public createPropertyReferenceBookstockPut(requestParameters: BookStockPropertyReferenceControllerApiCreatePropertyReferenceBookstockPutRequest, options?: RawAxiosRequestConfig) {
        return BookStockPropertyReferenceControllerApiFp(this.configuration).createPropertyReferenceBookstockPut(requestParameters.id, requestParameters.collectionModelObject, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * update-bookstockstatus-by-bookstock-Id
     * @param {BookStockPropertyReferenceControllerApiCreatePropertyReferenceBookstockPut1Request} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BookStockPropertyReferenceControllerApi
     */
    public createPropertyReferenceBookstockPut1(requestParameters: BookStockPropertyReferenceControllerApiCreatePropertyReferenceBookstockPut1Request, options?: RawAxiosRequestConfig) {
        return BookStockPropertyReferenceControllerApiFp(this.configuration).createPropertyReferenceBookstockPut1(requestParameters.id, requestParameters.collectionModelObject, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * update-lendingset-by-bookstock-Id
     * @param {BookStockPropertyReferenceControllerApiCreatePropertyReferenceBookstockPut2Request} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BookStockPropertyReferenceControllerApi
     */
    public createPropertyReferenceBookstockPut2(requestParameters: BookStockPropertyReferenceControllerApiCreatePropertyReferenceBookstockPut2Request, options?: RawAxiosRequestConfig) {
        return BookStockPropertyReferenceControllerApiFp(this.configuration).createPropertyReferenceBookstockPut2(requestParameters.id, requestParameters.collectionModelObject, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * delete-bookmaster-by-bookstock-Id
     * @param {BookStockPropertyReferenceControllerApiDeletePropertyReferenceBookstockDeleteRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BookStockPropertyReferenceControllerApi
     */
    public deletePropertyReferenceBookstockDelete(requestParameters: BookStockPropertyReferenceControllerApiDeletePropertyReferenceBookstockDeleteRequest, options?: RawAxiosRequestConfig) {
        return BookStockPropertyReferenceControllerApiFp(this.configuration).deletePropertyReferenceBookstockDelete(requestParameters.id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * delete-bookstockstatus-by-bookstock-Id
     * @param {BookStockPropertyReferenceControllerApiDeletePropertyReferenceBookstockDelete1Request} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BookStockPropertyReferenceControllerApi
     */
    public deletePropertyReferenceBookstockDelete1(requestParameters: BookStockPropertyReferenceControllerApiDeletePropertyReferenceBookstockDelete1Request, options?: RawAxiosRequestConfig) {
        return BookStockPropertyReferenceControllerApiFp(this.configuration).deletePropertyReferenceBookstockDelete1(requestParameters.id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * delete-lendingset-by-bookstock-Id
     * @param {BookStockPropertyReferenceControllerApiDeletePropertyReferenceBookstockDelete2Request} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BookStockPropertyReferenceControllerApi
     */
    public deletePropertyReferenceBookstockDelete2(requestParameters: BookStockPropertyReferenceControllerApiDeletePropertyReferenceBookstockDelete2Request, options?: RawAxiosRequestConfig) {
        return BookStockPropertyReferenceControllerApiFp(this.configuration).deletePropertyReferenceBookstockDelete2(requestParameters.id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * delete-bookmaster-by-bookstock-Id
     * @param {BookStockPropertyReferenceControllerApiDeletePropertyReferenceIdBookstockDeleteRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BookStockPropertyReferenceControllerApi
     */
    public deletePropertyReferenceIdBookstockDelete(requestParameters: BookStockPropertyReferenceControllerApiDeletePropertyReferenceIdBookstockDeleteRequest, options?: RawAxiosRequestConfig) {
        return BookStockPropertyReferenceControllerApiFp(this.configuration).deletePropertyReferenceIdBookstockDelete(requestParameters.id, requestParameters.propertyId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * delete-bookstockstatus-by-bookstock-Id
     * @param {BookStockPropertyReferenceControllerApiDeletePropertyReferenceIdBookstockDelete1Request} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BookStockPropertyReferenceControllerApi
     */
    public deletePropertyReferenceIdBookstockDelete1(requestParameters: BookStockPropertyReferenceControllerApiDeletePropertyReferenceIdBookstockDelete1Request, options?: RawAxiosRequestConfig) {
        return BookStockPropertyReferenceControllerApiFp(this.configuration).deletePropertyReferenceIdBookstockDelete1(requestParameters.id, requestParameters.propertyId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * delete-lendingset-by-bookstock-Id
     * @param {BookStockPropertyReferenceControllerApiDeletePropertyReferenceIdBookstockDelete2Request} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BookStockPropertyReferenceControllerApi
     */
    public deletePropertyReferenceIdBookstockDelete2(requestParameters: BookStockPropertyReferenceControllerApiDeletePropertyReferenceIdBookstockDelete2Request, options?: RawAxiosRequestConfig) {
        return BookStockPropertyReferenceControllerApiFp(this.configuration).deletePropertyReferenceIdBookstockDelete2(requestParameters.id, requestParameters.propertyId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * get-bookmaster-by-bookstock-Id
     * @param {BookStockPropertyReferenceControllerApiFollowPropertyReferenceBookstockGetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BookStockPropertyReferenceControllerApi
     */
    public followPropertyReferenceBookstockGet(requestParameters: BookStockPropertyReferenceControllerApiFollowPropertyReferenceBookstockGetRequest, options?: RawAxiosRequestConfig) {
        return BookStockPropertyReferenceControllerApiFp(this.configuration).followPropertyReferenceBookstockGet(requestParameters.id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * get-bookmaster-by-bookstock-Id
     * @param {BookStockPropertyReferenceControllerApiFollowPropertyReferenceBookstockGet1Request} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BookStockPropertyReferenceControllerApi
     */
    public followPropertyReferenceBookstockGet1(requestParameters: BookStockPropertyReferenceControllerApiFollowPropertyReferenceBookstockGet1Request, options?: RawAxiosRequestConfig) {
        return BookStockPropertyReferenceControllerApiFp(this.configuration).followPropertyReferenceBookstockGet1(requestParameters.id, requestParameters.propertyId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * get-bookstockstatus-by-bookstock-Id
     * @param {BookStockPropertyReferenceControllerApiFollowPropertyReferenceBookstockGet2Request} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BookStockPropertyReferenceControllerApi
     */
    public followPropertyReferenceBookstockGet2(requestParameters: BookStockPropertyReferenceControllerApiFollowPropertyReferenceBookstockGet2Request, options?: RawAxiosRequestConfig) {
        return BookStockPropertyReferenceControllerApiFp(this.configuration).followPropertyReferenceBookstockGet2(requestParameters.id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * get-bookstockstatus-by-bookstock-Id
     * @param {BookStockPropertyReferenceControllerApiFollowPropertyReferenceBookstockGet3Request} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BookStockPropertyReferenceControllerApi
     */
    public followPropertyReferenceBookstockGet3(requestParameters: BookStockPropertyReferenceControllerApiFollowPropertyReferenceBookstockGet3Request, options?: RawAxiosRequestConfig) {
        return BookStockPropertyReferenceControllerApiFp(this.configuration).followPropertyReferenceBookstockGet3(requestParameters.id, requestParameters.propertyId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * get-lendingset-by-bookstock-Id
     * @param {BookStockPropertyReferenceControllerApiFollowPropertyReferenceBookstockGet4Request} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BookStockPropertyReferenceControllerApi
     */
    public followPropertyReferenceBookstockGet4(requestParameters: BookStockPropertyReferenceControllerApiFollowPropertyReferenceBookstockGet4Request, options?: RawAxiosRequestConfig) {
        return BookStockPropertyReferenceControllerApiFp(this.configuration).followPropertyReferenceBookstockGet4(requestParameters.id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * get-lendingset-by-bookstock-Id
     * @param {BookStockPropertyReferenceControllerApiFollowPropertyReferenceBookstockGet5Request} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BookStockPropertyReferenceControllerApi
     */
    public followPropertyReferenceBookstockGet5(requestParameters: BookStockPropertyReferenceControllerApiFollowPropertyReferenceBookstockGet5Request, options?: RawAxiosRequestConfig) {
        return BookStockPropertyReferenceControllerApiFp(this.configuration).followPropertyReferenceBookstockGet5(requestParameters.id, requestParameters.propertyId, options).then((request) => request(this.axios, this.basePath));
    }
}



/**
 * BookStockSearchControllerApi - axios parameter creator
 * @export
 */
export const BookStockSearchControllerApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @param {number} [id] 
         * @param {string} [bookName] 
         * @param {string} [memo] 
         * @param {Array<number>} [bookStockStatusIds] 
         * @param {number} [page] Zero-based page index (0..N)
         * @param {number} [size] The size of the page to be returned
         * @param {Array<string>} [sort] Sorting criteria in the format: property,(asc|desc). Default sort order is ascending. Multiple sort criteria are supported.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        executeSearchBookstockGet: async (id?: number, bookName?: string, memo?: string, bookStockStatusIds?: Array<number>, page?: number, size?: number, sort?: Array<string>, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/bookStocks/search/findByComplexConditions`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (id !== undefined) {
                localVarQueryParameter['id'] = id;
            }

            if (bookName !== undefined) {
                localVarQueryParameter['bookName'] = bookName;
            }

            if (memo !== undefined) {
                localVarQueryParameter['memo'] = memo;
            }

            if (bookStockStatusIds) {
                localVarQueryParameter['bookStockStatusIds'] = bookStockStatusIds;
            }

            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }

            if (size !== undefined) {
                localVarQueryParameter['size'] = size;
            }

            if (sort) {
                localVarQueryParameter['sort'] = sort;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * BookStockSearchControllerApi - functional programming interface
 * @export
 */
export const BookStockSearchControllerApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = BookStockSearchControllerApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @param {number} [id] 
         * @param {string} [bookName] 
         * @param {string} [memo] 
         * @param {Array<number>} [bookStockStatusIds] 
         * @param {number} [page] Zero-based page index (0..N)
         * @param {number} [size] The size of the page to be returned
         * @param {Array<string>} [sort] Sorting criteria in the format: property,(asc|desc). Default sort order is ascending. Multiple sort criteria are supported.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async executeSearchBookstockGet(id?: number, bookName?: string, memo?: string, bookStockStatusIds?: Array<number>, page?: number, size?: number, sort?: Array<string>, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<PagedModelEntityModelBookStock>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.executeSearchBookstockGet(id, bookName, memo, bookStockStatusIds, page, size, sort, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['BookStockSearchControllerApi.executeSearchBookstockGet']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * BookStockSearchControllerApi - factory interface
 * @export
 */
export const BookStockSearchControllerApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = BookStockSearchControllerApiFp(configuration)
    return {
        /**
         * 
         * @param {BookStockSearchControllerApiExecuteSearchBookstockGetRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        executeSearchBookstockGet(requestParameters: BookStockSearchControllerApiExecuteSearchBookstockGetRequest = {}, options?: RawAxiosRequestConfig): AxiosPromise<PagedModelEntityModelBookStock> {
            return localVarFp.executeSearchBookstockGet(requestParameters.id, requestParameters.bookName, requestParameters.memo, requestParameters.bookStockStatusIds, requestParameters.page, requestParameters.size, requestParameters.sort, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * BookStockSearchControllerApi - interface
 * @export
 * @interface BookStockSearchControllerApi
 */
export interface BookStockSearchControllerApiInterface {
    /**
     * 
     * @param {BookStockSearchControllerApiExecuteSearchBookstockGetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BookStockSearchControllerApiInterface
     */
    executeSearchBookstockGet(requestParameters?: BookStockSearchControllerApiExecuteSearchBookstockGetRequest, options?: RawAxiosRequestConfig): AxiosPromise<PagedModelEntityModelBookStock>;

}

/**
 * Request parameters for executeSearchBookstockGet operation in BookStockSearchControllerApi.
 * @export
 * @interface BookStockSearchControllerApiExecuteSearchBookstockGetRequest
 */
export interface BookStockSearchControllerApiExecuteSearchBookstockGetRequest {
    /**
     * 
     * @type {number}
     * @memberof BookStockSearchControllerApiExecuteSearchBookstockGet
     */
    readonly id?: number

    /**
     * 
     * @type {string}
     * @memberof BookStockSearchControllerApiExecuteSearchBookstockGet
     */
    readonly bookName?: string

    /**
     * 
     * @type {string}
     * @memberof BookStockSearchControllerApiExecuteSearchBookstockGet
     */
    readonly memo?: string

    /**
     * 
     * @type {Array<number>}
     * @memberof BookStockSearchControllerApiExecuteSearchBookstockGet
     */
    readonly bookStockStatusIds?: Array<number>

    /**
     * Zero-based page index (0..N)
     * @type {number}
     * @memberof BookStockSearchControllerApiExecuteSearchBookstockGet
     */
    readonly page?: number

    /**
     * The size of the page to be returned
     * @type {number}
     * @memberof BookStockSearchControllerApiExecuteSearchBookstockGet
     */
    readonly size?: number

    /**
     * Sorting criteria in the format: property,(asc|desc). Default sort order is ascending. Multiple sort criteria are supported.
     * @type {Array<string>}
     * @memberof BookStockSearchControllerApiExecuteSearchBookstockGet
     */
    readonly sort?: Array<string>
}

/**
 * BookStockSearchControllerApi - object-oriented interface
 * @export
 * @class BookStockSearchControllerApi
 * @extends {BaseAPI}
 */
export class BookStockSearchControllerApi extends BaseAPI implements BookStockSearchControllerApiInterface {
    /**
     * 
     * @param {BookStockSearchControllerApiExecuteSearchBookstockGetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BookStockSearchControllerApi
     */
    public executeSearchBookstockGet(requestParameters: BookStockSearchControllerApiExecuteSearchBookstockGetRequest = {}, options?: RawAxiosRequestConfig) {
        return BookStockSearchControllerApiFp(this.configuration).executeSearchBookstockGet(requestParameters.id, requestParameters.bookName, requestParameters.memo, requestParameters.bookStockStatusIds, requestParameters.page, requestParameters.size, requestParameters.sort, options).then((request) => request(this.axios, this.basePath));
    }
}



/**
 * BookStockStatusEntityControllerApi - axios parameter creator
 * @export
 */
export const BookStockStatusEntityControllerApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * delete-bookstockstatus
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteItemResourceBookstockstatusDelete: async (id: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('deleteItemResourceBookstockstatusDelete', 'id', id)
            const localVarPath = `/bookStockStatuses/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * get-bookstockstatus
         * @param {number} [page] Zero-based page index (0..N)
         * @param {number} [size] The size of the page to be returned
         * @param {Array<string>} [sort] Sorting criteria in the format: property,(asc|desc). Default sort order is ascending. Multiple sort criteria are supported.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getCollectionResourceBookstockstatusGet: async (page?: number, size?: number, sort?: Array<string>, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/bookStockStatuses`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }

            if (size !== undefined) {
                localVarQueryParameter['size'] = size;
            }

            if (sort) {
                localVarQueryParameter['sort'] = sort;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * get-bookstockstatus
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getItemResourceBookstockstatusGet: async (id: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('getItemResourceBookstockstatusGet', 'id', id)
            const localVarPath = `/bookStockStatuses/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * patch-bookstockstatus
         * @param {string} id 
         * @param {BookStockStatusRequestBody} bookStockStatusRequestBody 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        patchItemResourceBookstockstatusPatch: async (id: string, bookStockStatusRequestBody: BookStockStatusRequestBody, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('patchItemResourceBookstockstatusPatch', 'id', id)
            // verify required parameter 'bookStockStatusRequestBody' is not null or undefined
            assertParamExists('patchItemResourceBookstockstatusPatch', 'bookStockStatusRequestBody', bookStockStatusRequestBody)
            const localVarPath = `/bookStockStatuses/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(bookStockStatusRequestBody, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * create-bookstockstatus
         * @param {BookStockStatusRequestBody} bookStockStatusRequestBody 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postCollectionResourceBookstockstatusPost: async (bookStockStatusRequestBody: BookStockStatusRequestBody, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'bookStockStatusRequestBody' is not null or undefined
            assertParamExists('postCollectionResourceBookstockstatusPost', 'bookStockStatusRequestBody', bookStockStatusRequestBody)
            const localVarPath = `/bookStockStatuses`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(bookStockStatusRequestBody, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * update-bookstockstatus
         * @param {string} id 
         * @param {BookStockStatusRequestBody} bookStockStatusRequestBody 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        putItemResourceBookstockstatusPut: async (id: string, bookStockStatusRequestBody: BookStockStatusRequestBody, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('putItemResourceBookstockstatusPut', 'id', id)
            // verify required parameter 'bookStockStatusRequestBody' is not null or undefined
            assertParamExists('putItemResourceBookstockstatusPut', 'bookStockStatusRequestBody', bookStockStatusRequestBody)
            const localVarPath = `/bookStockStatuses/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(bookStockStatusRequestBody, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * BookStockStatusEntityControllerApi - functional programming interface
 * @export
 */
export const BookStockStatusEntityControllerApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = BookStockStatusEntityControllerApiAxiosParamCreator(configuration)
    return {
        /**
         * delete-bookstockstatus
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deleteItemResourceBookstockstatusDelete(id: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.deleteItemResourceBookstockstatusDelete(id, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['BookStockStatusEntityControllerApi.deleteItemResourceBookstockstatusDelete']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * get-bookstockstatus
         * @param {number} [page] Zero-based page index (0..N)
         * @param {number} [size] The size of the page to be returned
         * @param {Array<string>} [sort] Sorting criteria in the format: property,(asc|desc). Default sort order is ascending. Multiple sort criteria are supported.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getCollectionResourceBookstockstatusGet(page?: number, size?: number, sort?: Array<string>, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<PagedModelEntityModelBookStockStatus>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getCollectionResourceBookstockstatusGet(page, size, sort, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['BookStockStatusEntityControllerApi.getCollectionResourceBookstockstatusGet']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * get-bookstockstatus
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getItemResourceBookstockstatusGet(id: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<EntityModelBookStockStatus>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getItemResourceBookstockstatusGet(id, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['BookStockStatusEntityControllerApi.getItemResourceBookstockstatusGet']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * patch-bookstockstatus
         * @param {string} id 
         * @param {BookStockStatusRequestBody} bookStockStatusRequestBody 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async patchItemResourceBookstockstatusPatch(id: string, bookStockStatusRequestBody: BookStockStatusRequestBody, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<EntityModelBookStockStatus>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.patchItemResourceBookstockstatusPatch(id, bookStockStatusRequestBody, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['BookStockStatusEntityControllerApi.patchItemResourceBookstockstatusPatch']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * create-bookstockstatus
         * @param {BookStockStatusRequestBody} bookStockStatusRequestBody 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async postCollectionResourceBookstockstatusPost(bookStockStatusRequestBody: BookStockStatusRequestBody, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<EntityModelBookStockStatus>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.postCollectionResourceBookstockstatusPost(bookStockStatusRequestBody, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['BookStockStatusEntityControllerApi.postCollectionResourceBookstockstatusPost']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * update-bookstockstatus
         * @param {string} id 
         * @param {BookStockStatusRequestBody} bookStockStatusRequestBody 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async putItemResourceBookstockstatusPut(id: string, bookStockStatusRequestBody: BookStockStatusRequestBody, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<EntityModelBookStockStatus>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.putItemResourceBookstockstatusPut(id, bookStockStatusRequestBody, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['BookStockStatusEntityControllerApi.putItemResourceBookstockstatusPut']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * BookStockStatusEntityControllerApi - factory interface
 * @export
 */
export const BookStockStatusEntityControllerApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = BookStockStatusEntityControllerApiFp(configuration)
    return {
        /**
         * delete-bookstockstatus
         * @param {BookStockStatusEntityControllerApiDeleteItemResourceBookstockstatusDeleteRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteItemResourceBookstockstatusDelete(requestParameters: BookStockStatusEntityControllerApiDeleteItemResourceBookstockstatusDeleteRequest, options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.deleteItemResourceBookstockstatusDelete(requestParameters.id, options).then((request) => request(axios, basePath));
        },
        /**
         * get-bookstockstatus
         * @param {BookStockStatusEntityControllerApiGetCollectionResourceBookstockstatusGetRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getCollectionResourceBookstockstatusGet(requestParameters: BookStockStatusEntityControllerApiGetCollectionResourceBookstockstatusGetRequest = {}, options?: RawAxiosRequestConfig): AxiosPromise<PagedModelEntityModelBookStockStatus> {
            return localVarFp.getCollectionResourceBookstockstatusGet(requestParameters.page, requestParameters.size, requestParameters.sort, options).then((request) => request(axios, basePath));
        },
        /**
         * get-bookstockstatus
         * @param {BookStockStatusEntityControllerApiGetItemResourceBookstockstatusGetRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getItemResourceBookstockstatusGet(requestParameters: BookStockStatusEntityControllerApiGetItemResourceBookstockstatusGetRequest, options?: RawAxiosRequestConfig): AxiosPromise<EntityModelBookStockStatus> {
            return localVarFp.getItemResourceBookstockstatusGet(requestParameters.id, options).then((request) => request(axios, basePath));
        },
        /**
         * patch-bookstockstatus
         * @param {BookStockStatusEntityControllerApiPatchItemResourceBookstockstatusPatchRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        patchItemResourceBookstockstatusPatch(requestParameters: BookStockStatusEntityControllerApiPatchItemResourceBookstockstatusPatchRequest, options?: RawAxiosRequestConfig): AxiosPromise<EntityModelBookStockStatus> {
            return localVarFp.patchItemResourceBookstockstatusPatch(requestParameters.id, requestParameters.bookStockStatusRequestBody, options).then((request) => request(axios, basePath));
        },
        /**
         * create-bookstockstatus
         * @param {BookStockStatusEntityControllerApiPostCollectionResourceBookstockstatusPostRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postCollectionResourceBookstockstatusPost(requestParameters: BookStockStatusEntityControllerApiPostCollectionResourceBookstockstatusPostRequest, options?: RawAxiosRequestConfig): AxiosPromise<EntityModelBookStockStatus> {
            return localVarFp.postCollectionResourceBookstockstatusPost(requestParameters.bookStockStatusRequestBody, options).then((request) => request(axios, basePath));
        },
        /**
         * update-bookstockstatus
         * @param {BookStockStatusEntityControllerApiPutItemResourceBookstockstatusPutRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        putItemResourceBookstockstatusPut(requestParameters: BookStockStatusEntityControllerApiPutItemResourceBookstockstatusPutRequest, options?: RawAxiosRequestConfig): AxiosPromise<EntityModelBookStockStatus> {
            return localVarFp.putItemResourceBookstockstatusPut(requestParameters.id, requestParameters.bookStockStatusRequestBody, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * BookStockStatusEntityControllerApi - interface
 * @export
 * @interface BookStockStatusEntityControllerApi
 */
export interface BookStockStatusEntityControllerApiInterface {
    /**
     * delete-bookstockstatus
     * @param {BookStockStatusEntityControllerApiDeleteItemResourceBookstockstatusDeleteRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BookStockStatusEntityControllerApiInterface
     */
    deleteItemResourceBookstockstatusDelete(requestParameters: BookStockStatusEntityControllerApiDeleteItemResourceBookstockstatusDeleteRequest, options?: RawAxiosRequestConfig): AxiosPromise<void>;

    /**
     * get-bookstockstatus
     * @param {BookStockStatusEntityControllerApiGetCollectionResourceBookstockstatusGetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BookStockStatusEntityControllerApiInterface
     */
    getCollectionResourceBookstockstatusGet(requestParameters?: BookStockStatusEntityControllerApiGetCollectionResourceBookstockstatusGetRequest, options?: RawAxiosRequestConfig): AxiosPromise<PagedModelEntityModelBookStockStatus>;

    /**
     * get-bookstockstatus
     * @param {BookStockStatusEntityControllerApiGetItemResourceBookstockstatusGetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BookStockStatusEntityControllerApiInterface
     */
    getItemResourceBookstockstatusGet(requestParameters: BookStockStatusEntityControllerApiGetItemResourceBookstockstatusGetRequest, options?: RawAxiosRequestConfig): AxiosPromise<EntityModelBookStockStatus>;

    /**
     * patch-bookstockstatus
     * @param {BookStockStatusEntityControllerApiPatchItemResourceBookstockstatusPatchRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BookStockStatusEntityControllerApiInterface
     */
    patchItemResourceBookstockstatusPatch(requestParameters: BookStockStatusEntityControllerApiPatchItemResourceBookstockstatusPatchRequest, options?: RawAxiosRequestConfig): AxiosPromise<EntityModelBookStockStatus>;

    /**
     * create-bookstockstatus
     * @param {BookStockStatusEntityControllerApiPostCollectionResourceBookstockstatusPostRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BookStockStatusEntityControllerApiInterface
     */
    postCollectionResourceBookstockstatusPost(requestParameters: BookStockStatusEntityControllerApiPostCollectionResourceBookstockstatusPostRequest, options?: RawAxiosRequestConfig): AxiosPromise<EntityModelBookStockStatus>;

    /**
     * update-bookstockstatus
     * @param {BookStockStatusEntityControllerApiPutItemResourceBookstockstatusPutRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BookStockStatusEntityControllerApiInterface
     */
    putItemResourceBookstockstatusPut(requestParameters: BookStockStatusEntityControllerApiPutItemResourceBookstockstatusPutRequest, options?: RawAxiosRequestConfig): AxiosPromise<EntityModelBookStockStatus>;

}

/**
 * Request parameters for deleteItemResourceBookstockstatusDelete operation in BookStockStatusEntityControllerApi.
 * @export
 * @interface BookStockStatusEntityControllerApiDeleteItemResourceBookstockstatusDeleteRequest
 */
export interface BookStockStatusEntityControllerApiDeleteItemResourceBookstockstatusDeleteRequest {
    /**
     * 
     * @type {string}
     * @memberof BookStockStatusEntityControllerApiDeleteItemResourceBookstockstatusDelete
     */
    readonly id: string
}

/**
 * Request parameters for getCollectionResourceBookstockstatusGet operation in BookStockStatusEntityControllerApi.
 * @export
 * @interface BookStockStatusEntityControllerApiGetCollectionResourceBookstockstatusGetRequest
 */
export interface BookStockStatusEntityControllerApiGetCollectionResourceBookstockstatusGetRequest {
    /**
     * Zero-based page index (0..N)
     * @type {number}
     * @memberof BookStockStatusEntityControllerApiGetCollectionResourceBookstockstatusGet
     */
    readonly page?: number

    /**
     * The size of the page to be returned
     * @type {number}
     * @memberof BookStockStatusEntityControllerApiGetCollectionResourceBookstockstatusGet
     */
    readonly size?: number

    /**
     * Sorting criteria in the format: property,(asc|desc). Default sort order is ascending. Multiple sort criteria are supported.
     * @type {Array<string>}
     * @memberof BookStockStatusEntityControllerApiGetCollectionResourceBookstockstatusGet
     */
    readonly sort?: Array<string>
}

/**
 * Request parameters for getItemResourceBookstockstatusGet operation in BookStockStatusEntityControllerApi.
 * @export
 * @interface BookStockStatusEntityControllerApiGetItemResourceBookstockstatusGetRequest
 */
export interface BookStockStatusEntityControllerApiGetItemResourceBookstockstatusGetRequest {
    /**
     * 
     * @type {string}
     * @memberof BookStockStatusEntityControllerApiGetItemResourceBookstockstatusGet
     */
    readonly id: string
}

/**
 * Request parameters for patchItemResourceBookstockstatusPatch operation in BookStockStatusEntityControllerApi.
 * @export
 * @interface BookStockStatusEntityControllerApiPatchItemResourceBookstockstatusPatchRequest
 */
export interface BookStockStatusEntityControllerApiPatchItemResourceBookstockstatusPatchRequest {
    /**
     * 
     * @type {string}
     * @memberof BookStockStatusEntityControllerApiPatchItemResourceBookstockstatusPatch
     */
    readonly id: string

    /**
     * 
     * @type {BookStockStatusRequestBody}
     * @memberof BookStockStatusEntityControllerApiPatchItemResourceBookstockstatusPatch
     */
    readonly bookStockStatusRequestBody: BookStockStatusRequestBody
}

/**
 * Request parameters for postCollectionResourceBookstockstatusPost operation in BookStockStatusEntityControllerApi.
 * @export
 * @interface BookStockStatusEntityControllerApiPostCollectionResourceBookstockstatusPostRequest
 */
export interface BookStockStatusEntityControllerApiPostCollectionResourceBookstockstatusPostRequest {
    /**
     * 
     * @type {BookStockStatusRequestBody}
     * @memberof BookStockStatusEntityControllerApiPostCollectionResourceBookstockstatusPost
     */
    readonly bookStockStatusRequestBody: BookStockStatusRequestBody
}

/**
 * Request parameters for putItemResourceBookstockstatusPut operation in BookStockStatusEntityControllerApi.
 * @export
 * @interface BookStockStatusEntityControllerApiPutItemResourceBookstockstatusPutRequest
 */
export interface BookStockStatusEntityControllerApiPutItemResourceBookstockstatusPutRequest {
    /**
     * 
     * @type {string}
     * @memberof BookStockStatusEntityControllerApiPutItemResourceBookstockstatusPut
     */
    readonly id: string

    /**
     * 
     * @type {BookStockStatusRequestBody}
     * @memberof BookStockStatusEntityControllerApiPutItemResourceBookstockstatusPut
     */
    readonly bookStockStatusRequestBody: BookStockStatusRequestBody
}

/**
 * BookStockStatusEntityControllerApi - object-oriented interface
 * @export
 * @class BookStockStatusEntityControllerApi
 * @extends {BaseAPI}
 */
export class BookStockStatusEntityControllerApi extends BaseAPI implements BookStockStatusEntityControllerApiInterface {
    /**
     * delete-bookstockstatus
     * @param {BookStockStatusEntityControllerApiDeleteItemResourceBookstockstatusDeleteRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BookStockStatusEntityControllerApi
     */
    public deleteItemResourceBookstockstatusDelete(requestParameters: BookStockStatusEntityControllerApiDeleteItemResourceBookstockstatusDeleteRequest, options?: RawAxiosRequestConfig) {
        return BookStockStatusEntityControllerApiFp(this.configuration).deleteItemResourceBookstockstatusDelete(requestParameters.id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * get-bookstockstatus
     * @param {BookStockStatusEntityControllerApiGetCollectionResourceBookstockstatusGetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BookStockStatusEntityControllerApi
     */
    public getCollectionResourceBookstockstatusGet(requestParameters: BookStockStatusEntityControllerApiGetCollectionResourceBookstockstatusGetRequest = {}, options?: RawAxiosRequestConfig) {
        return BookStockStatusEntityControllerApiFp(this.configuration).getCollectionResourceBookstockstatusGet(requestParameters.page, requestParameters.size, requestParameters.sort, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * get-bookstockstatus
     * @param {BookStockStatusEntityControllerApiGetItemResourceBookstockstatusGetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BookStockStatusEntityControllerApi
     */
    public getItemResourceBookstockstatusGet(requestParameters: BookStockStatusEntityControllerApiGetItemResourceBookstockstatusGetRequest, options?: RawAxiosRequestConfig) {
        return BookStockStatusEntityControllerApiFp(this.configuration).getItemResourceBookstockstatusGet(requestParameters.id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * patch-bookstockstatus
     * @param {BookStockStatusEntityControllerApiPatchItemResourceBookstockstatusPatchRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BookStockStatusEntityControllerApi
     */
    public patchItemResourceBookstockstatusPatch(requestParameters: BookStockStatusEntityControllerApiPatchItemResourceBookstockstatusPatchRequest, options?: RawAxiosRequestConfig) {
        return BookStockStatusEntityControllerApiFp(this.configuration).patchItemResourceBookstockstatusPatch(requestParameters.id, requestParameters.bookStockStatusRequestBody, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * create-bookstockstatus
     * @param {BookStockStatusEntityControllerApiPostCollectionResourceBookstockstatusPostRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BookStockStatusEntityControllerApi
     */
    public postCollectionResourceBookstockstatusPost(requestParameters: BookStockStatusEntityControllerApiPostCollectionResourceBookstockstatusPostRequest, options?: RawAxiosRequestConfig) {
        return BookStockStatusEntityControllerApiFp(this.configuration).postCollectionResourceBookstockstatusPost(requestParameters.bookStockStatusRequestBody, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * update-bookstockstatus
     * @param {BookStockStatusEntityControllerApiPutItemResourceBookstockstatusPutRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BookStockStatusEntityControllerApi
     */
    public putItemResourceBookstockstatusPut(requestParameters: BookStockStatusEntityControllerApiPutItemResourceBookstockstatusPutRequest, options?: RawAxiosRequestConfig) {
        return BookStockStatusEntityControllerApiFp(this.configuration).putItemResourceBookstockstatusPut(requestParameters.id, requestParameters.bookStockStatusRequestBody, options).then((request) => request(this.axios, this.basePath));
    }
}



/**
 * BookStockStatusSearchControllerApi - axios parameter creator
 * @export
 */
export const BookStockStatusSearchControllerApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @param {number} [id] 
         * @param {string} [name] 
         * @param {number} [page] Zero-based page index (0..N)
         * @param {number} [size] The size of the page to be returned
         * @param {Array<string>} [sort] Sorting criteria in the format: property,(asc|desc). Default sort order is ascending. Multiple sort criteria are supported.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        executeSearchBookstockstatusGet: async (id?: number, name?: string, page?: number, size?: number, sort?: Array<string>, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/bookStockStatuses/search/findByComplexConditions`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (id !== undefined) {
                localVarQueryParameter['id'] = id;
            }

            if (name !== undefined) {
                localVarQueryParameter['name'] = name;
            }

            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }

            if (size !== undefined) {
                localVarQueryParameter['size'] = size;
            }

            if (sort) {
                localVarQueryParameter['sort'] = sort;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * BookStockStatusSearchControllerApi - functional programming interface
 * @export
 */
export const BookStockStatusSearchControllerApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = BookStockStatusSearchControllerApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @param {number} [id] 
         * @param {string} [name] 
         * @param {number} [page] Zero-based page index (0..N)
         * @param {number} [size] The size of the page to be returned
         * @param {Array<string>} [sort] Sorting criteria in the format: property,(asc|desc). Default sort order is ascending. Multiple sort criteria are supported.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async executeSearchBookstockstatusGet(id?: number, name?: string, page?: number, size?: number, sort?: Array<string>, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<PagedModelEntityModelBookStockStatus>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.executeSearchBookstockstatusGet(id, name, page, size, sort, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['BookStockStatusSearchControllerApi.executeSearchBookstockstatusGet']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * BookStockStatusSearchControllerApi - factory interface
 * @export
 */
export const BookStockStatusSearchControllerApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = BookStockStatusSearchControllerApiFp(configuration)
    return {
        /**
         * 
         * @param {BookStockStatusSearchControllerApiExecuteSearchBookstockstatusGetRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        executeSearchBookstockstatusGet(requestParameters: BookStockStatusSearchControllerApiExecuteSearchBookstockstatusGetRequest = {}, options?: RawAxiosRequestConfig): AxiosPromise<PagedModelEntityModelBookStockStatus> {
            return localVarFp.executeSearchBookstockstatusGet(requestParameters.id, requestParameters.name, requestParameters.page, requestParameters.size, requestParameters.sort, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * BookStockStatusSearchControllerApi - interface
 * @export
 * @interface BookStockStatusSearchControllerApi
 */
export interface BookStockStatusSearchControllerApiInterface {
    /**
     * 
     * @param {BookStockStatusSearchControllerApiExecuteSearchBookstockstatusGetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BookStockStatusSearchControllerApiInterface
     */
    executeSearchBookstockstatusGet(requestParameters?: BookStockStatusSearchControllerApiExecuteSearchBookstockstatusGetRequest, options?: RawAxiosRequestConfig): AxiosPromise<PagedModelEntityModelBookStockStatus>;

}

/**
 * Request parameters for executeSearchBookstockstatusGet operation in BookStockStatusSearchControllerApi.
 * @export
 * @interface BookStockStatusSearchControllerApiExecuteSearchBookstockstatusGetRequest
 */
export interface BookStockStatusSearchControllerApiExecuteSearchBookstockstatusGetRequest {
    /**
     * 
     * @type {number}
     * @memberof BookStockStatusSearchControllerApiExecuteSearchBookstockstatusGet
     */
    readonly id?: number

    /**
     * 
     * @type {string}
     * @memberof BookStockStatusSearchControllerApiExecuteSearchBookstockstatusGet
     */
    readonly name?: string

    /**
     * Zero-based page index (0..N)
     * @type {number}
     * @memberof BookStockStatusSearchControllerApiExecuteSearchBookstockstatusGet
     */
    readonly page?: number

    /**
     * The size of the page to be returned
     * @type {number}
     * @memberof BookStockStatusSearchControllerApiExecuteSearchBookstockstatusGet
     */
    readonly size?: number

    /**
     * Sorting criteria in the format: property,(asc|desc). Default sort order is ascending. Multiple sort criteria are supported.
     * @type {Array<string>}
     * @memberof BookStockStatusSearchControllerApiExecuteSearchBookstockstatusGet
     */
    readonly sort?: Array<string>
}

/**
 * BookStockStatusSearchControllerApi - object-oriented interface
 * @export
 * @class BookStockStatusSearchControllerApi
 * @extends {BaseAPI}
 */
export class BookStockStatusSearchControllerApi extends BaseAPI implements BookStockStatusSearchControllerApiInterface {
    /**
     * 
     * @param {BookStockStatusSearchControllerApiExecuteSearchBookstockstatusGetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BookStockStatusSearchControllerApi
     */
    public executeSearchBookstockstatusGet(requestParameters: BookStockStatusSearchControllerApiExecuteSearchBookstockstatusGetRequest = {}, options?: RawAxiosRequestConfig) {
        return BookStockStatusSearchControllerApiFp(this.configuration).executeSearchBookstockstatusGet(requestParameters.id, requestParameters.name, requestParameters.page, requestParameters.size, requestParameters.sort, options).then((request) => request(this.axios, this.basePath));
    }
}



/**
 * CustomerEntityControllerApi - axios parameter creator
 * @export
 */
export const CustomerEntityControllerApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * delete-customer
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteItemResourceCustomerDelete: async (id: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('deleteItemResourceCustomerDelete', 'id', id)
            const localVarPath = `/customers/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * get-customer
         * @param {number} [page] Zero-based page index (0..N)
         * @param {number} [size] The size of the page to be returned
         * @param {Array<string>} [sort] Sorting criteria in the format: property,(asc|desc). Default sort order is ascending. Multiple sort criteria are supported.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getCollectionResourceCustomerGet: async (page?: number, size?: number, sort?: Array<string>, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/customers`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }

            if (size !== undefined) {
                localVarQueryParameter['size'] = size;
            }

            if (sort) {
                localVarQueryParameter['sort'] = sort;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * get-customer
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getItemResourceCustomerGet: async (id: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('getItemResourceCustomerGet', 'id', id)
            const localVarPath = `/customers/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * patch-customer
         * @param {string} id 
         * @param {CustomerRequestBody} customerRequestBody 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        patchItemResourceCustomerPatch: async (id: string, customerRequestBody: CustomerRequestBody, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('patchItemResourceCustomerPatch', 'id', id)
            // verify required parameter 'customerRequestBody' is not null or undefined
            assertParamExists('patchItemResourceCustomerPatch', 'customerRequestBody', customerRequestBody)
            const localVarPath = `/customers/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(customerRequestBody, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * create-customer
         * @param {CustomerRequestBody} customerRequestBody 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postCollectionResourceCustomerPost: async (customerRequestBody: CustomerRequestBody, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'customerRequestBody' is not null or undefined
            assertParamExists('postCollectionResourceCustomerPost', 'customerRequestBody', customerRequestBody)
            const localVarPath = `/customers`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(customerRequestBody, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * update-customer
         * @param {string} id 
         * @param {CustomerRequestBody} customerRequestBody 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        putItemResourceCustomerPut: async (id: string, customerRequestBody: CustomerRequestBody, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('putItemResourceCustomerPut', 'id', id)
            // verify required parameter 'customerRequestBody' is not null or undefined
            assertParamExists('putItemResourceCustomerPut', 'customerRequestBody', customerRequestBody)
            const localVarPath = `/customers/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(customerRequestBody, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * CustomerEntityControllerApi - functional programming interface
 * @export
 */
export const CustomerEntityControllerApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = CustomerEntityControllerApiAxiosParamCreator(configuration)
    return {
        /**
         * delete-customer
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deleteItemResourceCustomerDelete(id: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.deleteItemResourceCustomerDelete(id, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['CustomerEntityControllerApi.deleteItemResourceCustomerDelete']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * get-customer
         * @param {number} [page] Zero-based page index (0..N)
         * @param {number} [size] The size of the page to be returned
         * @param {Array<string>} [sort] Sorting criteria in the format: property,(asc|desc). Default sort order is ascending. Multiple sort criteria are supported.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getCollectionResourceCustomerGet(page?: number, size?: number, sort?: Array<string>, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<PagedModelEntityModelCustomer>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getCollectionResourceCustomerGet(page, size, sort, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['CustomerEntityControllerApi.getCollectionResourceCustomerGet']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * get-customer
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getItemResourceCustomerGet(id: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<EntityModelCustomer>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getItemResourceCustomerGet(id, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['CustomerEntityControllerApi.getItemResourceCustomerGet']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * patch-customer
         * @param {string} id 
         * @param {CustomerRequestBody} customerRequestBody 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async patchItemResourceCustomerPatch(id: string, customerRequestBody: CustomerRequestBody, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<EntityModelCustomer>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.patchItemResourceCustomerPatch(id, customerRequestBody, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['CustomerEntityControllerApi.patchItemResourceCustomerPatch']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * create-customer
         * @param {CustomerRequestBody} customerRequestBody 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async postCollectionResourceCustomerPost(customerRequestBody: CustomerRequestBody, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<EntityModelCustomer>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.postCollectionResourceCustomerPost(customerRequestBody, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['CustomerEntityControllerApi.postCollectionResourceCustomerPost']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * update-customer
         * @param {string} id 
         * @param {CustomerRequestBody} customerRequestBody 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async putItemResourceCustomerPut(id: string, customerRequestBody: CustomerRequestBody, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<EntityModelCustomer>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.putItemResourceCustomerPut(id, customerRequestBody, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['CustomerEntityControllerApi.putItemResourceCustomerPut']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * CustomerEntityControllerApi - factory interface
 * @export
 */
export const CustomerEntityControllerApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = CustomerEntityControllerApiFp(configuration)
    return {
        /**
         * delete-customer
         * @param {CustomerEntityControllerApiDeleteItemResourceCustomerDeleteRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteItemResourceCustomerDelete(requestParameters: CustomerEntityControllerApiDeleteItemResourceCustomerDeleteRequest, options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.deleteItemResourceCustomerDelete(requestParameters.id, options).then((request) => request(axios, basePath));
        },
        /**
         * get-customer
         * @param {CustomerEntityControllerApiGetCollectionResourceCustomerGetRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getCollectionResourceCustomerGet(requestParameters: CustomerEntityControllerApiGetCollectionResourceCustomerGetRequest = {}, options?: RawAxiosRequestConfig): AxiosPromise<PagedModelEntityModelCustomer> {
            return localVarFp.getCollectionResourceCustomerGet(requestParameters.page, requestParameters.size, requestParameters.sort, options).then((request) => request(axios, basePath));
        },
        /**
         * get-customer
         * @param {CustomerEntityControllerApiGetItemResourceCustomerGetRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getItemResourceCustomerGet(requestParameters: CustomerEntityControllerApiGetItemResourceCustomerGetRequest, options?: RawAxiosRequestConfig): AxiosPromise<EntityModelCustomer> {
            return localVarFp.getItemResourceCustomerGet(requestParameters.id, options).then((request) => request(axios, basePath));
        },
        /**
         * patch-customer
         * @param {CustomerEntityControllerApiPatchItemResourceCustomerPatchRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        patchItemResourceCustomerPatch(requestParameters: CustomerEntityControllerApiPatchItemResourceCustomerPatchRequest, options?: RawAxiosRequestConfig): AxiosPromise<EntityModelCustomer> {
            return localVarFp.patchItemResourceCustomerPatch(requestParameters.id, requestParameters.customerRequestBody, options).then((request) => request(axios, basePath));
        },
        /**
         * create-customer
         * @param {CustomerEntityControllerApiPostCollectionResourceCustomerPostRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postCollectionResourceCustomerPost(requestParameters: CustomerEntityControllerApiPostCollectionResourceCustomerPostRequest, options?: RawAxiosRequestConfig): AxiosPromise<EntityModelCustomer> {
            return localVarFp.postCollectionResourceCustomerPost(requestParameters.customerRequestBody, options).then((request) => request(axios, basePath));
        },
        /**
         * update-customer
         * @param {CustomerEntityControllerApiPutItemResourceCustomerPutRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        putItemResourceCustomerPut(requestParameters: CustomerEntityControllerApiPutItemResourceCustomerPutRequest, options?: RawAxiosRequestConfig): AxiosPromise<EntityModelCustomer> {
            return localVarFp.putItemResourceCustomerPut(requestParameters.id, requestParameters.customerRequestBody, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * CustomerEntityControllerApi - interface
 * @export
 * @interface CustomerEntityControllerApi
 */
export interface CustomerEntityControllerApiInterface {
    /**
     * delete-customer
     * @param {CustomerEntityControllerApiDeleteItemResourceCustomerDeleteRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CustomerEntityControllerApiInterface
     */
    deleteItemResourceCustomerDelete(requestParameters: CustomerEntityControllerApiDeleteItemResourceCustomerDeleteRequest, options?: RawAxiosRequestConfig): AxiosPromise<void>;

    /**
     * get-customer
     * @param {CustomerEntityControllerApiGetCollectionResourceCustomerGetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CustomerEntityControllerApiInterface
     */
    getCollectionResourceCustomerGet(requestParameters?: CustomerEntityControllerApiGetCollectionResourceCustomerGetRequest, options?: RawAxiosRequestConfig): AxiosPromise<PagedModelEntityModelCustomer>;

    /**
     * get-customer
     * @param {CustomerEntityControllerApiGetItemResourceCustomerGetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CustomerEntityControllerApiInterface
     */
    getItemResourceCustomerGet(requestParameters: CustomerEntityControllerApiGetItemResourceCustomerGetRequest, options?: RawAxiosRequestConfig): AxiosPromise<EntityModelCustomer>;

    /**
     * patch-customer
     * @param {CustomerEntityControllerApiPatchItemResourceCustomerPatchRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CustomerEntityControllerApiInterface
     */
    patchItemResourceCustomerPatch(requestParameters: CustomerEntityControllerApiPatchItemResourceCustomerPatchRequest, options?: RawAxiosRequestConfig): AxiosPromise<EntityModelCustomer>;

    /**
     * create-customer
     * @param {CustomerEntityControllerApiPostCollectionResourceCustomerPostRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CustomerEntityControllerApiInterface
     */
    postCollectionResourceCustomerPost(requestParameters: CustomerEntityControllerApiPostCollectionResourceCustomerPostRequest, options?: RawAxiosRequestConfig): AxiosPromise<EntityModelCustomer>;

    /**
     * update-customer
     * @param {CustomerEntityControllerApiPutItemResourceCustomerPutRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CustomerEntityControllerApiInterface
     */
    putItemResourceCustomerPut(requestParameters: CustomerEntityControllerApiPutItemResourceCustomerPutRequest, options?: RawAxiosRequestConfig): AxiosPromise<EntityModelCustomer>;

}

/**
 * Request parameters for deleteItemResourceCustomerDelete operation in CustomerEntityControllerApi.
 * @export
 * @interface CustomerEntityControllerApiDeleteItemResourceCustomerDeleteRequest
 */
export interface CustomerEntityControllerApiDeleteItemResourceCustomerDeleteRequest {
    /**
     * 
     * @type {string}
     * @memberof CustomerEntityControllerApiDeleteItemResourceCustomerDelete
     */
    readonly id: string
}

/**
 * Request parameters for getCollectionResourceCustomerGet operation in CustomerEntityControllerApi.
 * @export
 * @interface CustomerEntityControllerApiGetCollectionResourceCustomerGetRequest
 */
export interface CustomerEntityControllerApiGetCollectionResourceCustomerGetRequest {
    /**
     * Zero-based page index (0..N)
     * @type {number}
     * @memberof CustomerEntityControllerApiGetCollectionResourceCustomerGet
     */
    readonly page?: number

    /**
     * The size of the page to be returned
     * @type {number}
     * @memberof CustomerEntityControllerApiGetCollectionResourceCustomerGet
     */
    readonly size?: number

    /**
     * Sorting criteria in the format: property,(asc|desc). Default sort order is ascending. Multiple sort criteria are supported.
     * @type {Array<string>}
     * @memberof CustomerEntityControllerApiGetCollectionResourceCustomerGet
     */
    readonly sort?: Array<string>
}

/**
 * Request parameters for getItemResourceCustomerGet operation in CustomerEntityControllerApi.
 * @export
 * @interface CustomerEntityControllerApiGetItemResourceCustomerGetRequest
 */
export interface CustomerEntityControllerApiGetItemResourceCustomerGetRequest {
    /**
     * 
     * @type {string}
     * @memberof CustomerEntityControllerApiGetItemResourceCustomerGet
     */
    readonly id: string
}

/**
 * Request parameters for patchItemResourceCustomerPatch operation in CustomerEntityControllerApi.
 * @export
 * @interface CustomerEntityControllerApiPatchItemResourceCustomerPatchRequest
 */
export interface CustomerEntityControllerApiPatchItemResourceCustomerPatchRequest {
    /**
     * 
     * @type {string}
     * @memberof CustomerEntityControllerApiPatchItemResourceCustomerPatch
     */
    readonly id: string

    /**
     * 
     * @type {CustomerRequestBody}
     * @memberof CustomerEntityControllerApiPatchItemResourceCustomerPatch
     */
    readonly customerRequestBody: CustomerRequestBody
}

/**
 * Request parameters for postCollectionResourceCustomerPost operation in CustomerEntityControllerApi.
 * @export
 * @interface CustomerEntityControllerApiPostCollectionResourceCustomerPostRequest
 */
export interface CustomerEntityControllerApiPostCollectionResourceCustomerPostRequest {
    /**
     * 
     * @type {CustomerRequestBody}
     * @memberof CustomerEntityControllerApiPostCollectionResourceCustomerPost
     */
    readonly customerRequestBody: CustomerRequestBody
}

/**
 * Request parameters for putItemResourceCustomerPut operation in CustomerEntityControllerApi.
 * @export
 * @interface CustomerEntityControllerApiPutItemResourceCustomerPutRequest
 */
export interface CustomerEntityControllerApiPutItemResourceCustomerPutRequest {
    /**
     * 
     * @type {string}
     * @memberof CustomerEntityControllerApiPutItemResourceCustomerPut
     */
    readonly id: string

    /**
     * 
     * @type {CustomerRequestBody}
     * @memberof CustomerEntityControllerApiPutItemResourceCustomerPut
     */
    readonly customerRequestBody: CustomerRequestBody
}

/**
 * CustomerEntityControllerApi - object-oriented interface
 * @export
 * @class CustomerEntityControllerApi
 * @extends {BaseAPI}
 */
export class CustomerEntityControllerApi extends BaseAPI implements CustomerEntityControllerApiInterface {
    /**
     * delete-customer
     * @param {CustomerEntityControllerApiDeleteItemResourceCustomerDeleteRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CustomerEntityControllerApi
     */
    public deleteItemResourceCustomerDelete(requestParameters: CustomerEntityControllerApiDeleteItemResourceCustomerDeleteRequest, options?: RawAxiosRequestConfig) {
        return CustomerEntityControllerApiFp(this.configuration).deleteItemResourceCustomerDelete(requestParameters.id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * get-customer
     * @param {CustomerEntityControllerApiGetCollectionResourceCustomerGetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CustomerEntityControllerApi
     */
    public getCollectionResourceCustomerGet(requestParameters: CustomerEntityControllerApiGetCollectionResourceCustomerGetRequest = {}, options?: RawAxiosRequestConfig) {
        return CustomerEntityControllerApiFp(this.configuration).getCollectionResourceCustomerGet(requestParameters.page, requestParameters.size, requestParameters.sort, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * get-customer
     * @param {CustomerEntityControllerApiGetItemResourceCustomerGetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CustomerEntityControllerApi
     */
    public getItemResourceCustomerGet(requestParameters: CustomerEntityControllerApiGetItemResourceCustomerGetRequest, options?: RawAxiosRequestConfig) {
        return CustomerEntityControllerApiFp(this.configuration).getItemResourceCustomerGet(requestParameters.id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * patch-customer
     * @param {CustomerEntityControllerApiPatchItemResourceCustomerPatchRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CustomerEntityControllerApi
     */
    public patchItemResourceCustomerPatch(requestParameters: CustomerEntityControllerApiPatchItemResourceCustomerPatchRequest, options?: RawAxiosRequestConfig) {
        return CustomerEntityControllerApiFp(this.configuration).patchItemResourceCustomerPatch(requestParameters.id, requestParameters.customerRequestBody, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * create-customer
     * @param {CustomerEntityControllerApiPostCollectionResourceCustomerPostRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CustomerEntityControllerApi
     */
    public postCollectionResourceCustomerPost(requestParameters: CustomerEntityControllerApiPostCollectionResourceCustomerPostRequest, options?: RawAxiosRequestConfig) {
        return CustomerEntityControllerApiFp(this.configuration).postCollectionResourceCustomerPost(requestParameters.customerRequestBody, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * update-customer
     * @param {CustomerEntityControllerApiPutItemResourceCustomerPutRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CustomerEntityControllerApi
     */
    public putItemResourceCustomerPut(requestParameters: CustomerEntityControllerApiPutItemResourceCustomerPutRequest, options?: RawAxiosRequestConfig) {
        return CustomerEntityControllerApiFp(this.configuration).putItemResourceCustomerPut(requestParameters.id, requestParameters.customerRequestBody, options).then((request) => request(this.axios, this.basePath));
    }
}



/**
 * CustomerSearchControllerApi - axios parameter creator
 * @export
 */
export const CustomerSearchControllerApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @param {number} [id] 
         * @param {string} [name] 
         * @param {string} [emailAddress] 
         * @param {number} [page] Zero-based page index (0..N)
         * @param {number} [size] The size of the page to be returned
         * @param {Array<string>} [sort] Sorting criteria in the format: property,(asc|desc). Default sort order is ascending. Multiple sort criteria are supported.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        executeSearchCustomerGet: async (id?: number, name?: string, emailAddress?: string, page?: number, size?: number, sort?: Array<string>, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/customers/search/findByComplexConditions`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (id !== undefined) {
                localVarQueryParameter['id'] = id;
            }

            if (name !== undefined) {
                localVarQueryParameter['name'] = name;
            }

            if (emailAddress !== undefined) {
                localVarQueryParameter['emailAddress'] = emailAddress;
            }

            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }

            if (size !== undefined) {
                localVarQueryParameter['size'] = size;
            }

            if (sort) {
                localVarQueryParameter['sort'] = sort;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * CustomerSearchControllerApi - functional programming interface
 * @export
 */
export const CustomerSearchControllerApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = CustomerSearchControllerApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @param {number} [id] 
         * @param {string} [name] 
         * @param {string} [emailAddress] 
         * @param {number} [page] Zero-based page index (0..N)
         * @param {number} [size] The size of the page to be returned
         * @param {Array<string>} [sort] Sorting criteria in the format: property,(asc|desc). Default sort order is ascending. Multiple sort criteria are supported.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async executeSearchCustomerGet(id?: number, name?: string, emailAddress?: string, page?: number, size?: number, sort?: Array<string>, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<PagedModelEntityModelCustomer>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.executeSearchCustomerGet(id, name, emailAddress, page, size, sort, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['CustomerSearchControllerApi.executeSearchCustomerGet']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * CustomerSearchControllerApi - factory interface
 * @export
 */
export const CustomerSearchControllerApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = CustomerSearchControllerApiFp(configuration)
    return {
        /**
         * 
         * @param {CustomerSearchControllerApiExecuteSearchCustomerGetRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        executeSearchCustomerGet(requestParameters: CustomerSearchControllerApiExecuteSearchCustomerGetRequest = {}, options?: RawAxiosRequestConfig): AxiosPromise<PagedModelEntityModelCustomer> {
            return localVarFp.executeSearchCustomerGet(requestParameters.id, requestParameters.name, requestParameters.emailAddress, requestParameters.page, requestParameters.size, requestParameters.sort, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * CustomerSearchControllerApi - interface
 * @export
 * @interface CustomerSearchControllerApi
 */
export interface CustomerSearchControllerApiInterface {
    /**
     * 
     * @param {CustomerSearchControllerApiExecuteSearchCustomerGetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CustomerSearchControllerApiInterface
     */
    executeSearchCustomerGet(requestParameters?: CustomerSearchControllerApiExecuteSearchCustomerGetRequest, options?: RawAxiosRequestConfig): AxiosPromise<PagedModelEntityModelCustomer>;

}

/**
 * Request parameters for executeSearchCustomerGet operation in CustomerSearchControllerApi.
 * @export
 * @interface CustomerSearchControllerApiExecuteSearchCustomerGetRequest
 */
export interface CustomerSearchControllerApiExecuteSearchCustomerGetRequest {
    /**
     * 
     * @type {number}
     * @memberof CustomerSearchControllerApiExecuteSearchCustomerGet
     */
    readonly id?: number

    /**
     * 
     * @type {string}
     * @memberof CustomerSearchControllerApiExecuteSearchCustomerGet
     */
    readonly name?: string

    /**
     * 
     * @type {string}
     * @memberof CustomerSearchControllerApiExecuteSearchCustomerGet
     */
    readonly emailAddress?: string

    /**
     * Zero-based page index (0..N)
     * @type {number}
     * @memberof CustomerSearchControllerApiExecuteSearchCustomerGet
     */
    readonly page?: number

    /**
     * The size of the page to be returned
     * @type {number}
     * @memberof CustomerSearchControllerApiExecuteSearchCustomerGet
     */
    readonly size?: number

    /**
     * Sorting criteria in the format: property,(asc|desc). Default sort order is ascending. Multiple sort criteria are supported.
     * @type {Array<string>}
     * @memberof CustomerSearchControllerApiExecuteSearchCustomerGet
     */
    readonly sort?: Array<string>
}

/**
 * CustomerSearchControllerApi - object-oriented interface
 * @export
 * @class CustomerSearchControllerApi
 * @extends {BaseAPI}
 */
export class CustomerSearchControllerApi extends BaseAPI implements CustomerSearchControllerApiInterface {
    /**
     * 
     * @param {CustomerSearchControllerApiExecuteSearchCustomerGetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CustomerSearchControllerApi
     */
    public executeSearchCustomerGet(requestParameters: CustomerSearchControllerApiExecuteSearchCustomerGetRequest = {}, options?: RawAxiosRequestConfig) {
        return CustomerSearchControllerApiFp(this.configuration).executeSearchCustomerGet(requestParameters.id, requestParameters.name, requestParameters.emailAddress, requestParameters.page, requestParameters.size, requestParameters.sort, options).then((request) => request(this.axios, this.basePath));
    }
}



/**
 * EchoControllerApi - axios parameter creator
 * @export
 */
export const EchoControllerApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        hello: async (options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/hello`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} [id] 
         * @param {string} [name] 
         * @param {string} [publicationDateBegin] 
         * @param {string} [publicationDateEnd] 
         * @param {string} [ndcCategoryName] 
         * @param {number} [page] Zero-based page index (0..N)
         * @param {number} [size] The size of the page to be returned
         * @param {Array<string>} [sort] Sorting criteria in the format: property,(asc|desc). Default sort order is ascending. Multiple sort criteria are supported.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        searchBookMasters: async (id?: number, name?: string, publicationDateBegin?: string, publicationDateEnd?: string, ndcCategoryName?: string, page?: number, size?: number, sort?: Array<string>, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/searchBookMasters`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (id !== undefined) {
                localVarQueryParameter['id'] = id;
            }

            if (name !== undefined) {
                localVarQueryParameter['name'] = name;
            }

            if (publicationDateBegin !== undefined) {
                localVarQueryParameter['publicationDateBegin'] = (publicationDateBegin as any instanceof Date) ?
                    (publicationDateBegin as any).toISOString().substring(0,10) :
                    publicationDateBegin;
            }

            if (publicationDateEnd !== undefined) {
                localVarQueryParameter['publicationDateEnd'] = (publicationDateEnd as any instanceof Date) ?
                    (publicationDateEnd as any).toISOString().substring(0,10) :
                    publicationDateEnd;
            }

            if (ndcCategoryName !== undefined) {
                localVarQueryParameter['ndcCategoryName'] = ndcCategoryName;
            }

            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }

            if (size !== undefined) {
                localVarQueryParameter['size'] = size;
            }

            if (sort) {
                localVarQueryParameter['sort'] = sort;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} [id] 
         * @param {string} [bookName] 
         * @param {string} [customerName] 
         * @param {string} [memo] 
         * @param {string} [lendStartDateBegin] 
         * @param {string} [lendStartDateEnd] 
         * @param {string} [lendDeadlineDateBegin] 
         * @param {string} [lendDeadlineDateEnd] 
         * @param {string} [returnDateBegin] 
         * @param {string} [returnDateEnd] 
         * @param {number} [page] Zero-based page index (0..N)
         * @param {number} [size] The size of the page to be returned
         * @param {Array<string>} [sort] Sorting criteria in the format: property,(asc|desc). Default sort order is ascending. Multiple sort criteria are supported.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        searchLendingSet: async (id?: number, bookName?: string, customerName?: string, memo?: string, lendStartDateBegin?: string, lendStartDateEnd?: string, lendDeadlineDateBegin?: string, lendDeadlineDateEnd?: string, returnDateBegin?: string, returnDateEnd?: string, page?: number, size?: number, sort?: Array<string>, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/searchLendingSet`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (id !== undefined) {
                localVarQueryParameter['id'] = id;
            }

            if (bookName !== undefined) {
                localVarQueryParameter['bookName'] = bookName;
            }

            if (customerName !== undefined) {
                localVarQueryParameter['customerName'] = customerName;
            }

            if (memo !== undefined) {
                localVarQueryParameter['memo'] = memo;
            }

            if (lendStartDateBegin !== undefined) {
                localVarQueryParameter['lendStartDateBegin'] = (lendStartDateBegin as any instanceof Date) ?
                    (lendStartDateBegin as any).toISOString().substring(0,10) :
                    lendStartDateBegin;
            }

            if (lendStartDateEnd !== undefined) {
                localVarQueryParameter['lendStartDateEnd'] = (lendStartDateEnd as any instanceof Date) ?
                    (lendStartDateEnd as any).toISOString().substring(0,10) :
                    lendStartDateEnd;
            }

            if (lendDeadlineDateBegin !== undefined) {
                localVarQueryParameter['lendDeadlineDateBegin'] = (lendDeadlineDateBegin as any instanceof Date) ?
                    (lendDeadlineDateBegin as any).toISOString().substring(0,10) :
                    lendDeadlineDateBegin;
            }

            if (lendDeadlineDateEnd !== undefined) {
                localVarQueryParameter['lendDeadlineDateEnd'] = (lendDeadlineDateEnd as any instanceof Date) ?
                    (lendDeadlineDateEnd as any).toISOString().substring(0,10) :
                    lendDeadlineDateEnd;
            }

            if (returnDateBegin !== undefined) {
                localVarQueryParameter['returnDateBegin'] = (returnDateBegin as any instanceof Date) ?
                    (returnDateBegin as any).toISOString().substring(0,10) :
                    returnDateBegin;
            }

            if (returnDateEnd !== undefined) {
                localVarQueryParameter['returnDateEnd'] = (returnDateEnd as any instanceof Date) ?
                    (returnDateEnd as any).toISOString().substring(0,10) :
                    returnDateEnd;
            }

            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }

            if (size !== undefined) {
                localVarQueryParameter['size'] = size;
            }

            if (sort) {
                localVarQueryParameter['sort'] = sort;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * EchoControllerApi - functional programming interface
 * @export
 */
export const EchoControllerApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = EchoControllerApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async hello(options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<string>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.hello(options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['EchoControllerApi.hello']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {number} [id] 
         * @param {string} [name] 
         * @param {string} [publicationDateBegin] 
         * @param {string} [publicationDateEnd] 
         * @param {string} [ndcCategoryName] 
         * @param {number} [page] Zero-based page index (0..N)
         * @param {number} [size] The size of the page to be returned
         * @param {Array<string>} [sort] Sorting criteria in the format: property,(asc|desc). Default sort order is ascending. Multiple sort criteria are supported.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async searchBookMasters(id?: number, name?: string, publicationDateBegin?: string, publicationDateEnd?: string, ndcCategoryName?: string, page?: number, size?: number, sort?: Array<string>, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<PageMapStringObject>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.searchBookMasters(id, name, publicationDateBegin, publicationDateEnd, ndcCategoryName, page, size, sort, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['EchoControllerApi.searchBookMasters']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {number} [id] 
         * @param {string} [bookName] 
         * @param {string} [customerName] 
         * @param {string} [memo] 
         * @param {string} [lendStartDateBegin] 
         * @param {string} [lendStartDateEnd] 
         * @param {string} [lendDeadlineDateBegin] 
         * @param {string} [lendDeadlineDateEnd] 
         * @param {string} [returnDateBegin] 
         * @param {string} [returnDateEnd] 
         * @param {number} [page] Zero-based page index (0..N)
         * @param {number} [size] The size of the page to be returned
         * @param {Array<string>} [sort] Sorting criteria in the format: property,(asc|desc). Default sort order is ascending. Multiple sort criteria are supported.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async searchLendingSet(id?: number, bookName?: string, customerName?: string, memo?: string, lendStartDateBegin?: string, lendStartDateEnd?: string, lendDeadlineDateBegin?: string, lendDeadlineDateEnd?: string, returnDateBegin?: string, returnDateEnd?: string, page?: number, size?: number, sort?: Array<string>, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<PageMapStringObject>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.searchLendingSet(id, bookName, customerName, memo, lendStartDateBegin, lendStartDateEnd, lendDeadlineDateBegin, lendDeadlineDateEnd, returnDateBegin, returnDateEnd, page, size, sort, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['EchoControllerApi.searchLendingSet']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * EchoControllerApi - factory interface
 * @export
 */
export const EchoControllerApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = EchoControllerApiFp(configuration)
    return {
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        hello(options?: RawAxiosRequestConfig): AxiosPromise<string> {
            return localVarFp.hello(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {EchoControllerApiSearchBookMastersRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        searchBookMasters(requestParameters: EchoControllerApiSearchBookMastersRequest = {}, options?: RawAxiosRequestConfig): AxiosPromise<PageMapStringObject> {
            return localVarFp.searchBookMasters(requestParameters.id, requestParameters.name, requestParameters.publicationDateBegin, requestParameters.publicationDateEnd, requestParameters.ndcCategoryName, requestParameters.page, requestParameters.size, requestParameters.sort, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {EchoControllerApiSearchLendingSetRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        searchLendingSet(requestParameters: EchoControllerApiSearchLendingSetRequest = {}, options?: RawAxiosRequestConfig): AxiosPromise<PageMapStringObject> {
            return localVarFp.searchLendingSet(requestParameters.id, requestParameters.bookName, requestParameters.customerName, requestParameters.memo, requestParameters.lendStartDateBegin, requestParameters.lendStartDateEnd, requestParameters.lendDeadlineDateBegin, requestParameters.lendDeadlineDateEnd, requestParameters.returnDateBegin, requestParameters.returnDateEnd, requestParameters.page, requestParameters.size, requestParameters.sort, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * EchoControllerApi - interface
 * @export
 * @interface EchoControllerApi
 */
export interface EchoControllerApiInterface {
    /**
     * 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EchoControllerApiInterface
     */
    hello(options?: RawAxiosRequestConfig): AxiosPromise<string>;

    /**
     * 
     * @param {EchoControllerApiSearchBookMastersRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EchoControllerApiInterface
     */
    searchBookMasters(requestParameters?: EchoControllerApiSearchBookMastersRequest, options?: RawAxiosRequestConfig): AxiosPromise<PageMapStringObject>;

    /**
     * 
     * @param {EchoControllerApiSearchLendingSetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EchoControllerApiInterface
     */
    searchLendingSet(requestParameters?: EchoControllerApiSearchLendingSetRequest, options?: RawAxiosRequestConfig): AxiosPromise<PageMapStringObject>;

}

/**
 * Request parameters for searchBookMasters operation in EchoControllerApi.
 * @export
 * @interface EchoControllerApiSearchBookMastersRequest
 */
export interface EchoControllerApiSearchBookMastersRequest {
    /**
     * 
     * @type {number}
     * @memberof EchoControllerApiSearchBookMasters
     */
    readonly id?: number

    /**
     * 
     * @type {string}
     * @memberof EchoControllerApiSearchBookMasters
     */
    readonly name?: string

    /**
     * 
     * @type {string}
     * @memberof EchoControllerApiSearchBookMasters
     */
    readonly publicationDateBegin?: string

    /**
     * 
     * @type {string}
     * @memberof EchoControllerApiSearchBookMasters
     */
    readonly publicationDateEnd?: string

    /**
     * 
     * @type {string}
     * @memberof EchoControllerApiSearchBookMasters
     */
    readonly ndcCategoryName?: string

    /**
     * Zero-based page index (0..N)
     * @type {number}
     * @memberof EchoControllerApiSearchBookMasters
     */
    readonly page?: number

    /**
     * The size of the page to be returned
     * @type {number}
     * @memberof EchoControllerApiSearchBookMasters
     */
    readonly size?: number

    /**
     * Sorting criteria in the format: property,(asc|desc). Default sort order is ascending. Multiple sort criteria are supported.
     * @type {Array<string>}
     * @memberof EchoControllerApiSearchBookMasters
     */
    readonly sort?: Array<string>
}

/**
 * Request parameters for searchLendingSet operation in EchoControllerApi.
 * @export
 * @interface EchoControllerApiSearchLendingSetRequest
 */
export interface EchoControllerApiSearchLendingSetRequest {
    /**
     * 
     * @type {number}
     * @memberof EchoControllerApiSearchLendingSet
     */
    readonly id?: number

    /**
     * 
     * @type {string}
     * @memberof EchoControllerApiSearchLendingSet
     */
    readonly bookName?: string

    /**
     * 
     * @type {string}
     * @memberof EchoControllerApiSearchLendingSet
     */
    readonly customerName?: string

    /**
     * 
     * @type {string}
     * @memberof EchoControllerApiSearchLendingSet
     */
    readonly memo?: string

    /**
     * 
     * @type {string}
     * @memberof EchoControllerApiSearchLendingSet
     */
    readonly lendStartDateBegin?: string

    /**
     * 
     * @type {string}
     * @memberof EchoControllerApiSearchLendingSet
     */
    readonly lendStartDateEnd?: string

    /**
     * 
     * @type {string}
     * @memberof EchoControllerApiSearchLendingSet
     */
    readonly lendDeadlineDateBegin?: string

    /**
     * 
     * @type {string}
     * @memberof EchoControllerApiSearchLendingSet
     */
    readonly lendDeadlineDateEnd?: string

    /**
     * 
     * @type {string}
     * @memberof EchoControllerApiSearchLendingSet
     */
    readonly returnDateBegin?: string

    /**
     * 
     * @type {string}
     * @memberof EchoControllerApiSearchLendingSet
     */
    readonly returnDateEnd?: string

    /**
     * Zero-based page index (0..N)
     * @type {number}
     * @memberof EchoControllerApiSearchLendingSet
     */
    readonly page?: number

    /**
     * The size of the page to be returned
     * @type {number}
     * @memberof EchoControllerApiSearchLendingSet
     */
    readonly size?: number

    /**
     * Sorting criteria in the format: property,(asc|desc). Default sort order is ascending. Multiple sort criteria are supported.
     * @type {Array<string>}
     * @memberof EchoControllerApiSearchLendingSet
     */
    readonly sort?: Array<string>
}

/**
 * EchoControllerApi - object-oriented interface
 * @export
 * @class EchoControllerApi
 * @extends {BaseAPI}
 */
export class EchoControllerApi extends BaseAPI implements EchoControllerApiInterface {
    /**
     * 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EchoControllerApi
     */
    public hello(options?: RawAxiosRequestConfig) {
        return EchoControllerApiFp(this.configuration).hello(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {EchoControllerApiSearchBookMastersRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EchoControllerApi
     */
    public searchBookMasters(requestParameters: EchoControllerApiSearchBookMastersRequest = {}, options?: RawAxiosRequestConfig) {
        return EchoControllerApiFp(this.configuration).searchBookMasters(requestParameters.id, requestParameters.name, requestParameters.publicationDateBegin, requestParameters.publicationDateEnd, requestParameters.ndcCategoryName, requestParameters.page, requestParameters.size, requestParameters.sort, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {EchoControllerApiSearchLendingSetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EchoControllerApi
     */
    public searchLendingSet(requestParameters: EchoControllerApiSearchLendingSetRequest = {}, options?: RawAxiosRequestConfig) {
        return EchoControllerApiFp(this.configuration).searchLendingSet(requestParameters.id, requestParameters.bookName, requestParameters.customerName, requestParameters.memo, requestParameters.lendStartDateBegin, requestParameters.lendStartDateEnd, requestParameters.lendDeadlineDateBegin, requestParameters.lendDeadlineDateEnd, requestParameters.returnDateBegin, requestParameters.returnDateEnd, requestParameters.page, requestParameters.size, requestParameters.sort, options).then((request) => request(this.axios, this.basePath));
    }
}



/**
 * LendingSetEntityControllerApi - axios parameter creator
 * @export
 */
export const LendingSetEntityControllerApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * delete-lendingset
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteItemResourceLendingsetDelete: async (id: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('deleteItemResourceLendingsetDelete', 'id', id)
            const localVarPath = `/lendingSets/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * get-lendingset
         * @param {number} [page] Zero-based page index (0..N)
         * @param {number} [size] The size of the page to be returned
         * @param {Array<string>} [sort] Sorting criteria in the format: property,(asc|desc). Default sort order is ascending. Multiple sort criteria are supported.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getCollectionResourceLendingsetGet: async (page?: number, size?: number, sort?: Array<string>, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/lendingSets`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }

            if (size !== undefined) {
                localVarQueryParameter['size'] = size;
            }

            if (sort) {
                localVarQueryParameter['sort'] = sort;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * get-lendingset
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getItemResourceLendingsetGet: async (id: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('getItemResourceLendingsetGet', 'id', id)
            const localVarPath = `/lendingSets/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * patch-lendingset
         * @param {string} id 
         * @param {LendingSetRequestBody} lendingSetRequestBody 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        patchItemResourceLendingsetPatch: async (id: string, lendingSetRequestBody: LendingSetRequestBody, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('patchItemResourceLendingsetPatch', 'id', id)
            // verify required parameter 'lendingSetRequestBody' is not null or undefined
            assertParamExists('patchItemResourceLendingsetPatch', 'lendingSetRequestBody', lendingSetRequestBody)
            const localVarPath = `/lendingSets/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(lendingSetRequestBody, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * create-lendingset
         * @param {LendingSetRequestBody} lendingSetRequestBody 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postCollectionResourceLendingsetPost: async (lendingSetRequestBody: LendingSetRequestBody, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'lendingSetRequestBody' is not null or undefined
            assertParamExists('postCollectionResourceLendingsetPost', 'lendingSetRequestBody', lendingSetRequestBody)
            const localVarPath = `/lendingSets`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(lendingSetRequestBody, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * update-lendingset
         * @param {string} id 
         * @param {LendingSetRequestBody} lendingSetRequestBody 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        putItemResourceLendingsetPut: async (id: string, lendingSetRequestBody: LendingSetRequestBody, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('putItemResourceLendingsetPut', 'id', id)
            // verify required parameter 'lendingSetRequestBody' is not null or undefined
            assertParamExists('putItemResourceLendingsetPut', 'lendingSetRequestBody', lendingSetRequestBody)
            const localVarPath = `/lendingSets/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(lendingSetRequestBody, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * LendingSetEntityControllerApi - functional programming interface
 * @export
 */
export const LendingSetEntityControllerApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = LendingSetEntityControllerApiAxiosParamCreator(configuration)
    return {
        /**
         * delete-lendingset
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deleteItemResourceLendingsetDelete(id: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.deleteItemResourceLendingsetDelete(id, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['LendingSetEntityControllerApi.deleteItemResourceLendingsetDelete']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * get-lendingset
         * @param {number} [page] Zero-based page index (0..N)
         * @param {number} [size] The size of the page to be returned
         * @param {Array<string>} [sort] Sorting criteria in the format: property,(asc|desc). Default sort order is ascending. Multiple sort criteria are supported.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getCollectionResourceLendingsetGet(page?: number, size?: number, sort?: Array<string>, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<PagedModelEntityModelLendingSet>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getCollectionResourceLendingsetGet(page, size, sort, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['LendingSetEntityControllerApi.getCollectionResourceLendingsetGet']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * get-lendingset
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getItemResourceLendingsetGet(id: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<EntityModelLendingSet>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getItemResourceLendingsetGet(id, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['LendingSetEntityControllerApi.getItemResourceLendingsetGet']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * patch-lendingset
         * @param {string} id 
         * @param {LendingSetRequestBody} lendingSetRequestBody 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async patchItemResourceLendingsetPatch(id: string, lendingSetRequestBody: LendingSetRequestBody, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<EntityModelLendingSet>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.patchItemResourceLendingsetPatch(id, lendingSetRequestBody, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['LendingSetEntityControllerApi.patchItemResourceLendingsetPatch']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * create-lendingset
         * @param {LendingSetRequestBody} lendingSetRequestBody 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async postCollectionResourceLendingsetPost(lendingSetRequestBody: LendingSetRequestBody, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<EntityModelLendingSet>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.postCollectionResourceLendingsetPost(lendingSetRequestBody, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['LendingSetEntityControllerApi.postCollectionResourceLendingsetPost']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * update-lendingset
         * @param {string} id 
         * @param {LendingSetRequestBody} lendingSetRequestBody 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async putItemResourceLendingsetPut(id: string, lendingSetRequestBody: LendingSetRequestBody, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<EntityModelLendingSet>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.putItemResourceLendingsetPut(id, lendingSetRequestBody, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['LendingSetEntityControllerApi.putItemResourceLendingsetPut']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * LendingSetEntityControllerApi - factory interface
 * @export
 */
export const LendingSetEntityControllerApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = LendingSetEntityControllerApiFp(configuration)
    return {
        /**
         * delete-lendingset
         * @param {LendingSetEntityControllerApiDeleteItemResourceLendingsetDeleteRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteItemResourceLendingsetDelete(requestParameters: LendingSetEntityControllerApiDeleteItemResourceLendingsetDeleteRequest, options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.deleteItemResourceLendingsetDelete(requestParameters.id, options).then((request) => request(axios, basePath));
        },
        /**
         * get-lendingset
         * @param {LendingSetEntityControllerApiGetCollectionResourceLendingsetGetRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getCollectionResourceLendingsetGet(requestParameters: LendingSetEntityControllerApiGetCollectionResourceLendingsetGetRequest = {}, options?: RawAxiosRequestConfig): AxiosPromise<PagedModelEntityModelLendingSet> {
            return localVarFp.getCollectionResourceLendingsetGet(requestParameters.page, requestParameters.size, requestParameters.sort, options).then((request) => request(axios, basePath));
        },
        /**
         * get-lendingset
         * @param {LendingSetEntityControllerApiGetItemResourceLendingsetGetRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getItemResourceLendingsetGet(requestParameters: LendingSetEntityControllerApiGetItemResourceLendingsetGetRequest, options?: RawAxiosRequestConfig): AxiosPromise<EntityModelLendingSet> {
            return localVarFp.getItemResourceLendingsetGet(requestParameters.id, options).then((request) => request(axios, basePath));
        },
        /**
         * patch-lendingset
         * @param {LendingSetEntityControllerApiPatchItemResourceLendingsetPatchRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        patchItemResourceLendingsetPatch(requestParameters: LendingSetEntityControllerApiPatchItemResourceLendingsetPatchRequest, options?: RawAxiosRequestConfig): AxiosPromise<EntityModelLendingSet> {
            return localVarFp.patchItemResourceLendingsetPatch(requestParameters.id, requestParameters.lendingSetRequestBody, options).then((request) => request(axios, basePath));
        },
        /**
         * create-lendingset
         * @param {LendingSetEntityControllerApiPostCollectionResourceLendingsetPostRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postCollectionResourceLendingsetPost(requestParameters: LendingSetEntityControllerApiPostCollectionResourceLendingsetPostRequest, options?: RawAxiosRequestConfig): AxiosPromise<EntityModelLendingSet> {
            return localVarFp.postCollectionResourceLendingsetPost(requestParameters.lendingSetRequestBody, options).then((request) => request(axios, basePath));
        },
        /**
         * update-lendingset
         * @param {LendingSetEntityControllerApiPutItemResourceLendingsetPutRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        putItemResourceLendingsetPut(requestParameters: LendingSetEntityControllerApiPutItemResourceLendingsetPutRequest, options?: RawAxiosRequestConfig): AxiosPromise<EntityModelLendingSet> {
            return localVarFp.putItemResourceLendingsetPut(requestParameters.id, requestParameters.lendingSetRequestBody, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * LendingSetEntityControllerApi - interface
 * @export
 * @interface LendingSetEntityControllerApi
 */
export interface LendingSetEntityControllerApiInterface {
    /**
     * delete-lendingset
     * @param {LendingSetEntityControllerApiDeleteItemResourceLendingsetDeleteRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof LendingSetEntityControllerApiInterface
     */
    deleteItemResourceLendingsetDelete(requestParameters: LendingSetEntityControllerApiDeleteItemResourceLendingsetDeleteRequest, options?: RawAxiosRequestConfig): AxiosPromise<void>;

    /**
     * get-lendingset
     * @param {LendingSetEntityControllerApiGetCollectionResourceLendingsetGetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof LendingSetEntityControllerApiInterface
     */
    getCollectionResourceLendingsetGet(requestParameters?: LendingSetEntityControllerApiGetCollectionResourceLendingsetGetRequest, options?: RawAxiosRequestConfig): AxiosPromise<PagedModelEntityModelLendingSet>;

    /**
     * get-lendingset
     * @param {LendingSetEntityControllerApiGetItemResourceLendingsetGetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof LendingSetEntityControllerApiInterface
     */
    getItemResourceLendingsetGet(requestParameters: LendingSetEntityControllerApiGetItemResourceLendingsetGetRequest, options?: RawAxiosRequestConfig): AxiosPromise<EntityModelLendingSet>;

    /**
     * patch-lendingset
     * @param {LendingSetEntityControllerApiPatchItemResourceLendingsetPatchRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof LendingSetEntityControllerApiInterface
     */
    patchItemResourceLendingsetPatch(requestParameters: LendingSetEntityControllerApiPatchItemResourceLendingsetPatchRequest, options?: RawAxiosRequestConfig): AxiosPromise<EntityModelLendingSet>;

    /**
     * create-lendingset
     * @param {LendingSetEntityControllerApiPostCollectionResourceLendingsetPostRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof LendingSetEntityControllerApiInterface
     */
    postCollectionResourceLendingsetPost(requestParameters: LendingSetEntityControllerApiPostCollectionResourceLendingsetPostRequest, options?: RawAxiosRequestConfig): AxiosPromise<EntityModelLendingSet>;

    /**
     * update-lendingset
     * @param {LendingSetEntityControllerApiPutItemResourceLendingsetPutRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof LendingSetEntityControllerApiInterface
     */
    putItemResourceLendingsetPut(requestParameters: LendingSetEntityControllerApiPutItemResourceLendingsetPutRequest, options?: RawAxiosRequestConfig): AxiosPromise<EntityModelLendingSet>;

}

/**
 * Request parameters for deleteItemResourceLendingsetDelete operation in LendingSetEntityControllerApi.
 * @export
 * @interface LendingSetEntityControllerApiDeleteItemResourceLendingsetDeleteRequest
 */
export interface LendingSetEntityControllerApiDeleteItemResourceLendingsetDeleteRequest {
    /**
     * 
     * @type {string}
     * @memberof LendingSetEntityControllerApiDeleteItemResourceLendingsetDelete
     */
    readonly id: string
}

/**
 * Request parameters for getCollectionResourceLendingsetGet operation in LendingSetEntityControllerApi.
 * @export
 * @interface LendingSetEntityControllerApiGetCollectionResourceLendingsetGetRequest
 */
export interface LendingSetEntityControllerApiGetCollectionResourceLendingsetGetRequest {
    /**
     * Zero-based page index (0..N)
     * @type {number}
     * @memberof LendingSetEntityControllerApiGetCollectionResourceLendingsetGet
     */
    readonly page?: number

    /**
     * The size of the page to be returned
     * @type {number}
     * @memberof LendingSetEntityControllerApiGetCollectionResourceLendingsetGet
     */
    readonly size?: number

    /**
     * Sorting criteria in the format: property,(asc|desc). Default sort order is ascending. Multiple sort criteria are supported.
     * @type {Array<string>}
     * @memberof LendingSetEntityControllerApiGetCollectionResourceLendingsetGet
     */
    readonly sort?: Array<string>
}

/**
 * Request parameters for getItemResourceLendingsetGet operation in LendingSetEntityControllerApi.
 * @export
 * @interface LendingSetEntityControllerApiGetItemResourceLendingsetGetRequest
 */
export interface LendingSetEntityControllerApiGetItemResourceLendingsetGetRequest {
    /**
     * 
     * @type {string}
     * @memberof LendingSetEntityControllerApiGetItemResourceLendingsetGet
     */
    readonly id: string
}

/**
 * Request parameters for patchItemResourceLendingsetPatch operation in LendingSetEntityControllerApi.
 * @export
 * @interface LendingSetEntityControllerApiPatchItemResourceLendingsetPatchRequest
 */
export interface LendingSetEntityControllerApiPatchItemResourceLendingsetPatchRequest {
    /**
     * 
     * @type {string}
     * @memberof LendingSetEntityControllerApiPatchItemResourceLendingsetPatch
     */
    readonly id: string

    /**
     * 
     * @type {LendingSetRequestBody}
     * @memberof LendingSetEntityControllerApiPatchItemResourceLendingsetPatch
     */
    readonly lendingSetRequestBody: LendingSetRequestBody
}

/**
 * Request parameters for postCollectionResourceLendingsetPost operation in LendingSetEntityControllerApi.
 * @export
 * @interface LendingSetEntityControllerApiPostCollectionResourceLendingsetPostRequest
 */
export interface LendingSetEntityControllerApiPostCollectionResourceLendingsetPostRequest {
    /**
     * 
     * @type {LendingSetRequestBody}
     * @memberof LendingSetEntityControllerApiPostCollectionResourceLendingsetPost
     */
    readonly lendingSetRequestBody: LendingSetRequestBody
}

/**
 * Request parameters for putItemResourceLendingsetPut operation in LendingSetEntityControllerApi.
 * @export
 * @interface LendingSetEntityControllerApiPutItemResourceLendingsetPutRequest
 */
export interface LendingSetEntityControllerApiPutItemResourceLendingsetPutRequest {
    /**
     * 
     * @type {string}
     * @memberof LendingSetEntityControllerApiPutItemResourceLendingsetPut
     */
    readonly id: string

    /**
     * 
     * @type {LendingSetRequestBody}
     * @memberof LendingSetEntityControllerApiPutItemResourceLendingsetPut
     */
    readonly lendingSetRequestBody: LendingSetRequestBody
}

/**
 * LendingSetEntityControllerApi - object-oriented interface
 * @export
 * @class LendingSetEntityControllerApi
 * @extends {BaseAPI}
 */
export class LendingSetEntityControllerApi extends BaseAPI implements LendingSetEntityControllerApiInterface {
    /**
     * delete-lendingset
     * @param {LendingSetEntityControllerApiDeleteItemResourceLendingsetDeleteRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof LendingSetEntityControllerApi
     */
    public deleteItemResourceLendingsetDelete(requestParameters: LendingSetEntityControllerApiDeleteItemResourceLendingsetDeleteRequest, options?: RawAxiosRequestConfig) {
        return LendingSetEntityControllerApiFp(this.configuration).deleteItemResourceLendingsetDelete(requestParameters.id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * get-lendingset
     * @param {LendingSetEntityControllerApiGetCollectionResourceLendingsetGetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof LendingSetEntityControllerApi
     */
    public getCollectionResourceLendingsetGet(requestParameters: LendingSetEntityControllerApiGetCollectionResourceLendingsetGetRequest = {}, options?: RawAxiosRequestConfig) {
        return LendingSetEntityControllerApiFp(this.configuration).getCollectionResourceLendingsetGet(requestParameters.page, requestParameters.size, requestParameters.sort, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * get-lendingset
     * @param {LendingSetEntityControllerApiGetItemResourceLendingsetGetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof LendingSetEntityControllerApi
     */
    public getItemResourceLendingsetGet(requestParameters: LendingSetEntityControllerApiGetItemResourceLendingsetGetRequest, options?: RawAxiosRequestConfig) {
        return LendingSetEntityControllerApiFp(this.configuration).getItemResourceLendingsetGet(requestParameters.id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * patch-lendingset
     * @param {LendingSetEntityControllerApiPatchItemResourceLendingsetPatchRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof LendingSetEntityControllerApi
     */
    public patchItemResourceLendingsetPatch(requestParameters: LendingSetEntityControllerApiPatchItemResourceLendingsetPatchRequest, options?: RawAxiosRequestConfig) {
        return LendingSetEntityControllerApiFp(this.configuration).patchItemResourceLendingsetPatch(requestParameters.id, requestParameters.lendingSetRequestBody, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * create-lendingset
     * @param {LendingSetEntityControllerApiPostCollectionResourceLendingsetPostRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof LendingSetEntityControllerApi
     */
    public postCollectionResourceLendingsetPost(requestParameters: LendingSetEntityControllerApiPostCollectionResourceLendingsetPostRequest, options?: RawAxiosRequestConfig) {
        return LendingSetEntityControllerApiFp(this.configuration).postCollectionResourceLendingsetPost(requestParameters.lendingSetRequestBody, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * update-lendingset
     * @param {LendingSetEntityControllerApiPutItemResourceLendingsetPutRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof LendingSetEntityControllerApi
     */
    public putItemResourceLendingsetPut(requestParameters: LendingSetEntityControllerApiPutItemResourceLendingsetPutRequest, options?: RawAxiosRequestConfig) {
        return LendingSetEntityControllerApiFp(this.configuration).putItemResourceLendingsetPut(requestParameters.id, requestParameters.lendingSetRequestBody, options).then((request) => request(this.axios, this.basePath));
    }
}



/**
 * LendingSetPropertyReferenceControllerApi - axios parameter creator
 * @export
 */
export const LendingSetPropertyReferenceControllerApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * patch-bookstock-by-lendingset-Id
         * @param {string} id 
         * @param {CollectionModelObject} collectionModelObject 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createPropertyReferenceLendingsetPatch: async (id: string, collectionModelObject: CollectionModelObject, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('createPropertyReferenceLendingsetPatch', 'id', id)
            // verify required parameter 'collectionModelObject' is not null or undefined
            assertParamExists('createPropertyReferenceLendingsetPatch', 'collectionModelObject', collectionModelObject)
            const localVarPath = `/lendingSets/{id}/bookStock`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(collectionModelObject, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * patch-customer-by-lendingset-Id
         * @param {string} id 
         * @param {CollectionModelObject} collectionModelObject 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createPropertyReferenceLendingsetPatch1: async (id: string, collectionModelObject: CollectionModelObject, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('createPropertyReferenceLendingsetPatch1', 'id', id)
            // verify required parameter 'collectionModelObject' is not null or undefined
            assertParamExists('createPropertyReferenceLendingsetPatch1', 'collectionModelObject', collectionModelObject)
            const localVarPath = `/lendingSets/{id}/customer`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(collectionModelObject, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * patch-lendingstatus-by-lendingset-Id
         * @param {string} id 
         * @param {CollectionModelObject} collectionModelObject 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createPropertyReferenceLendingsetPatch2: async (id: string, collectionModelObject: CollectionModelObject, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('createPropertyReferenceLendingsetPatch2', 'id', id)
            // verify required parameter 'collectionModelObject' is not null or undefined
            assertParamExists('createPropertyReferenceLendingsetPatch2', 'collectionModelObject', collectionModelObject)
            const localVarPath = `/lendingSets/{id}/lendingStatus`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(collectionModelObject, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * update-bookstock-by-lendingset-Id
         * @param {string} id 
         * @param {CollectionModelObject} collectionModelObject 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createPropertyReferenceLendingsetPut: async (id: string, collectionModelObject: CollectionModelObject, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('createPropertyReferenceLendingsetPut', 'id', id)
            // verify required parameter 'collectionModelObject' is not null or undefined
            assertParamExists('createPropertyReferenceLendingsetPut', 'collectionModelObject', collectionModelObject)
            const localVarPath = `/lendingSets/{id}/bookStock`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(collectionModelObject, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * update-customer-by-lendingset-Id
         * @param {string} id 
         * @param {CollectionModelObject} collectionModelObject 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createPropertyReferenceLendingsetPut1: async (id: string, collectionModelObject: CollectionModelObject, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('createPropertyReferenceLendingsetPut1', 'id', id)
            // verify required parameter 'collectionModelObject' is not null or undefined
            assertParamExists('createPropertyReferenceLendingsetPut1', 'collectionModelObject', collectionModelObject)
            const localVarPath = `/lendingSets/{id}/customer`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(collectionModelObject, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * update-lendingstatus-by-lendingset-Id
         * @param {string} id 
         * @param {CollectionModelObject} collectionModelObject 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createPropertyReferenceLendingsetPut2: async (id: string, collectionModelObject: CollectionModelObject, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('createPropertyReferenceLendingsetPut2', 'id', id)
            // verify required parameter 'collectionModelObject' is not null or undefined
            assertParamExists('createPropertyReferenceLendingsetPut2', 'collectionModelObject', collectionModelObject)
            const localVarPath = `/lendingSets/{id}/lendingStatus`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(collectionModelObject, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * delete-bookstock-by-lendingset-Id
         * @param {string} id 
         * @param {string} propertyId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deletePropertyReferenceIdLendingsetDelete: async (id: string, propertyId: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('deletePropertyReferenceIdLendingsetDelete', 'id', id)
            // verify required parameter 'propertyId' is not null or undefined
            assertParamExists('deletePropertyReferenceIdLendingsetDelete', 'propertyId', propertyId)
            const localVarPath = `/lendingSets/{id}/bookStock/{propertyId}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)))
                .replace(`{${"propertyId"}}`, encodeURIComponent(String(propertyId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * delete-customer-by-lendingset-Id
         * @param {string} id 
         * @param {string} propertyId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deletePropertyReferenceIdLendingsetDelete1: async (id: string, propertyId: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('deletePropertyReferenceIdLendingsetDelete1', 'id', id)
            // verify required parameter 'propertyId' is not null or undefined
            assertParamExists('deletePropertyReferenceIdLendingsetDelete1', 'propertyId', propertyId)
            const localVarPath = `/lendingSets/{id}/customer/{propertyId}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)))
                .replace(`{${"propertyId"}}`, encodeURIComponent(String(propertyId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * delete-lendingstatus-by-lendingset-Id
         * @param {string} id 
         * @param {string} propertyId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deletePropertyReferenceIdLendingsetDelete2: async (id: string, propertyId: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('deletePropertyReferenceIdLendingsetDelete2', 'id', id)
            // verify required parameter 'propertyId' is not null or undefined
            assertParamExists('deletePropertyReferenceIdLendingsetDelete2', 'propertyId', propertyId)
            const localVarPath = `/lendingSets/{id}/lendingStatus/{propertyId}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)))
                .replace(`{${"propertyId"}}`, encodeURIComponent(String(propertyId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * delete-bookstock-by-lendingset-Id
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deletePropertyReferenceLendingsetDelete: async (id: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('deletePropertyReferenceLendingsetDelete', 'id', id)
            const localVarPath = `/lendingSets/{id}/bookStock`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * delete-customer-by-lendingset-Id
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deletePropertyReferenceLendingsetDelete1: async (id: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('deletePropertyReferenceLendingsetDelete1', 'id', id)
            const localVarPath = `/lendingSets/{id}/customer`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * delete-lendingstatus-by-lendingset-Id
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deletePropertyReferenceLendingsetDelete2: async (id: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('deletePropertyReferenceLendingsetDelete2', 'id', id)
            const localVarPath = `/lendingSets/{id}/lendingStatus`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * get-bookstock-by-lendingset-Id
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        followPropertyReferenceLendingsetGet: async (id: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('followPropertyReferenceLendingsetGet', 'id', id)
            const localVarPath = `/lendingSets/{id}/bookStock`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * get-bookstock-by-lendingset-Id
         * @param {string} id 
         * @param {string} propertyId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        followPropertyReferenceLendingsetGet1: async (id: string, propertyId: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('followPropertyReferenceLendingsetGet1', 'id', id)
            // verify required parameter 'propertyId' is not null or undefined
            assertParamExists('followPropertyReferenceLendingsetGet1', 'propertyId', propertyId)
            const localVarPath = `/lendingSets/{id}/bookStock/{propertyId}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)))
                .replace(`{${"propertyId"}}`, encodeURIComponent(String(propertyId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * get-customer-by-lendingset-Id
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        followPropertyReferenceLendingsetGet2: async (id: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('followPropertyReferenceLendingsetGet2', 'id', id)
            const localVarPath = `/lendingSets/{id}/customer`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * get-customer-by-lendingset-Id
         * @param {string} id 
         * @param {string} propertyId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        followPropertyReferenceLendingsetGet3: async (id: string, propertyId: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('followPropertyReferenceLendingsetGet3', 'id', id)
            // verify required parameter 'propertyId' is not null or undefined
            assertParamExists('followPropertyReferenceLendingsetGet3', 'propertyId', propertyId)
            const localVarPath = `/lendingSets/{id}/customer/{propertyId}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)))
                .replace(`{${"propertyId"}}`, encodeURIComponent(String(propertyId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * get-lendingstatus-by-lendingset-Id
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        followPropertyReferenceLendingsetGet4: async (id: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('followPropertyReferenceLendingsetGet4', 'id', id)
            const localVarPath = `/lendingSets/{id}/lendingStatus`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * get-lendingstatus-by-lendingset-Id
         * @param {string} id 
         * @param {string} propertyId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        followPropertyReferenceLendingsetGet5: async (id: string, propertyId: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('followPropertyReferenceLendingsetGet5', 'id', id)
            // verify required parameter 'propertyId' is not null or undefined
            assertParamExists('followPropertyReferenceLendingsetGet5', 'propertyId', propertyId)
            const localVarPath = `/lendingSets/{id}/lendingStatus/{propertyId}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)))
                .replace(`{${"propertyId"}}`, encodeURIComponent(String(propertyId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * LendingSetPropertyReferenceControllerApi - functional programming interface
 * @export
 */
export const LendingSetPropertyReferenceControllerApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = LendingSetPropertyReferenceControllerApiAxiosParamCreator(configuration)
    return {
        /**
         * patch-bookstock-by-lendingset-Id
         * @param {string} id 
         * @param {CollectionModelObject} collectionModelObject 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async createPropertyReferenceLendingsetPatch(id: string, collectionModelObject: CollectionModelObject, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CollectionModelBookStock>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.createPropertyReferenceLendingsetPatch(id, collectionModelObject, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['LendingSetPropertyReferenceControllerApi.createPropertyReferenceLendingsetPatch']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * patch-customer-by-lendingset-Id
         * @param {string} id 
         * @param {CollectionModelObject} collectionModelObject 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async createPropertyReferenceLendingsetPatch1(id: string, collectionModelObject: CollectionModelObject, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<EntityModelCustomer>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.createPropertyReferenceLendingsetPatch1(id, collectionModelObject, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['LendingSetPropertyReferenceControllerApi.createPropertyReferenceLendingsetPatch1']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * patch-lendingstatus-by-lendingset-Id
         * @param {string} id 
         * @param {CollectionModelObject} collectionModelObject 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async createPropertyReferenceLendingsetPatch2(id: string, collectionModelObject: CollectionModelObject, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<EntityModelLendingStatus>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.createPropertyReferenceLendingsetPatch2(id, collectionModelObject, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['LendingSetPropertyReferenceControllerApi.createPropertyReferenceLendingsetPatch2']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * update-bookstock-by-lendingset-Id
         * @param {string} id 
         * @param {CollectionModelObject} collectionModelObject 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async createPropertyReferenceLendingsetPut(id: string, collectionModelObject: CollectionModelObject, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CollectionModelBookStock>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.createPropertyReferenceLendingsetPut(id, collectionModelObject, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['LendingSetPropertyReferenceControllerApi.createPropertyReferenceLendingsetPut']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * update-customer-by-lendingset-Id
         * @param {string} id 
         * @param {CollectionModelObject} collectionModelObject 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async createPropertyReferenceLendingsetPut1(id: string, collectionModelObject: CollectionModelObject, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<EntityModelCustomer>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.createPropertyReferenceLendingsetPut1(id, collectionModelObject, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['LendingSetPropertyReferenceControllerApi.createPropertyReferenceLendingsetPut1']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * update-lendingstatus-by-lendingset-Id
         * @param {string} id 
         * @param {CollectionModelObject} collectionModelObject 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async createPropertyReferenceLendingsetPut2(id: string, collectionModelObject: CollectionModelObject, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<EntityModelLendingStatus>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.createPropertyReferenceLendingsetPut2(id, collectionModelObject, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['LendingSetPropertyReferenceControllerApi.createPropertyReferenceLendingsetPut2']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * delete-bookstock-by-lendingset-Id
         * @param {string} id 
         * @param {string} propertyId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deletePropertyReferenceIdLendingsetDelete(id: string, propertyId: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.deletePropertyReferenceIdLendingsetDelete(id, propertyId, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['LendingSetPropertyReferenceControllerApi.deletePropertyReferenceIdLendingsetDelete']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * delete-customer-by-lendingset-Id
         * @param {string} id 
         * @param {string} propertyId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deletePropertyReferenceIdLendingsetDelete1(id: string, propertyId: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.deletePropertyReferenceIdLendingsetDelete1(id, propertyId, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['LendingSetPropertyReferenceControllerApi.deletePropertyReferenceIdLendingsetDelete1']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * delete-lendingstatus-by-lendingset-Id
         * @param {string} id 
         * @param {string} propertyId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deletePropertyReferenceIdLendingsetDelete2(id: string, propertyId: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.deletePropertyReferenceIdLendingsetDelete2(id, propertyId, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['LendingSetPropertyReferenceControllerApi.deletePropertyReferenceIdLendingsetDelete2']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * delete-bookstock-by-lendingset-Id
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deletePropertyReferenceLendingsetDelete(id: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.deletePropertyReferenceLendingsetDelete(id, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['LendingSetPropertyReferenceControllerApi.deletePropertyReferenceLendingsetDelete']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * delete-customer-by-lendingset-Id
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deletePropertyReferenceLendingsetDelete1(id: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.deletePropertyReferenceLendingsetDelete1(id, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['LendingSetPropertyReferenceControllerApi.deletePropertyReferenceLendingsetDelete1']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * delete-lendingstatus-by-lendingset-Id
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deletePropertyReferenceLendingsetDelete2(id: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.deletePropertyReferenceLendingsetDelete2(id, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['LendingSetPropertyReferenceControllerApi.deletePropertyReferenceLendingsetDelete2']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * get-bookstock-by-lendingset-Id
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async followPropertyReferenceLendingsetGet(id: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CollectionModelBookStock>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.followPropertyReferenceLendingsetGet(id, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['LendingSetPropertyReferenceControllerApi.followPropertyReferenceLendingsetGet']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * get-bookstock-by-lendingset-Id
         * @param {string} id 
         * @param {string} propertyId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async followPropertyReferenceLendingsetGet1(id: string, propertyId: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CollectionModelBookStock>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.followPropertyReferenceLendingsetGet1(id, propertyId, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['LendingSetPropertyReferenceControllerApi.followPropertyReferenceLendingsetGet1']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * get-customer-by-lendingset-Id
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async followPropertyReferenceLendingsetGet2(id: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<EntityModelCustomer>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.followPropertyReferenceLendingsetGet2(id, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['LendingSetPropertyReferenceControllerApi.followPropertyReferenceLendingsetGet2']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * get-customer-by-lendingset-Id
         * @param {string} id 
         * @param {string} propertyId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async followPropertyReferenceLendingsetGet3(id: string, propertyId: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<EntityModelCustomer>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.followPropertyReferenceLendingsetGet3(id, propertyId, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['LendingSetPropertyReferenceControllerApi.followPropertyReferenceLendingsetGet3']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * get-lendingstatus-by-lendingset-Id
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async followPropertyReferenceLendingsetGet4(id: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<EntityModelLendingStatus>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.followPropertyReferenceLendingsetGet4(id, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['LendingSetPropertyReferenceControllerApi.followPropertyReferenceLendingsetGet4']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * get-lendingstatus-by-lendingset-Id
         * @param {string} id 
         * @param {string} propertyId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async followPropertyReferenceLendingsetGet5(id: string, propertyId: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<EntityModelLendingStatus>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.followPropertyReferenceLendingsetGet5(id, propertyId, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['LendingSetPropertyReferenceControllerApi.followPropertyReferenceLendingsetGet5']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * LendingSetPropertyReferenceControllerApi - factory interface
 * @export
 */
export const LendingSetPropertyReferenceControllerApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = LendingSetPropertyReferenceControllerApiFp(configuration)
    return {
        /**
         * patch-bookstock-by-lendingset-Id
         * @param {LendingSetPropertyReferenceControllerApiCreatePropertyReferenceLendingsetPatchRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createPropertyReferenceLendingsetPatch(requestParameters: LendingSetPropertyReferenceControllerApiCreatePropertyReferenceLendingsetPatchRequest, options?: RawAxiosRequestConfig): AxiosPromise<CollectionModelBookStock> {
            return localVarFp.createPropertyReferenceLendingsetPatch(requestParameters.id, requestParameters.collectionModelObject, options).then((request) => request(axios, basePath));
        },
        /**
         * patch-customer-by-lendingset-Id
         * @param {LendingSetPropertyReferenceControllerApiCreatePropertyReferenceLendingsetPatch1Request} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createPropertyReferenceLendingsetPatch1(requestParameters: LendingSetPropertyReferenceControllerApiCreatePropertyReferenceLendingsetPatch1Request, options?: RawAxiosRequestConfig): AxiosPromise<EntityModelCustomer> {
            return localVarFp.createPropertyReferenceLendingsetPatch1(requestParameters.id, requestParameters.collectionModelObject, options).then((request) => request(axios, basePath));
        },
        /**
         * patch-lendingstatus-by-lendingset-Id
         * @param {LendingSetPropertyReferenceControllerApiCreatePropertyReferenceLendingsetPatch2Request} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createPropertyReferenceLendingsetPatch2(requestParameters: LendingSetPropertyReferenceControllerApiCreatePropertyReferenceLendingsetPatch2Request, options?: RawAxiosRequestConfig): AxiosPromise<EntityModelLendingStatus> {
            return localVarFp.createPropertyReferenceLendingsetPatch2(requestParameters.id, requestParameters.collectionModelObject, options).then((request) => request(axios, basePath));
        },
        /**
         * update-bookstock-by-lendingset-Id
         * @param {LendingSetPropertyReferenceControllerApiCreatePropertyReferenceLendingsetPutRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createPropertyReferenceLendingsetPut(requestParameters: LendingSetPropertyReferenceControllerApiCreatePropertyReferenceLendingsetPutRequest, options?: RawAxiosRequestConfig): AxiosPromise<CollectionModelBookStock> {
            return localVarFp.createPropertyReferenceLendingsetPut(requestParameters.id, requestParameters.collectionModelObject, options).then((request) => request(axios, basePath));
        },
        /**
         * update-customer-by-lendingset-Id
         * @param {LendingSetPropertyReferenceControllerApiCreatePropertyReferenceLendingsetPut1Request} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createPropertyReferenceLendingsetPut1(requestParameters: LendingSetPropertyReferenceControllerApiCreatePropertyReferenceLendingsetPut1Request, options?: RawAxiosRequestConfig): AxiosPromise<EntityModelCustomer> {
            return localVarFp.createPropertyReferenceLendingsetPut1(requestParameters.id, requestParameters.collectionModelObject, options).then((request) => request(axios, basePath));
        },
        /**
         * update-lendingstatus-by-lendingset-Id
         * @param {LendingSetPropertyReferenceControllerApiCreatePropertyReferenceLendingsetPut2Request} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createPropertyReferenceLendingsetPut2(requestParameters: LendingSetPropertyReferenceControllerApiCreatePropertyReferenceLendingsetPut2Request, options?: RawAxiosRequestConfig): AxiosPromise<EntityModelLendingStatus> {
            return localVarFp.createPropertyReferenceLendingsetPut2(requestParameters.id, requestParameters.collectionModelObject, options).then((request) => request(axios, basePath));
        },
        /**
         * delete-bookstock-by-lendingset-Id
         * @param {LendingSetPropertyReferenceControllerApiDeletePropertyReferenceIdLendingsetDeleteRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deletePropertyReferenceIdLendingsetDelete(requestParameters: LendingSetPropertyReferenceControllerApiDeletePropertyReferenceIdLendingsetDeleteRequest, options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.deletePropertyReferenceIdLendingsetDelete(requestParameters.id, requestParameters.propertyId, options).then((request) => request(axios, basePath));
        },
        /**
         * delete-customer-by-lendingset-Id
         * @param {LendingSetPropertyReferenceControllerApiDeletePropertyReferenceIdLendingsetDelete1Request} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deletePropertyReferenceIdLendingsetDelete1(requestParameters: LendingSetPropertyReferenceControllerApiDeletePropertyReferenceIdLendingsetDelete1Request, options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.deletePropertyReferenceIdLendingsetDelete1(requestParameters.id, requestParameters.propertyId, options).then((request) => request(axios, basePath));
        },
        /**
         * delete-lendingstatus-by-lendingset-Id
         * @param {LendingSetPropertyReferenceControllerApiDeletePropertyReferenceIdLendingsetDelete2Request} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deletePropertyReferenceIdLendingsetDelete2(requestParameters: LendingSetPropertyReferenceControllerApiDeletePropertyReferenceIdLendingsetDelete2Request, options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.deletePropertyReferenceIdLendingsetDelete2(requestParameters.id, requestParameters.propertyId, options).then((request) => request(axios, basePath));
        },
        /**
         * delete-bookstock-by-lendingset-Id
         * @param {LendingSetPropertyReferenceControllerApiDeletePropertyReferenceLendingsetDeleteRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deletePropertyReferenceLendingsetDelete(requestParameters: LendingSetPropertyReferenceControllerApiDeletePropertyReferenceLendingsetDeleteRequest, options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.deletePropertyReferenceLendingsetDelete(requestParameters.id, options).then((request) => request(axios, basePath));
        },
        /**
         * delete-customer-by-lendingset-Id
         * @param {LendingSetPropertyReferenceControllerApiDeletePropertyReferenceLendingsetDelete1Request} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deletePropertyReferenceLendingsetDelete1(requestParameters: LendingSetPropertyReferenceControllerApiDeletePropertyReferenceLendingsetDelete1Request, options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.deletePropertyReferenceLendingsetDelete1(requestParameters.id, options).then((request) => request(axios, basePath));
        },
        /**
         * delete-lendingstatus-by-lendingset-Id
         * @param {LendingSetPropertyReferenceControllerApiDeletePropertyReferenceLendingsetDelete2Request} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deletePropertyReferenceLendingsetDelete2(requestParameters: LendingSetPropertyReferenceControllerApiDeletePropertyReferenceLendingsetDelete2Request, options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.deletePropertyReferenceLendingsetDelete2(requestParameters.id, options).then((request) => request(axios, basePath));
        },
        /**
         * get-bookstock-by-lendingset-Id
         * @param {LendingSetPropertyReferenceControllerApiFollowPropertyReferenceLendingsetGetRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        followPropertyReferenceLendingsetGet(requestParameters: LendingSetPropertyReferenceControllerApiFollowPropertyReferenceLendingsetGetRequest, options?: RawAxiosRequestConfig): AxiosPromise<CollectionModelBookStock> {
            return localVarFp.followPropertyReferenceLendingsetGet(requestParameters.id, options).then((request) => request(axios, basePath));
        },
        /**
         * get-bookstock-by-lendingset-Id
         * @param {LendingSetPropertyReferenceControllerApiFollowPropertyReferenceLendingsetGet1Request} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        followPropertyReferenceLendingsetGet1(requestParameters: LendingSetPropertyReferenceControllerApiFollowPropertyReferenceLendingsetGet1Request, options?: RawAxiosRequestConfig): AxiosPromise<CollectionModelBookStock> {
            return localVarFp.followPropertyReferenceLendingsetGet1(requestParameters.id, requestParameters.propertyId, options).then((request) => request(axios, basePath));
        },
        /**
         * get-customer-by-lendingset-Id
         * @param {LendingSetPropertyReferenceControllerApiFollowPropertyReferenceLendingsetGet2Request} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        followPropertyReferenceLendingsetGet2(requestParameters: LendingSetPropertyReferenceControllerApiFollowPropertyReferenceLendingsetGet2Request, options?: RawAxiosRequestConfig): AxiosPromise<EntityModelCustomer> {
            return localVarFp.followPropertyReferenceLendingsetGet2(requestParameters.id, options).then((request) => request(axios, basePath));
        },
        /**
         * get-customer-by-lendingset-Id
         * @param {LendingSetPropertyReferenceControllerApiFollowPropertyReferenceLendingsetGet3Request} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        followPropertyReferenceLendingsetGet3(requestParameters: LendingSetPropertyReferenceControllerApiFollowPropertyReferenceLendingsetGet3Request, options?: RawAxiosRequestConfig): AxiosPromise<EntityModelCustomer> {
            return localVarFp.followPropertyReferenceLendingsetGet3(requestParameters.id, requestParameters.propertyId, options).then((request) => request(axios, basePath));
        },
        /**
         * get-lendingstatus-by-lendingset-Id
         * @param {LendingSetPropertyReferenceControllerApiFollowPropertyReferenceLendingsetGet4Request} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        followPropertyReferenceLendingsetGet4(requestParameters: LendingSetPropertyReferenceControllerApiFollowPropertyReferenceLendingsetGet4Request, options?: RawAxiosRequestConfig): AxiosPromise<EntityModelLendingStatus> {
            return localVarFp.followPropertyReferenceLendingsetGet4(requestParameters.id, options).then((request) => request(axios, basePath));
        },
        /**
         * get-lendingstatus-by-lendingset-Id
         * @param {LendingSetPropertyReferenceControllerApiFollowPropertyReferenceLendingsetGet5Request} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        followPropertyReferenceLendingsetGet5(requestParameters: LendingSetPropertyReferenceControllerApiFollowPropertyReferenceLendingsetGet5Request, options?: RawAxiosRequestConfig): AxiosPromise<EntityModelLendingStatus> {
            return localVarFp.followPropertyReferenceLendingsetGet5(requestParameters.id, requestParameters.propertyId, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * LendingSetPropertyReferenceControllerApi - interface
 * @export
 * @interface LendingSetPropertyReferenceControllerApi
 */
export interface LendingSetPropertyReferenceControllerApiInterface {
    /**
     * patch-bookstock-by-lendingset-Id
     * @param {LendingSetPropertyReferenceControllerApiCreatePropertyReferenceLendingsetPatchRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof LendingSetPropertyReferenceControllerApiInterface
     */
    createPropertyReferenceLendingsetPatch(requestParameters: LendingSetPropertyReferenceControllerApiCreatePropertyReferenceLendingsetPatchRequest, options?: RawAxiosRequestConfig): AxiosPromise<CollectionModelBookStock>;

    /**
     * patch-customer-by-lendingset-Id
     * @param {LendingSetPropertyReferenceControllerApiCreatePropertyReferenceLendingsetPatch1Request} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof LendingSetPropertyReferenceControllerApiInterface
     */
    createPropertyReferenceLendingsetPatch1(requestParameters: LendingSetPropertyReferenceControllerApiCreatePropertyReferenceLendingsetPatch1Request, options?: RawAxiosRequestConfig): AxiosPromise<EntityModelCustomer>;

    /**
     * patch-lendingstatus-by-lendingset-Id
     * @param {LendingSetPropertyReferenceControllerApiCreatePropertyReferenceLendingsetPatch2Request} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof LendingSetPropertyReferenceControllerApiInterface
     */
    createPropertyReferenceLendingsetPatch2(requestParameters: LendingSetPropertyReferenceControllerApiCreatePropertyReferenceLendingsetPatch2Request, options?: RawAxiosRequestConfig): AxiosPromise<EntityModelLendingStatus>;

    /**
     * update-bookstock-by-lendingset-Id
     * @param {LendingSetPropertyReferenceControllerApiCreatePropertyReferenceLendingsetPutRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof LendingSetPropertyReferenceControllerApiInterface
     */
    createPropertyReferenceLendingsetPut(requestParameters: LendingSetPropertyReferenceControllerApiCreatePropertyReferenceLendingsetPutRequest, options?: RawAxiosRequestConfig): AxiosPromise<CollectionModelBookStock>;

    /**
     * update-customer-by-lendingset-Id
     * @param {LendingSetPropertyReferenceControllerApiCreatePropertyReferenceLendingsetPut1Request} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof LendingSetPropertyReferenceControllerApiInterface
     */
    createPropertyReferenceLendingsetPut1(requestParameters: LendingSetPropertyReferenceControllerApiCreatePropertyReferenceLendingsetPut1Request, options?: RawAxiosRequestConfig): AxiosPromise<EntityModelCustomer>;

    /**
     * update-lendingstatus-by-lendingset-Id
     * @param {LendingSetPropertyReferenceControllerApiCreatePropertyReferenceLendingsetPut2Request} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof LendingSetPropertyReferenceControllerApiInterface
     */
    createPropertyReferenceLendingsetPut2(requestParameters: LendingSetPropertyReferenceControllerApiCreatePropertyReferenceLendingsetPut2Request, options?: RawAxiosRequestConfig): AxiosPromise<EntityModelLendingStatus>;

    /**
     * delete-bookstock-by-lendingset-Id
     * @param {LendingSetPropertyReferenceControllerApiDeletePropertyReferenceIdLendingsetDeleteRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof LendingSetPropertyReferenceControllerApiInterface
     */
    deletePropertyReferenceIdLendingsetDelete(requestParameters: LendingSetPropertyReferenceControllerApiDeletePropertyReferenceIdLendingsetDeleteRequest, options?: RawAxiosRequestConfig): AxiosPromise<void>;

    /**
     * delete-customer-by-lendingset-Id
     * @param {LendingSetPropertyReferenceControllerApiDeletePropertyReferenceIdLendingsetDelete1Request} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof LendingSetPropertyReferenceControllerApiInterface
     */
    deletePropertyReferenceIdLendingsetDelete1(requestParameters: LendingSetPropertyReferenceControllerApiDeletePropertyReferenceIdLendingsetDelete1Request, options?: RawAxiosRequestConfig): AxiosPromise<void>;

    /**
     * delete-lendingstatus-by-lendingset-Id
     * @param {LendingSetPropertyReferenceControllerApiDeletePropertyReferenceIdLendingsetDelete2Request} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof LendingSetPropertyReferenceControllerApiInterface
     */
    deletePropertyReferenceIdLendingsetDelete2(requestParameters: LendingSetPropertyReferenceControllerApiDeletePropertyReferenceIdLendingsetDelete2Request, options?: RawAxiosRequestConfig): AxiosPromise<void>;

    /**
     * delete-bookstock-by-lendingset-Id
     * @param {LendingSetPropertyReferenceControllerApiDeletePropertyReferenceLendingsetDeleteRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof LendingSetPropertyReferenceControllerApiInterface
     */
    deletePropertyReferenceLendingsetDelete(requestParameters: LendingSetPropertyReferenceControllerApiDeletePropertyReferenceLendingsetDeleteRequest, options?: RawAxiosRequestConfig): AxiosPromise<void>;

    /**
     * delete-customer-by-lendingset-Id
     * @param {LendingSetPropertyReferenceControllerApiDeletePropertyReferenceLendingsetDelete1Request} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof LendingSetPropertyReferenceControllerApiInterface
     */
    deletePropertyReferenceLendingsetDelete1(requestParameters: LendingSetPropertyReferenceControllerApiDeletePropertyReferenceLendingsetDelete1Request, options?: RawAxiosRequestConfig): AxiosPromise<void>;

    /**
     * delete-lendingstatus-by-lendingset-Id
     * @param {LendingSetPropertyReferenceControllerApiDeletePropertyReferenceLendingsetDelete2Request} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof LendingSetPropertyReferenceControllerApiInterface
     */
    deletePropertyReferenceLendingsetDelete2(requestParameters: LendingSetPropertyReferenceControllerApiDeletePropertyReferenceLendingsetDelete2Request, options?: RawAxiosRequestConfig): AxiosPromise<void>;

    /**
     * get-bookstock-by-lendingset-Id
     * @param {LendingSetPropertyReferenceControllerApiFollowPropertyReferenceLendingsetGetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof LendingSetPropertyReferenceControllerApiInterface
     */
    followPropertyReferenceLendingsetGet(requestParameters: LendingSetPropertyReferenceControllerApiFollowPropertyReferenceLendingsetGetRequest, options?: RawAxiosRequestConfig): AxiosPromise<CollectionModelBookStock>;

    /**
     * get-bookstock-by-lendingset-Id
     * @param {LendingSetPropertyReferenceControllerApiFollowPropertyReferenceLendingsetGet1Request} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof LendingSetPropertyReferenceControllerApiInterface
     */
    followPropertyReferenceLendingsetGet1(requestParameters: LendingSetPropertyReferenceControllerApiFollowPropertyReferenceLendingsetGet1Request, options?: RawAxiosRequestConfig): AxiosPromise<CollectionModelBookStock>;

    /**
     * get-customer-by-lendingset-Id
     * @param {LendingSetPropertyReferenceControllerApiFollowPropertyReferenceLendingsetGet2Request} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof LendingSetPropertyReferenceControllerApiInterface
     */
    followPropertyReferenceLendingsetGet2(requestParameters: LendingSetPropertyReferenceControllerApiFollowPropertyReferenceLendingsetGet2Request, options?: RawAxiosRequestConfig): AxiosPromise<EntityModelCustomer>;

    /**
     * get-customer-by-lendingset-Id
     * @param {LendingSetPropertyReferenceControllerApiFollowPropertyReferenceLendingsetGet3Request} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof LendingSetPropertyReferenceControllerApiInterface
     */
    followPropertyReferenceLendingsetGet3(requestParameters: LendingSetPropertyReferenceControllerApiFollowPropertyReferenceLendingsetGet3Request, options?: RawAxiosRequestConfig): AxiosPromise<EntityModelCustomer>;

    /**
     * get-lendingstatus-by-lendingset-Id
     * @param {LendingSetPropertyReferenceControllerApiFollowPropertyReferenceLendingsetGet4Request} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof LendingSetPropertyReferenceControllerApiInterface
     */
    followPropertyReferenceLendingsetGet4(requestParameters: LendingSetPropertyReferenceControllerApiFollowPropertyReferenceLendingsetGet4Request, options?: RawAxiosRequestConfig): AxiosPromise<EntityModelLendingStatus>;

    /**
     * get-lendingstatus-by-lendingset-Id
     * @param {LendingSetPropertyReferenceControllerApiFollowPropertyReferenceLendingsetGet5Request} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof LendingSetPropertyReferenceControllerApiInterface
     */
    followPropertyReferenceLendingsetGet5(requestParameters: LendingSetPropertyReferenceControllerApiFollowPropertyReferenceLendingsetGet5Request, options?: RawAxiosRequestConfig): AxiosPromise<EntityModelLendingStatus>;

}

/**
 * Request parameters for createPropertyReferenceLendingsetPatch operation in LendingSetPropertyReferenceControllerApi.
 * @export
 * @interface LendingSetPropertyReferenceControllerApiCreatePropertyReferenceLendingsetPatchRequest
 */
export interface LendingSetPropertyReferenceControllerApiCreatePropertyReferenceLendingsetPatchRequest {
    /**
     * 
     * @type {string}
     * @memberof LendingSetPropertyReferenceControllerApiCreatePropertyReferenceLendingsetPatch
     */
    readonly id: string

    /**
     * 
     * @type {CollectionModelObject}
     * @memberof LendingSetPropertyReferenceControllerApiCreatePropertyReferenceLendingsetPatch
     */
    readonly collectionModelObject: CollectionModelObject
}

/**
 * Request parameters for createPropertyReferenceLendingsetPatch1 operation in LendingSetPropertyReferenceControllerApi.
 * @export
 * @interface LendingSetPropertyReferenceControllerApiCreatePropertyReferenceLendingsetPatch1Request
 */
export interface LendingSetPropertyReferenceControllerApiCreatePropertyReferenceLendingsetPatch1Request {
    /**
     * 
     * @type {string}
     * @memberof LendingSetPropertyReferenceControllerApiCreatePropertyReferenceLendingsetPatch1
     */
    readonly id: string

    /**
     * 
     * @type {CollectionModelObject}
     * @memberof LendingSetPropertyReferenceControllerApiCreatePropertyReferenceLendingsetPatch1
     */
    readonly collectionModelObject: CollectionModelObject
}

/**
 * Request parameters for createPropertyReferenceLendingsetPatch2 operation in LendingSetPropertyReferenceControllerApi.
 * @export
 * @interface LendingSetPropertyReferenceControllerApiCreatePropertyReferenceLendingsetPatch2Request
 */
export interface LendingSetPropertyReferenceControllerApiCreatePropertyReferenceLendingsetPatch2Request {
    /**
     * 
     * @type {string}
     * @memberof LendingSetPropertyReferenceControllerApiCreatePropertyReferenceLendingsetPatch2
     */
    readonly id: string

    /**
     * 
     * @type {CollectionModelObject}
     * @memberof LendingSetPropertyReferenceControllerApiCreatePropertyReferenceLendingsetPatch2
     */
    readonly collectionModelObject: CollectionModelObject
}

/**
 * Request parameters for createPropertyReferenceLendingsetPut operation in LendingSetPropertyReferenceControllerApi.
 * @export
 * @interface LendingSetPropertyReferenceControllerApiCreatePropertyReferenceLendingsetPutRequest
 */
export interface LendingSetPropertyReferenceControllerApiCreatePropertyReferenceLendingsetPutRequest {
    /**
     * 
     * @type {string}
     * @memberof LendingSetPropertyReferenceControllerApiCreatePropertyReferenceLendingsetPut
     */
    readonly id: string

    /**
     * 
     * @type {CollectionModelObject}
     * @memberof LendingSetPropertyReferenceControllerApiCreatePropertyReferenceLendingsetPut
     */
    readonly collectionModelObject: CollectionModelObject
}

/**
 * Request parameters for createPropertyReferenceLendingsetPut1 operation in LendingSetPropertyReferenceControllerApi.
 * @export
 * @interface LendingSetPropertyReferenceControllerApiCreatePropertyReferenceLendingsetPut1Request
 */
export interface LendingSetPropertyReferenceControllerApiCreatePropertyReferenceLendingsetPut1Request {
    /**
     * 
     * @type {string}
     * @memberof LendingSetPropertyReferenceControllerApiCreatePropertyReferenceLendingsetPut1
     */
    readonly id: string

    /**
     * 
     * @type {CollectionModelObject}
     * @memberof LendingSetPropertyReferenceControllerApiCreatePropertyReferenceLendingsetPut1
     */
    readonly collectionModelObject: CollectionModelObject
}

/**
 * Request parameters for createPropertyReferenceLendingsetPut2 operation in LendingSetPropertyReferenceControllerApi.
 * @export
 * @interface LendingSetPropertyReferenceControllerApiCreatePropertyReferenceLendingsetPut2Request
 */
export interface LendingSetPropertyReferenceControllerApiCreatePropertyReferenceLendingsetPut2Request {
    /**
     * 
     * @type {string}
     * @memberof LendingSetPropertyReferenceControllerApiCreatePropertyReferenceLendingsetPut2
     */
    readonly id: string

    /**
     * 
     * @type {CollectionModelObject}
     * @memberof LendingSetPropertyReferenceControllerApiCreatePropertyReferenceLendingsetPut2
     */
    readonly collectionModelObject: CollectionModelObject
}

/**
 * Request parameters for deletePropertyReferenceIdLendingsetDelete operation in LendingSetPropertyReferenceControllerApi.
 * @export
 * @interface LendingSetPropertyReferenceControllerApiDeletePropertyReferenceIdLendingsetDeleteRequest
 */
export interface LendingSetPropertyReferenceControllerApiDeletePropertyReferenceIdLendingsetDeleteRequest {
    /**
     * 
     * @type {string}
     * @memberof LendingSetPropertyReferenceControllerApiDeletePropertyReferenceIdLendingsetDelete
     */
    readonly id: string

    /**
     * 
     * @type {string}
     * @memberof LendingSetPropertyReferenceControllerApiDeletePropertyReferenceIdLendingsetDelete
     */
    readonly propertyId: string
}

/**
 * Request parameters for deletePropertyReferenceIdLendingsetDelete1 operation in LendingSetPropertyReferenceControllerApi.
 * @export
 * @interface LendingSetPropertyReferenceControllerApiDeletePropertyReferenceIdLendingsetDelete1Request
 */
export interface LendingSetPropertyReferenceControllerApiDeletePropertyReferenceIdLendingsetDelete1Request {
    /**
     * 
     * @type {string}
     * @memberof LendingSetPropertyReferenceControllerApiDeletePropertyReferenceIdLendingsetDelete1
     */
    readonly id: string

    /**
     * 
     * @type {string}
     * @memberof LendingSetPropertyReferenceControllerApiDeletePropertyReferenceIdLendingsetDelete1
     */
    readonly propertyId: string
}

/**
 * Request parameters for deletePropertyReferenceIdLendingsetDelete2 operation in LendingSetPropertyReferenceControllerApi.
 * @export
 * @interface LendingSetPropertyReferenceControllerApiDeletePropertyReferenceIdLendingsetDelete2Request
 */
export interface LendingSetPropertyReferenceControllerApiDeletePropertyReferenceIdLendingsetDelete2Request {
    /**
     * 
     * @type {string}
     * @memberof LendingSetPropertyReferenceControllerApiDeletePropertyReferenceIdLendingsetDelete2
     */
    readonly id: string

    /**
     * 
     * @type {string}
     * @memberof LendingSetPropertyReferenceControllerApiDeletePropertyReferenceIdLendingsetDelete2
     */
    readonly propertyId: string
}

/**
 * Request parameters for deletePropertyReferenceLendingsetDelete operation in LendingSetPropertyReferenceControllerApi.
 * @export
 * @interface LendingSetPropertyReferenceControllerApiDeletePropertyReferenceLendingsetDeleteRequest
 */
export interface LendingSetPropertyReferenceControllerApiDeletePropertyReferenceLendingsetDeleteRequest {
    /**
     * 
     * @type {string}
     * @memberof LendingSetPropertyReferenceControllerApiDeletePropertyReferenceLendingsetDelete
     */
    readonly id: string
}

/**
 * Request parameters for deletePropertyReferenceLendingsetDelete1 operation in LendingSetPropertyReferenceControllerApi.
 * @export
 * @interface LendingSetPropertyReferenceControllerApiDeletePropertyReferenceLendingsetDelete1Request
 */
export interface LendingSetPropertyReferenceControllerApiDeletePropertyReferenceLendingsetDelete1Request {
    /**
     * 
     * @type {string}
     * @memberof LendingSetPropertyReferenceControllerApiDeletePropertyReferenceLendingsetDelete1
     */
    readonly id: string
}

/**
 * Request parameters for deletePropertyReferenceLendingsetDelete2 operation in LendingSetPropertyReferenceControllerApi.
 * @export
 * @interface LendingSetPropertyReferenceControllerApiDeletePropertyReferenceLendingsetDelete2Request
 */
export interface LendingSetPropertyReferenceControllerApiDeletePropertyReferenceLendingsetDelete2Request {
    /**
     * 
     * @type {string}
     * @memberof LendingSetPropertyReferenceControllerApiDeletePropertyReferenceLendingsetDelete2
     */
    readonly id: string
}

/**
 * Request parameters for followPropertyReferenceLendingsetGet operation in LendingSetPropertyReferenceControllerApi.
 * @export
 * @interface LendingSetPropertyReferenceControllerApiFollowPropertyReferenceLendingsetGetRequest
 */
export interface LendingSetPropertyReferenceControllerApiFollowPropertyReferenceLendingsetGetRequest {
    /**
     * 
     * @type {string}
     * @memberof LendingSetPropertyReferenceControllerApiFollowPropertyReferenceLendingsetGet
     */
    readonly id: string
}

/**
 * Request parameters for followPropertyReferenceLendingsetGet1 operation in LendingSetPropertyReferenceControllerApi.
 * @export
 * @interface LendingSetPropertyReferenceControllerApiFollowPropertyReferenceLendingsetGet1Request
 */
export interface LendingSetPropertyReferenceControllerApiFollowPropertyReferenceLendingsetGet1Request {
    /**
     * 
     * @type {string}
     * @memberof LendingSetPropertyReferenceControllerApiFollowPropertyReferenceLendingsetGet1
     */
    readonly id: string

    /**
     * 
     * @type {string}
     * @memberof LendingSetPropertyReferenceControllerApiFollowPropertyReferenceLendingsetGet1
     */
    readonly propertyId: string
}

/**
 * Request parameters for followPropertyReferenceLendingsetGet2 operation in LendingSetPropertyReferenceControllerApi.
 * @export
 * @interface LendingSetPropertyReferenceControllerApiFollowPropertyReferenceLendingsetGet2Request
 */
export interface LendingSetPropertyReferenceControllerApiFollowPropertyReferenceLendingsetGet2Request {
    /**
     * 
     * @type {string}
     * @memberof LendingSetPropertyReferenceControllerApiFollowPropertyReferenceLendingsetGet2
     */
    readonly id: string
}

/**
 * Request parameters for followPropertyReferenceLendingsetGet3 operation in LendingSetPropertyReferenceControllerApi.
 * @export
 * @interface LendingSetPropertyReferenceControllerApiFollowPropertyReferenceLendingsetGet3Request
 */
export interface LendingSetPropertyReferenceControllerApiFollowPropertyReferenceLendingsetGet3Request {
    /**
     * 
     * @type {string}
     * @memberof LendingSetPropertyReferenceControllerApiFollowPropertyReferenceLendingsetGet3
     */
    readonly id: string

    /**
     * 
     * @type {string}
     * @memberof LendingSetPropertyReferenceControllerApiFollowPropertyReferenceLendingsetGet3
     */
    readonly propertyId: string
}

/**
 * Request parameters for followPropertyReferenceLendingsetGet4 operation in LendingSetPropertyReferenceControllerApi.
 * @export
 * @interface LendingSetPropertyReferenceControllerApiFollowPropertyReferenceLendingsetGet4Request
 */
export interface LendingSetPropertyReferenceControllerApiFollowPropertyReferenceLendingsetGet4Request {
    /**
     * 
     * @type {string}
     * @memberof LendingSetPropertyReferenceControllerApiFollowPropertyReferenceLendingsetGet4
     */
    readonly id: string
}

/**
 * Request parameters for followPropertyReferenceLendingsetGet5 operation in LendingSetPropertyReferenceControllerApi.
 * @export
 * @interface LendingSetPropertyReferenceControllerApiFollowPropertyReferenceLendingsetGet5Request
 */
export interface LendingSetPropertyReferenceControllerApiFollowPropertyReferenceLendingsetGet5Request {
    /**
     * 
     * @type {string}
     * @memberof LendingSetPropertyReferenceControllerApiFollowPropertyReferenceLendingsetGet5
     */
    readonly id: string

    /**
     * 
     * @type {string}
     * @memberof LendingSetPropertyReferenceControllerApiFollowPropertyReferenceLendingsetGet5
     */
    readonly propertyId: string
}

/**
 * LendingSetPropertyReferenceControllerApi - object-oriented interface
 * @export
 * @class LendingSetPropertyReferenceControllerApi
 * @extends {BaseAPI}
 */
export class LendingSetPropertyReferenceControllerApi extends BaseAPI implements LendingSetPropertyReferenceControllerApiInterface {
    /**
     * patch-bookstock-by-lendingset-Id
     * @param {LendingSetPropertyReferenceControllerApiCreatePropertyReferenceLendingsetPatchRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof LendingSetPropertyReferenceControllerApi
     */
    public createPropertyReferenceLendingsetPatch(requestParameters: LendingSetPropertyReferenceControllerApiCreatePropertyReferenceLendingsetPatchRequest, options?: RawAxiosRequestConfig) {
        return LendingSetPropertyReferenceControllerApiFp(this.configuration).createPropertyReferenceLendingsetPatch(requestParameters.id, requestParameters.collectionModelObject, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * patch-customer-by-lendingset-Id
     * @param {LendingSetPropertyReferenceControllerApiCreatePropertyReferenceLendingsetPatch1Request} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof LendingSetPropertyReferenceControllerApi
     */
    public createPropertyReferenceLendingsetPatch1(requestParameters: LendingSetPropertyReferenceControllerApiCreatePropertyReferenceLendingsetPatch1Request, options?: RawAxiosRequestConfig) {
        return LendingSetPropertyReferenceControllerApiFp(this.configuration).createPropertyReferenceLendingsetPatch1(requestParameters.id, requestParameters.collectionModelObject, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * patch-lendingstatus-by-lendingset-Id
     * @param {LendingSetPropertyReferenceControllerApiCreatePropertyReferenceLendingsetPatch2Request} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof LendingSetPropertyReferenceControllerApi
     */
    public createPropertyReferenceLendingsetPatch2(requestParameters: LendingSetPropertyReferenceControllerApiCreatePropertyReferenceLendingsetPatch2Request, options?: RawAxiosRequestConfig) {
        return LendingSetPropertyReferenceControllerApiFp(this.configuration).createPropertyReferenceLendingsetPatch2(requestParameters.id, requestParameters.collectionModelObject, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * update-bookstock-by-lendingset-Id
     * @param {LendingSetPropertyReferenceControllerApiCreatePropertyReferenceLendingsetPutRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof LendingSetPropertyReferenceControllerApi
     */
    public createPropertyReferenceLendingsetPut(requestParameters: LendingSetPropertyReferenceControllerApiCreatePropertyReferenceLendingsetPutRequest, options?: RawAxiosRequestConfig) {
        return LendingSetPropertyReferenceControllerApiFp(this.configuration).createPropertyReferenceLendingsetPut(requestParameters.id, requestParameters.collectionModelObject, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * update-customer-by-lendingset-Id
     * @param {LendingSetPropertyReferenceControllerApiCreatePropertyReferenceLendingsetPut1Request} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof LendingSetPropertyReferenceControllerApi
     */
    public createPropertyReferenceLendingsetPut1(requestParameters: LendingSetPropertyReferenceControllerApiCreatePropertyReferenceLendingsetPut1Request, options?: RawAxiosRequestConfig) {
        return LendingSetPropertyReferenceControllerApiFp(this.configuration).createPropertyReferenceLendingsetPut1(requestParameters.id, requestParameters.collectionModelObject, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * update-lendingstatus-by-lendingset-Id
     * @param {LendingSetPropertyReferenceControllerApiCreatePropertyReferenceLendingsetPut2Request} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof LendingSetPropertyReferenceControllerApi
     */
    public createPropertyReferenceLendingsetPut2(requestParameters: LendingSetPropertyReferenceControllerApiCreatePropertyReferenceLendingsetPut2Request, options?: RawAxiosRequestConfig) {
        return LendingSetPropertyReferenceControllerApiFp(this.configuration).createPropertyReferenceLendingsetPut2(requestParameters.id, requestParameters.collectionModelObject, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * delete-bookstock-by-lendingset-Id
     * @param {LendingSetPropertyReferenceControllerApiDeletePropertyReferenceIdLendingsetDeleteRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof LendingSetPropertyReferenceControllerApi
     */
    public deletePropertyReferenceIdLendingsetDelete(requestParameters: LendingSetPropertyReferenceControllerApiDeletePropertyReferenceIdLendingsetDeleteRequest, options?: RawAxiosRequestConfig) {
        return LendingSetPropertyReferenceControllerApiFp(this.configuration).deletePropertyReferenceIdLendingsetDelete(requestParameters.id, requestParameters.propertyId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * delete-customer-by-lendingset-Id
     * @param {LendingSetPropertyReferenceControllerApiDeletePropertyReferenceIdLendingsetDelete1Request} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof LendingSetPropertyReferenceControllerApi
     */
    public deletePropertyReferenceIdLendingsetDelete1(requestParameters: LendingSetPropertyReferenceControllerApiDeletePropertyReferenceIdLendingsetDelete1Request, options?: RawAxiosRequestConfig) {
        return LendingSetPropertyReferenceControllerApiFp(this.configuration).deletePropertyReferenceIdLendingsetDelete1(requestParameters.id, requestParameters.propertyId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * delete-lendingstatus-by-lendingset-Id
     * @param {LendingSetPropertyReferenceControllerApiDeletePropertyReferenceIdLendingsetDelete2Request} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof LendingSetPropertyReferenceControllerApi
     */
    public deletePropertyReferenceIdLendingsetDelete2(requestParameters: LendingSetPropertyReferenceControllerApiDeletePropertyReferenceIdLendingsetDelete2Request, options?: RawAxiosRequestConfig) {
        return LendingSetPropertyReferenceControllerApiFp(this.configuration).deletePropertyReferenceIdLendingsetDelete2(requestParameters.id, requestParameters.propertyId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * delete-bookstock-by-lendingset-Id
     * @param {LendingSetPropertyReferenceControllerApiDeletePropertyReferenceLendingsetDeleteRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof LendingSetPropertyReferenceControllerApi
     */
    public deletePropertyReferenceLendingsetDelete(requestParameters: LendingSetPropertyReferenceControllerApiDeletePropertyReferenceLendingsetDeleteRequest, options?: RawAxiosRequestConfig) {
        return LendingSetPropertyReferenceControllerApiFp(this.configuration).deletePropertyReferenceLendingsetDelete(requestParameters.id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * delete-customer-by-lendingset-Id
     * @param {LendingSetPropertyReferenceControllerApiDeletePropertyReferenceLendingsetDelete1Request} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof LendingSetPropertyReferenceControllerApi
     */
    public deletePropertyReferenceLendingsetDelete1(requestParameters: LendingSetPropertyReferenceControllerApiDeletePropertyReferenceLendingsetDelete1Request, options?: RawAxiosRequestConfig) {
        return LendingSetPropertyReferenceControllerApiFp(this.configuration).deletePropertyReferenceLendingsetDelete1(requestParameters.id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * delete-lendingstatus-by-lendingset-Id
     * @param {LendingSetPropertyReferenceControllerApiDeletePropertyReferenceLendingsetDelete2Request} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof LendingSetPropertyReferenceControllerApi
     */
    public deletePropertyReferenceLendingsetDelete2(requestParameters: LendingSetPropertyReferenceControllerApiDeletePropertyReferenceLendingsetDelete2Request, options?: RawAxiosRequestConfig) {
        return LendingSetPropertyReferenceControllerApiFp(this.configuration).deletePropertyReferenceLendingsetDelete2(requestParameters.id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * get-bookstock-by-lendingset-Id
     * @param {LendingSetPropertyReferenceControllerApiFollowPropertyReferenceLendingsetGetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof LendingSetPropertyReferenceControllerApi
     */
    public followPropertyReferenceLendingsetGet(requestParameters: LendingSetPropertyReferenceControllerApiFollowPropertyReferenceLendingsetGetRequest, options?: RawAxiosRequestConfig) {
        return LendingSetPropertyReferenceControllerApiFp(this.configuration).followPropertyReferenceLendingsetGet(requestParameters.id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * get-bookstock-by-lendingset-Id
     * @param {LendingSetPropertyReferenceControllerApiFollowPropertyReferenceLendingsetGet1Request} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof LendingSetPropertyReferenceControllerApi
     */
    public followPropertyReferenceLendingsetGet1(requestParameters: LendingSetPropertyReferenceControllerApiFollowPropertyReferenceLendingsetGet1Request, options?: RawAxiosRequestConfig) {
        return LendingSetPropertyReferenceControllerApiFp(this.configuration).followPropertyReferenceLendingsetGet1(requestParameters.id, requestParameters.propertyId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * get-customer-by-lendingset-Id
     * @param {LendingSetPropertyReferenceControllerApiFollowPropertyReferenceLendingsetGet2Request} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof LendingSetPropertyReferenceControllerApi
     */
    public followPropertyReferenceLendingsetGet2(requestParameters: LendingSetPropertyReferenceControllerApiFollowPropertyReferenceLendingsetGet2Request, options?: RawAxiosRequestConfig) {
        return LendingSetPropertyReferenceControllerApiFp(this.configuration).followPropertyReferenceLendingsetGet2(requestParameters.id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * get-customer-by-lendingset-Id
     * @param {LendingSetPropertyReferenceControllerApiFollowPropertyReferenceLendingsetGet3Request} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof LendingSetPropertyReferenceControllerApi
     */
    public followPropertyReferenceLendingsetGet3(requestParameters: LendingSetPropertyReferenceControllerApiFollowPropertyReferenceLendingsetGet3Request, options?: RawAxiosRequestConfig) {
        return LendingSetPropertyReferenceControllerApiFp(this.configuration).followPropertyReferenceLendingsetGet3(requestParameters.id, requestParameters.propertyId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * get-lendingstatus-by-lendingset-Id
     * @param {LendingSetPropertyReferenceControllerApiFollowPropertyReferenceLendingsetGet4Request} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof LendingSetPropertyReferenceControllerApi
     */
    public followPropertyReferenceLendingsetGet4(requestParameters: LendingSetPropertyReferenceControllerApiFollowPropertyReferenceLendingsetGet4Request, options?: RawAxiosRequestConfig) {
        return LendingSetPropertyReferenceControllerApiFp(this.configuration).followPropertyReferenceLendingsetGet4(requestParameters.id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * get-lendingstatus-by-lendingset-Id
     * @param {LendingSetPropertyReferenceControllerApiFollowPropertyReferenceLendingsetGet5Request} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof LendingSetPropertyReferenceControllerApi
     */
    public followPropertyReferenceLendingsetGet5(requestParameters: LendingSetPropertyReferenceControllerApiFollowPropertyReferenceLendingsetGet5Request, options?: RawAxiosRequestConfig) {
        return LendingSetPropertyReferenceControllerApiFp(this.configuration).followPropertyReferenceLendingsetGet5(requestParameters.id, requestParameters.propertyId, options).then((request) => request(this.axios, this.basePath));
    }
}



/**
 * LendingStatusEntityControllerApi - axios parameter creator
 * @export
 */
export const LendingStatusEntityControllerApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * delete-lendingstatus
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteItemResourceLendingstatusDelete: async (id: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('deleteItemResourceLendingstatusDelete', 'id', id)
            const localVarPath = `/lendingStatuses/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * get-lendingstatus
         * @param {number} [page] Zero-based page index (0..N)
         * @param {number} [size] The size of the page to be returned
         * @param {Array<string>} [sort] Sorting criteria in the format: property,(asc|desc). Default sort order is ascending. Multiple sort criteria are supported.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getCollectionResourceLendingstatusGet: async (page?: number, size?: number, sort?: Array<string>, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/lendingStatuses`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }

            if (size !== undefined) {
                localVarQueryParameter['size'] = size;
            }

            if (sort) {
                localVarQueryParameter['sort'] = sort;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * get-lendingstatus
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getItemResourceLendingstatusGet: async (id: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('getItemResourceLendingstatusGet', 'id', id)
            const localVarPath = `/lendingStatuses/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * patch-lendingstatus
         * @param {string} id 
         * @param {LendingStatusRequestBody} lendingStatusRequestBody 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        patchItemResourceLendingstatusPatch: async (id: string, lendingStatusRequestBody: LendingStatusRequestBody, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('patchItemResourceLendingstatusPatch', 'id', id)
            // verify required parameter 'lendingStatusRequestBody' is not null or undefined
            assertParamExists('patchItemResourceLendingstatusPatch', 'lendingStatusRequestBody', lendingStatusRequestBody)
            const localVarPath = `/lendingStatuses/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(lendingStatusRequestBody, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * create-lendingstatus
         * @param {LendingStatusRequestBody} lendingStatusRequestBody 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postCollectionResourceLendingstatusPost: async (lendingStatusRequestBody: LendingStatusRequestBody, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'lendingStatusRequestBody' is not null or undefined
            assertParamExists('postCollectionResourceLendingstatusPost', 'lendingStatusRequestBody', lendingStatusRequestBody)
            const localVarPath = `/lendingStatuses`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(lendingStatusRequestBody, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * update-lendingstatus
         * @param {string} id 
         * @param {LendingStatusRequestBody} lendingStatusRequestBody 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        putItemResourceLendingstatusPut: async (id: string, lendingStatusRequestBody: LendingStatusRequestBody, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('putItemResourceLendingstatusPut', 'id', id)
            // verify required parameter 'lendingStatusRequestBody' is not null or undefined
            assertParamExists('putItemResourceLendingstatusPut', 'lendingStatusRequestBody', lendingStatusRequestBody)
            const localVarPath = `/lendingStatuses/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(lendingStatusRequestBody, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * LendingStatusEntityControllerApi - functional programming interface
 * @export
 */
export const LendingStatusEntityControllerApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = LendingStatusEntityControllerApiAxiosParamCreator(configuration)
    return {
        /**
         * delete-lendingstatus
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deleteItemResourceLendingstatusDelete(id: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.deleteItemResourceLendingstatusDelete(id, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['LendingStatusEntityControllerApi.deleteItemResourceLendingstatusDelete']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * get-lendingstatus
         * @param {number} [page] Zero-based page index (0..N)
         * @param {number} [size] The size of the page to be returned
         * @param {Array<string>} [sort] Sorting criteria in the format: property,(asc|desc). Default sort order is ascending. Multiple sort criteria are supported.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getCollectionResourceLendingstatusGet(page?: number, size?: number, sort?: Array<string>, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<PagedModelEntityModelLendingStatus>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getCollectionResourceLendingstatusGet(page, size, sort, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['LendingStatusEntityControllerApi.getCollectionResourceLendingstatusGet']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * get-lendingstatus
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getItemResourceLendingstatusGet(id: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<EntityModelLendingStatus>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getItemResourceLendingstatusGet(id, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['LendingStatusEntityControllerApi.getItemResourceLendingstatusGet']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * patch-lendingstatus
         * @param {string} id 
         * @param {LendingStatusRequestBody} lendingStatusRequestBody 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async patchItemResourceLendingstatusPatch(id: string, lendingStatusRequestBody: LendingStatusRequestBody, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<EntityModelLendingStatus>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.patchItemResourceLendingstatusPatch(id, lendingStatusRequestBody, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['LendingStatusEntityControllerApi.patchItemResourceLendingstatusPatch']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * create-lendingstatus
         * @param {LendingStatusRequestBody} lendingStatusRequestBody 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async postCollectionResourceLendingstatusPost(lendingStatusRequestBody: LendingStatusRequestBody, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<EntityModelLendingStatus>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.postCollectionResourceLendingstatusPost(lendingStatusRequestBody, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['LendingStatusEntityControllerApi.postCollectionResourceLendingstatusPost']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * update-lendingstatus
         * @param {string} id 
         * @param {LendingStatusRequestBody} lendingStatusRequestBody 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async putItemResourceLendingstatusPut(id: string, lendingStatusRequestBody: LendingStatusRequestBody, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<EntityModelLendingStatus>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.putItemResourceLendingstatusPut(id, lendingStatusRequestBody, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['LendingStatusEntityControllerApi.putItemResourceLendingstatusPut']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * LendingStatusEntityControllerApi - factory interface
 * @export
 */
export const LendingStatusEntityControllerApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = LendingStatusEntityControllerApiFp(configuration)
    return {
        /**
         * delete-lendingstatus
         * @param {LendingStatusEntityControllerApiDeleteItemResourceLendingstatusDeleteRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteItemResourceLendingstatusDelete(requestParameters: LendingStatusEntityControllerApiDeleteItemResourceLendingstatusDeleteRequest, options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.deleteItemResourceLendingstatusDelete(requestParameters.id, options).then((request) => request(axios, basePath));
        },
        /**
         * get-lendingstatus
         * @param {LendingStatusEntityControllerApiGetCollectionResourceLendingstatusGetRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getCollectionResourceLendingstatusGet(requestParameters: LendingStatusEntityControllerApiGetCollectionResourceLendingstatusGetRequest = {}, options?: RawAxiosRequestConfig): AxiosPromise<PagedModelEntityModelLendingStatus> {
            return localVarFp.getCollectionResourceLendingstatusGet(requestParameters.page, requestParameters.size, requestParameters.sort, options).then((request) => request(axios, basePath));
        },
        /**
         * get-lendingstatus
         * @param {LendingStatusEntityControllerApiGetItemResourceLendingstatusGetRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getItemResourceLendingstatusGet(requestParameters: LendingStatusEntityControllerApiGetItemResourceLendingstatusGetRequest, options?: RawAxiosRequestConfig): AxiosPromise<EntityModelLendingStatus> {
            return localVarFp.getItemResourceLendingstatusGet(requestParameters.id, options).then((request) => request(axios, basePath));
        },
        /**
         * patch-lendingstatus
         * @param {LendingStatusEntityControllerApiPatchItemResourceLendingstatusPatchRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        patchItemResourceLendingstatusPatch(requestParameters: LendingStatusEntityControllerApiPatchItemResourceLendingstatusPatchRequest, options?: RawAxiosRequestConfig): AxiosPromise<EntityModelLendingStatus> {
            return localVarFp.patchItemResourceLendingstatusPatch(requestParameters.id, requestParameters.lendingStatusRequestBody, options).then((request) => request(axios, basePath));
        },
        /**
         * create-lendingstatus
         * @param {LendingStatusEntityControllerApiPostCollectionResourceLendingstatusPostRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postCollectionResourceLendingstatusPost(requestParameters: LendingStatusEntityControllerApiPostCollectionResourceLendingstatusPostRequest, options?: RawAxiosRequestConfig): AxiosPromise<EntityModelLendingStatus> {
            return localVarFp.postCollectionResourceLendingstatusPost(requestParameters.lendingStatusRequestBody, options).then((request) => request(axios, basePath));
        },
        /**
         * update-lendingstatus
         * @param {LendingStatusEntityControllerApiPutItemResourceLendingstatusPutRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        putItemResourceLendingstatusPut(requestParameters: LendingStatusEntityControllerApiPutItemResourceLendingstatusPutRequest, options?: RawAxiosRequestConfig): AxiosPromise<EntityModelLendingStatus> {
            return localVarFp.putItemResourceLendingstatusPut(requestParameters.id, requestParameters.lendingStatusRequestBody, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * LendingStatusEntityControllerApi - interface
 * @export
 * @interface LendingStatusEntityControllerApi
 */
export interface LendingStatusEntityControllerApiInterface {
    /**
     * delete-lendingstatus
     * @param {LendingStatusEntityControllerApiDeleteItemResourceLendingstatusDeleteRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof LendingStatusEntityControllerApiInterface
     */
    deleteItemResourceLendingstatusDelete(requestParameters: LendingStatusEntityControllerApiDeleteItemResourceLendingstatusDeleteRequest, options?: RawAxiosRequestConfig): AxiosPromise<void>;

    /**
     * get-lendingstatus
     * @param {LendingStatusEntityControllerApiGetCollectionResourceLendingstatusGetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof LendingStatusEntityControllerApiInterface
     */
    getCollectionResourceLendingstatusGet(requestParameters?: LendingStatusEntityControllerApiGetCollectionResourceLendingstatusGetRequest, options?: RawAxiosRequestConfig): AxiosPromise<PagedModelEntityModelLendingStatus>;

    /**
     * get-lendingstatus
     * @param {LendingStatusEntityControllerApiGetItemResourceLendingstatusGetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof LendingStatusEntityControllerApiInterface
     */
    getItemResourceLendingstatusGet(requestParameters: LendingStatusEntityControllerApiGetItemResourceLendingstatusGetRequest, options?: RawAxiosRequestConfig): AxiosPromise<EntityModelLendingStatus>;

    /**
     * patch-lendingstatus
     * @param {LendingStatusEntityControllerApiPatchItemResourceLendingstatusPatchRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof LendingStatusEntityControllerApiInterface
     */
    patchItemResourceLendingstatusPatch(requestParameters: LendingStatusEntityControllerApiPatchItemResourceLendingstatusPatchRequest, options?: RawAxiosRequestConfig): AxiosPromise<EntityModelLendingStatus>;

    /**
     * create-lendingstatus
     * @param {LendingStatusEntityControllerApiPostCollectionResourceLendingstatusPostRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof LendingStatusEntityControllerApiInterface
     */
    postCollectionResourceLendingstatusPost(requestParameters: LendingStatusEntityControllerApiPostCollectionResourceLendingstatusPostRequest, options?: RawAxiosRequestConfig): AxiosPromise<EntityModelLendingStatus>;

    /**
     * update-lendingstatus
     * @param {LendingStatusEntityControllerApiPutItemResourceLendingstatusPutRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof LendingStatusEntityControllerApiInterface
     */
    putItemResourceLendingstatusPut(requestParameters: LendingStatusEntityControllerApiPutItemResourceLendingstatusPutRequest, options?: RawAxiosRequestConfig): AxiosPromise<EntityModelLendingStatus>;

}

/**
 * Request parameters for deleteItemResourceLendingstatusDelete operation in LendingStatusEntityControllerApi.
 * @export
 * @interface LendingStatusEntityControllerApiDeleteItemResourceLendingstatusDeleteRequest
 */
export interface LendingStatusEntityControllerApiDeleteItemResourceLendingstatusDeleteRequest {
    /**
     * 
     * @type {string}
     * @memberof LendingStatusEntityControllerApiDeleteItemResourceLendingstatusDelete
     */
    readonly id: string
}

/**
 * Request parameters for getCollectionResourceLendingstatusGet operation in LendingStatusEntityControllerApi.
 * @export
 * @interface LendingStatusEntityControllerApiGetCollectionResourceLendingstatusGetRequest
 */
export interface LendingStatusEntityControllerApiGetCollectionResourceLendingstatusGetRequest {
    /**
     * Zero-based page index (0..N)
     * @type {number}
     * @memberof LendingStatusEntityControllerApiGetCollectionResourceLendingstatusGet
     */
    readonly page?: number

    /**
     * The size of the page to be returned
     * @type {number}
     * @memberof LendingStatusEntityControllerApiGetCollectionResourceLendingstatusGet
     */
    readonly size?: number

    /**
     * Sorting criteria in the format: property,(asc|desc). Default sort order is ascending. Multiple sort criteria are supported.
     * @type {Array<string>}
     * @memberof LendingStatusEntityControllerApiGetCollectionResourceLendingstatusGet
     */
    readonly sort?: Array<string>
}

/**
 * Request parameters for getItemResourceLendingstatusGet operation in LendingStatusEntityControllerApi.
 * @export
 * @interface LendingStatusEntityControllerApiGetItemResourceLendingstatusGetRequest
 */
export interface LendingStatusEntityControllerApiGetItemResourceLendingstatusGetRequest {
    /**
     * 
     * @type {string}
     * @memberof LendingStatusEntityControllerApiGetItemResourceLendingstatusGet
     */
    readonly id: string
}

/**
 * Request parameters for patchItemResourceLendingstatusPatch operation in LendingStatusEntityControllerApi.
 * @export
 * @interface LendingStatusEntityControllerApiPatchItemResourceLendingstatusPatchRequest
 */
export interface LendingStatusEntityControllerApiPatchItemResourceLendingstatusPatchRequest {
    /**
     * 
     * @type {string}
     * @memberof LendingStatusEntityControllerApiPatchItemResourceLendingstatusPatch
     */
    readonly id: string

    /**
     * 
     * @type {LendingStatusRequestBody}
     * @memberof LendingStatusEntityControllerApiPatchItemResourceLendingstatusPatch
     */
    readonly lendingStatusRequestBody: LendingStatusRequestBody
}

/**
 * Request parameters for postCollectionResourceLendingstatusPost operation in LendingStatusEntityControllerApi.
 * @export
 * @interface LendingStatusEntityControllerApiPostCollectionResourceLendingstatusPostRequest
 */
export interface LendingStatusEntityControllerApiPostCollectionResourceLendingstatusPostRequest {
    /**
     * 
     * @type {LendingStatusRequestBody}
     * @memberof LendingStatusEntityControllerApiPostCollectionResourceLendingstatusPost
     */
    readonly lendingStatusRequestBody: LendingStatusRequestBody
}

/**
 * Request parameters for putItemResourceLendingstatusPut operation in LendingStatusEntityControllerApi.
 * @export
 * @interface LendingStatusEntityControllerApiPutItemResourceLendingstatusPutRequest
 */
export interface LendingStatusEntityControllerApiPutItemResourceLendingstatusPutRequest {
    /**
     * 
     * @type {string}
     * @memberof LendingStatusEntityControllerApiPutItemResourceLendingstatusPut
     */
    readonly id: string

    /**
     * 
     * @type {LendingStatusRequestBody}
     * @memberof LendingStatusEntityControllerApiPutItemResourceLendingstatusPut
     */
    readonly lendingStatusRequestBody: LendingStatusRequestBody
}

/**
 * LendingStatusEntityControllerApi - object-oriented interface
 * @export
 * @class LendingStatusEntityControllerApi
 * @extends {BaseAPI}
 */
export class LendingStatusEntityControllerApi extends BaseAPI implements LendingStatusEntityControllerApiInterface {
    /**
     * delete-lendingstatus
     * @param {LendingStatusEntityControllerApiDeleteItemResourceLendingstatusDeleteRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof LendingStatusEntityControllerApi
     */
    public deleteItemResourceLendingstatusDelete(requestParameters: LendingStatusEntityControllerApiDeleteItemResourceLendingstatusDeleteRequest, options?: RawAxiosRequestConfig) {
        return LendingStatusEntityControllerApiFp(this.configuration).deleteItemResourceLendingstatusDelete(requestParameters.id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * get-lendingstatus
     * @param {LendingStatusEntityControllerApiGetCollectionResourceLendingstatusGetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof LendingStatusEntityControllerApi
     */
    public getCollectionResourceLendingstatusGet(requestParameters: LendingStatusEntityControllerApiGetCollectionResourceLendingstatusGetRequest = {}, options?: RawAxiosRequestConfig) {
        return LendingStatusEntityControllerApiFp(this.configuration).getCollectionResourceLendingstatusGet(requestParameters.page, requestParameters.size, requestParameters.sort, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * get-lendingstatus
     * @param {LendingStatusEntityControllerApiGetItemResourceLendingstatusGetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof LendingStatusEntityControllerApi
     */
    public getItemResourceLendingstatusGet(requestParameters: LendingStatusEntityControllerApiGetItemResourceLendingstatusGetRequest, options?: RawAxiosRequestConfig) {
        return LendingStatusEntityControllerApiFp(this.configuration).getItemResourceLendingstatusGet(requestParameters.id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * patch-lendingstatus
     * @param {LendingStatusEntityControllerApiPatchItemResourceLendingstatusPatchRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof LendingStatusEntityControllerApi
     */
    public patchItemResourceLendingstatusPatch(requestParameters: LendingStatusEntityControllerApiPatchItemResourceLendingstatusPatchRequest, options?: RawAxiosRequestConfig) {
        return LendingStatusEntityControllerApiFp(this.configuration).patchItemResourceLendingstatusPatch(requestParameters.id, requestParameters.lendingStatusRequestBody, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * create-lendingstatus
     * @param {LendingStatusEntityControllerApiPostCollectionResourceLendingstatusPostRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof LendingStatusEntityControllerApi
     */
    public postCollectionResourceLendingstatusPost(requestParameters: LendingStatusEntityControllerApiPostCollectionResourceLendingstatusPostRequest, options?: RawAxiosRequestConfig) {
        return LendingStatusEntityControllerApiFp(this.configuration).postCollectionResourceLendingstatusPost(requestParameters.lendingStatusRequestBody, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * update-lendingstatus
     * @param {LendingStatusEntityControllerApiPutItemResourceLendingstatusPutRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof LendingStatusEntityControllerApi
     */
    public putItemResourceLendingstatusPut(requestParameters: LendingStatusEntityControllerApiPutItemResourceLendingstatusPutRequest, options?: RawAxiosRequestConfig) {
        return LendingStatusEntityControllerApiFp(this.configuration).putItemResourceLendingstatusPut(requestParameters.id, requestParameters.lendingStatusRequestBody, options).then((request) => request(this.axios, this.basePath));
    }
}



/**
 * LendingStatusSearchControllerApi - axios parameter creator
 * @export
 */
export const LendingStatusSearchControllerApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @param {number} [id] 
         * @param {string} [name] 
         * @param {number} [page] Zero-based page index (0..N)
         * @param {number} [size] The size of the page to be returned
         * @param {Array<string>} [sort] Sorting criteria in the format: property,(asc|desc). Default sort order is ascending. Multiple sort criteria are supported.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        executeSearchLendingstatusGet: async (id?: number, name?: string, page?: number, size?: number, sort?: Array<string>, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/lendingStatuses/search/findByComplexConditions`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (id !== undefined) {
                localVarQueryParameter['id'] = id;
            }

            if (name !== undefined) {
                localVarQueryParameter['name'] = name;
            }

            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }

            if (size !== undefined) {
                localVarQueryParameter['size'] = size;
            }

            if (sort) {
                localVarQueryParameter['sort'] = sort;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * LendingStatusSearchControllerApi - functional programming interface
 * @export
 */
export const LendingStatusSearchControllerApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = LendingStatusSearchControllerApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @param {number} [id] 
         * @param {string} [name] 
         * @param {number} [page] Zero-based page index (0..N)
         * @param {number} [size] The size of the page to be returned
         * @param {Array<string>} [sort] Sorting criteria in the format: property,(asc|desc). Default sort order is ascending. Multiple sort criteria are supported.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async executeSearchLendingstatusGet(id?: number, name?: string, page?: number, size?: number, sort?: Array<string>, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<PagedModelEntityModelLendingStatus>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.executeSearchLendingstatusGet(id, name, page, size, sort, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['LendingStatusSearchControllerApi.executeSearchLendingstatusGet']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * LendingStatusSearchControllerApi - factory interface
 * @export
 */
export const LendingStatusSearchControllerApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = LendingStatusSearchControllerApiFp(configuration)
    return {
        /**
         * 
         * @param {LendingStatusSearchControllerApiExecuteSearchLendingstatusGetRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        executeSearchLendingstatusGet(requestParameters: LendingStatusSearchControllerApiExecuteSearchLendingstatusGetRequest = {}, options?: RawAxiosRequestConfig): AxiosPromise<PagedModelEntityModelLendingStatus> {
            return localVarFp.executeSearchLendingstatusGet(requestParameters.id, requestParameters.name, requestParameters.page, requestParameters.size, requestParameters.sort, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * LendingStatusSearchControllerApi - interface
 * @export
 * @interface LendingStatusSearchControllerApi
 */
export interface LendingStatusSearchControllerApiInterface {
    /**
     * 
     * @param {LendingStatusSearchControllerApiExecuteSearchLendingstatusGetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof LendingStatusSearchControllerApiInterface
     */
    executeSearchLendingstatusGet(requestParameters?: LendingStatusSearchControllerApiExecuteSearchLendingstatusGetRequest, options?: RawAxiosRequestConfig): AxiosPromise<PagedModelEntityModelLendingStatus>;

}

/**
 * Request parameters for executeSearchLendingstatusGet operation in LendingStatusSearchControllerApi.
 * @export
 * @interface LendingStatusSearchControllerApiExecuteSearchLendingstatusGetRequest
 */
export interface LendingStatusSearchControllerApiExecuteSearchLendingstatusGetRequest {
    /**
     * 
     * @type {number}
     * @memberof LendingStatusSearchControllerApiExecuteSearchLendingstatusGet
     */
    readonly id?: number

    /**
     * 
     * @type {string}
     * @memberof LendingStatusSearchControllerApiExecuteSearchLendingstatusGet
     */
    readonly name?: string

    /**
     * Zero-based page index (0..N)
     * @type {number}
     * @memberof LendingStatusSearchControllerApiExecuteSearchLendingstatusGet
     */
    readonly page?: number

    /**
     * The size of the page to be returned
     * @type {number}
     * @memberof LendingStatusSearchControllerApiExecuteSearchLendingstatusGet
     */
    readonly size?: number

    /**
     * Sorting criteria in the format: property,(asc|desc). Default sort order is ascending. Multiple sort criteria are supported.
     * @type {Array<string>}
     * @memberof LendingStatusSearchControllerApiExecuteSearchLendingstatusGet
     */
    readonly sort?: Array<string>
}

/**
 * LendingStatusSearchControllerApi - object-oriented interface
 * @export
 * @class LendingStatusSearchControllerApi
 * @extends {BaseAPI}
 */
export class LendingStatusSearchControllerApi extends BaseAPI implements LendingStatusSearchControllerApiInterface {
    /**
     * 
     * @param {LendingStatusSearchControllerApiExecuteSearchLendingstatusGetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof LendingStatusSearchControllerApi
     */
    public executeSearchLendingstatusGet(requestParameters: LendingStatusSearchControllerApiExecuteSearchLendingstatusGetRequest = {}, options?: RawAxiosRequestConfig) {
        return LendingStatusSearchControllerApiFp(this.configuration).executeSearchLendingstatusGet(requestParameters.id, requestParameters.name, requestParameters.page, requestParameters.size, requestParameters.sort, options).then((request) => request(this.axios, this.basePath));
    }
}



/**
 * NdcCategoryEntityControllerApi - axios parameter creator
 * @export
 */
export const NdcCategoryEntityControllerApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * delete-ndccategory
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteItemResourceNdccategoryDelete: async (id: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('deleteItemResourceNdccategoryDelete', 'id', id)
            const localVarPath = `/ndcCategories/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * get-ndccategory
         * @param {number} [page] Zero-based page index (0..N)
         * @param {number} [size] The size of the page to be returned
         * @param {Array<string>} [sort] Sorting criteria in the format: property,(asc|desc). Default sort order is ascending. Multiple sort criteria are supported.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getCollectionResourceNdccategoryGet: async (page?: number, size?: number, sort?: Array<string>, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/ndcCategories`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }

            if (size !== undefined) {
                localVarQueryParameter['size'] = size;
            }

            if (sort) {
                localVarQueryParameter['sort'] = sort;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * get-ndccategory
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getItemResourceNdccategoryGet: async (id: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('getItemResourceNdccategoryGet', 'id', id)
            const localVarPath = `/ndcCategories/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * patch-ndccategory
         * @param {string} id 
         * @param {NdcCategoryRequestBody} ndcCategoryRequestBody 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        patchItemResourceNdccategoryPatch: async (id: string, ndcCategoryRequestBody: NdcCategoryRequestBody, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('patchItemResourceNdccategoryPatch', 'id', id)
            // verify required parameter 'ndcCategoryRequestBody' is not null or undefined
            assertParamExists('patchItemResourceNdccategoryPatch', 'ndcCategoryRequestBody', ndcCategoryRequestBody)
            const localVarPath = `/ndcCategories/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(ndcCategoryRequestBody, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * create-ndccategory
         * @param {NdcCategoryRequestBody} ndcCategoryRequestBody 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postCollectionResourceNdccategoryPost: async (ndcCategoryRequestBody: NdcCategoryRequestBody, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'ndcCategoryRequestBody' is not null or undefined
            assertParamExists('postCollectionResourceNdccategoryPost', 'ndcCategoryRequestBody', ndcCategoryRequestBody)
            const localVarPath = `/ndcCategories`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(ndcCategoryRequestBody, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * update-ndccategory
         * @param {string} id 
         * @param {NdcCategoryRequestBody} ndcCategoryRequestBody 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        putItemResourceNdccategoryPut: async (id: string, ndcCategoryRequestBody: NdcCategoryRequestBody, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('putItemResourceNdccategoryPut', 'id', id)
            // verify required parameter 'ndcCategoryRequestBody' is not null or undefined
            assertParamExists('putItemResourceNdccategoryPut', 'ndcCategoryRequestBody', ndcCategoryRequestBody)
            const localVarPath = `/ndcCategories/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(ndcCategoryRequestBody, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * NdcCategoryEntityControllerApi - functional programming interface
 * @export
 */
export const NdcCategoryEntityControllerApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = NdcCategoryEntityControllerApiAxiosParamCreator(configuration)
    return {
        /**
         * delete-ndccategory
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deleteItemResourceNdccategoryDelete(id: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.deleteItemResourceNdccategoryDelete(id, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['NdcCategoryEntityControllerApi.deleteItemResourceNdccategoryDelete']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * get-ndccategory
         * @param {number} [page] Zero-based page index (0..N)
         * @param {number} [size] The size of the page to be returned
         * @param {Array<string>} [sort] Sorting criteria in the format: property,(asc|desc). Default sort order is ascending. Multiple sort criteria are supported.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getCollectionResourceNdccategoryGet(page?: number, size?: number, sort?: Array<string>, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<PagedModelEntityModelNdcCategory>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getCollectionResourceNdccategoryGet(page, size, sort, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['NdcCategoryEntityControllerApi.getCollectionResourceNdccategoryGet']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * get-ndccategory
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getItemResourceNdccategoryGet(id: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<EntityModelNdcCategory>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getItemResourceNdccategoryGet(id, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['NdcCategoryEntityControllerApi.getItemResourceNdccategoryGet']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * patch-ndccategory
         * @param {string} id 
         * @param {NdcCategoryRequestBody} ndcCategoryRequestBody 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async patchItemResourceNdccategoryPatch(id: string, ndcCategoryRequestBody: NdcCategoryRequestBody, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<EntityModelNdcCategory>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.patchItemResourceNdccategoryPatch(id, ndcCategoryRequestBody, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['NdcCategoryEntityControllerApi.patchItemResourceNdccategoryPatch']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * create-ndccategory
         * @param {NdcCategoryRequestBody} ndcCategoryRequestBody 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async postCollectionResourceNdccategoryPost(ndcCategoryRequestBody: NdcCategoryRequestBody, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<EntityModelNdcCategory>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.postCollectionResourceNdccategoryPost(ndcCategoryRequestBody, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['NdcCategoryEntityControllerApi.postCollectionResourceNdccategoryPost']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * update-ndccategory
         * @param {string} id 
         * @param {NdcCategoryRequestBody} ndcCategoryRequestBody 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async putItemResourceNdccategoryPut(id: string, ndcCategoryRequestBody: NdcCategoryRequestBody, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<EntityModelNdcCategory>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.putItemResourceNdccategoryPut(id, ndcCategoryRequestBody, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['NdcCategoryEntityControllerApi.putItemResourceNdccategoryPut']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * NdcCategoryEntityControllerApi - factory interface
 * @export
 */
export const NdcCategoryEntityControllerApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = NdcCategoryEntityControllerApiFp(configuration)
    return {
        /**
         * delete-ndccategory
         * @param {NdcCategoryEntityControllerApiDeleteItemResourceNdccategoryDeleteRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteItemResourceNdccategoryDelete(requestParameters: NdcCategoryEntityControllerApiDeleteItemResourceNdccategoryDeleteRequest, options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.deleteItemResourceNdccategoryDelete(requestParameters.id, options).then((request) => request(axios, basePath));
        },
        /**
         * get-ndccategory
         * @param {NdcCategoryEntityControllerApiGetCollectionResourceNdccategoryGetRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getCollectionResourceNdccategoryGet(requestParameters: NdcCategoryEntityControllerApiGetCollectionResourceNdccategoryGetRequest = {}, options?: RawAxiosRequestConfig): AxiosPromise<PagedModelEntityModelNdcCategory> {
            return localVarFp.getCollectionResourceNdccategoryGet(requestParameters.page, requestParameters.size, requestParameters.sort, options).then((request) => request(axios, basePath));
        },
        /**
         * get-ndccategory
         * @param {NdcCategoryEntityControllerApiGetItemResourceNdccategoryGetRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getItemResourceNdccategoryGet(requestParameters: NdcCategoryEntityControllerApiGetItemResourceNdccategoryGetRequest, options?: RawAxiosRequestConfig): AxiosPromise<EntityModelNdcCategory> {
            return localVarFp.getItemResourceNdccategoryGet(requestParameters.id, options).then((request) => request(axios, basePath));
        },
        /**
         * patch-ndccategory
         * @param {NdcCategoryEntityControllerApiPatchItemResourceNdccategoryPatchRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        patchItemResourceNdccategoryPatch(requestParameters: NdcCategoryEntityControllerApiPatchItemResourceNdccategoryPatchRequest, options?: RawAxiosRequestConfig): AxiosPromise<EntityModelNdcCategory> {
            return localVarFp.patchItemResourceNdccategoryPatch(requestParameters.id, requestParameters.ndcCategoryRequestBody, options).then((request) => request(axios, basePath));
        },
        /**
         * create-ndccategory
         * @param {NdcCategoryEntityControllerApiPostCollectionResourceNdccategoryPostRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postCollectionResourceNdccategoryPost(requestParameters: NdcCategoryEntityControllerApiPostCollectionResourceNdccategoryPostRequest, options?: RawAxiosRequestConfig): AxiosPromise<EntityModelNdcCategory> {
            return localVarFp.postCollectionResourceNdccategoryPost(requestParameters.ndcCategoryRequestBody, options).then((request) => request(axios, basePath));
        },
        /**
         * update-ndccategory
         * @param {NdcCategoryEntityControllerApiPutItemResourceNdccategoryPutRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        putItemResourceNdccategoryPut(requestParameters: NdcCategoryEntityControllerApiPutItemResourceNdccategoryPutRequest, options?: RawAxiosRequestConfig): AxiosPromise<EntityModelNdcCategory> {
            return localVarFp.putItemResourceNdccategoryPut(requestParameters.id, requestParameters.ndcCategoryRequestBody, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * NdcCategoryEntityControllerApi - interface
 * @export
 * @interface NdcCategoryEntityControllerApi
 */
export interface NdcCategoryEntityControllerApiInterface {
    /**
     * delete-ndccategory
     * @param {NdcCategoryEntityControllerApiDeleteItemResourceNdccategoryDeleteRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof NdcCategoryEntityControllerApiInterface
     */
    deleteItemResourceNdccategoryDelete(requestParameters: NdcCategoryEntityControllerApiDeleteItemResourceNdccategoryDeleteRequest, options?: RawAxiosRequestConfig): AxiosPromise<void>;

    /**
     * get-ndccategory
     * @param {NdcCategoryEntityControllerApiGetCollectionResourceNdccategoryGetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof NdcCategoryEntityControllerApiInterface
     */
    getCollectionResourceNdccategoryGet(requestParameters?: NdcCategoryEntityControllerApiGetCollectionResourceNdccategoryGetRequest, options?: RawAxiosRequestConfig): AxiosPromise<PagedModelEntityModelNdcCategory>;

    /**
     * get-ndccategory
     * @param {NdcCategoryEntityControllerApiGetItemResourceNdccategoryGetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof NdcCategoryEntityControllerApiInterface
     */
    getItemResourceNdccategoryGet(requestParameters: NdcCategoryEntityControllerApiGetItemResourceNdccategoryGetRequest, options?: RawAxiosRequestConfig): AxiosPromise<EntityModelNdcCategory>;

    /**
     * patch-ndccategory
     * @param {NdcCategoryEntityControllerApiPatchItemResourceNdccategoryPatchRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof NdcCategoryEntityControllerApiInterface
     */
    patchItemResourceNdccategoryPatch(requestParameters: NdcCategoryEntityControllerApiPatchItemResourceNdccategoryPatchRequest, options?: RawAxiosRequestConfig): AxiosPromise<EntityModelNdcCategory>;

    /**
     * create-ndccategory
     * @param {NdcCategoryEntityControllerApiPostCollectionResourceNdccategoryPostRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof NdcCategoryEntityControllerApiInterface
     */
    postCollectionResourceNdccategoryPost(requestParameters: NdcCategoryEntityControllerApiPostCollectionResourceNdccategoryPostRequest, options?: RawAxiosRequestConfig): AxiosPromise<EntityModelNdcCategory>;

    /**
     * update-ndccategory
     * @param {NdcCategoryEntityControllerApiPutItemResourceNdccategoryPutRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof NdcCategoryEntityControllerApiInterface
     */
    putItemResourceNdccategoryPut(requestParameters: NdcCategoryEntityControllerApiPutItemResourceNdccategoryPutRequest, options?: RawAxiosRequestConfig): AxiosPromise<EntityModelNdcCategory>;

}

/**
 * Request parameters for deleteItemResourceNdccategoryDelete operation in NdcCategoryEntityControllerApi.
 * @export
 * @interface NdcCategoryEntityControllerApiDeleteItemResourceNdccategoryDeleteRequest
 */
export interface NdcCategoryEntityControllerApiDeleteItemResourceNdccategoryDeleteRequest {
    /**
     * 
     * @type {string}
     * @memberof NdcCategoryEntityControllerApiDeleteItemResourceNdccategoryDelete
     */
    readonly id: string
}

/**
 * Request parameters for getCollectionResourceNdccategoryGet operation in NdcCategoryEntityControllerApi.
 * @export
 * @interface NdcCategoryEntityControllerApiGetCollectionResourceNdccategoryGetRequest
 */
export interface NdcCategoryEntityControllerApiGetCollectionResourceNdccategoryGetRequest {
    /**
     * Zero-based page index (0..N)
     * @type {number}
     * @memberof NdcCategoryEntityControllerApiGetCollectionResourceNdccategoryGet
     */
    readonly page?: number

    /**
     * The size of the page to be returned
     * @type {number}
     * @memberof NdcCategoryEntityControllerApiGetCollectionResourceNdccategoryGet
     */
    readonly size?: number

    /**
     * Sorting criteria in the format: property,(asc|desc). Default sort order is ascending. Multiple sort criteria are supported.
     * @type {Array<string>}
     * @memberof NdcCategoryEntityControllerApiGetCollectionResourceNdccategoryGet
     */
    readonly sort?: Array<string>
}

/**
 * Request parameters for getItemResourceNdccategoryGet operation in NdcCategoryEntityControllerApi.
 * @export
 * @interface NdcCategoryEntityControllerApiGetItemResourceNdccategoryGetRequest
 */
export interface NdcCategoryEntityControllerApiGetItemResourceNdccategoryGetRequest {
    /**
     * 
     * @type {string}
     * @memberof NdcCategoryEntityControllerApiGetItemResourceNdccategoryGet
     */
    readonly id: string
}

/**
 * Request parameters for patchItemResourceNdccategoryPatch operation in NdcCategoryEntityControllerApi.
 * @export
 * @interface NdcCategoryEntityControllerApiPatchItemResourceNdccategoryPatchRequest
 */
export interface NdcCategoryEntityControllerApiPatchItemResourceNdccategoryPatchRequest {
    /**
     * 
     * @type {string}
     * @memberof NdcCategoryEntityControllerApiPatchItemResourceNdccategoryPatch
     */
    readonly id: string

    /**
     * 
     * @type {NdcCategoryRequestBody}
     * @memberof NdcCategoryEntityControllerApiPatchItemResourceNdccategoryPatch
     */
    readonly ndcCategoryRequestBody: NdcCategoryRequestBody
}

/**
 * Request parameters for postCollectionResourceNdccategoryPost operation in NdcCategoryEntityControllerApi.
 * @export
 * @interface NdcCategoryEntityControllerApiPostCollectionResourceNdccategoryPostRequest
 */
export interface NdcCategoryEntityControllerApiPostCollectionResourceNdccategoryPostRequest {
    /**
     * 
     * @type {NdcCategoryRequestBody}
     * @memberof NdcCategoryEntityControllerApiPostCollectionResourceNdccategoryPost
     */
    readonly ndcCategoryRequestBody: NdcCategoryRequestBody
}

/**
 * Request parameters for putItemResourceNdccategoryPut operation in NdcCategoryEntityControllerApi.
 * @export
 * @interface NdcCategoryEntityControllerApiPutItemResourceNdccategoryPutRequest
 */
export interface NdcCategoryEntityControllerApiPutItemResourceNdccategoryPutRequest {
    /**
     * 
     * @type {string}
     * @memberof NdcCategoryEntityControllerApiPutItemResourceNdccategoryPut
     */
    readonly id: string

    /**
     * 
     * @type {NdcCategoryRequestBody}
     * @memberof NdcCategoryEntityControllerApiPutItemResourceNdccategoryPut
     */
    readonly ndcCategoryRequestBody: NdcCategoryRequestBody
}

/**
 * NdcCategoryEntityControllerApi - object-oriented interface
 * @export
 * @class NdcCategoryEntityControllerApi
 * @extends {BaseAPI}
 */
export class NdcCategoryEntityControllerApi extends BaseAPI implements NdcCategoryEntityControllerApiInterface {
    /**
     * delete-ndccategory
     * @param {NdcCategoryEntityControllerApiDeleteItemResourceNdccategoryDeleteRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof NdcCategoryEntityControllerApi
     */
    public deleteItemResourceNdccategoryDelete(requestParameters: NdcCategoryEntityControllerApiDeleteItemResourceNdccategoryDeleteRequest, options?: RawAxiosRequestConfig) {
        return NdcCategoryEntityControllerApiFp(this.configuration).deleteItemResourceNdccategoryDelete(requestParameters.id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * get-ndccategory
     * @param {NdcCategoryEntityControllerApiGetCollectionResourceNdccategoryGetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof NdcCategoryEntityControllerApi
     */
    public getCollectionResourceNdccategoryGet(requestParameters: NdcCategoryEntityControllerApiGetCollectionResourceNdccategoryGetRequest = {}, options?: RawAxiosRequestConfig) {
        return NdcCategoryEntityControllerApiFp(this.configuration).getCollectionResourceNdccategoryGet(requestParameters.page, requestParameters.size, requestParameters.sort, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * get-ndccategory
     * @param {NdcCategoryEntityControllerApiGetItemResourceNdccategoryGetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof NdcCategoryEntityControllerApi
     */
    public getItemResourceNdccategoryGet(requestParameters: NdcCategoryEntityControllerApiGetItemResourceNdccategoryGetRequest, options?: RawAxiosRequestConfig) {
        return NdcCategoryEntityControllerApiFp(this.configuration).getItemResourceNdccategoryGet(requestParameters.id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * patch-ndccategory
     * @param {NdcCategoryEntityControllerApiPatchItemResourceNdccategoryPatchRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof NdcCategoryEntityControllerApi
     */
    public patchItemResourceNdccategoryPatch(requestParameters: NdcCategoryEntityControllerApiPatchItemResourceNdccategoryPatchRequest, options?: RawAxiosRequestConfig) {
        return NdcCategoryEntityControllerApiFp(this.configuration).patchItemResourceNdccategoryPatch(requestParameters.id, requestParameters.ndcCategoryRequestBody, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * create-ndccategory
     * @param {NdcCategoryEntityControllerApiPostCollectionResourceNdccategoryPostRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof NdcCategoryEntityControllerApi
     */
    public postCollectionResourceNdccategoryPost(requestParameters: NdcCategoryEntityControllerApiPostCollectionResourceNdccategoryPostRequest, options?: RawAxiosRequestConfig) {
        return NdcCategoryEntityControllerApiFp(this.configuration).postCollectionResourceNdccategoryPost(requestParameters.ndcCategoryRequestBody, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * update-ndccategory
     * @param {NdcCategoryEntityControllerApiPutItemResourceNdccategoryPutRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof NdcCategoryEntityControllerApi
     */
    public putItemResourceNdccategoryPut(requestParameters: NdcCategoryEntityControllerApiPutItemResourceNdccategoryPutRequest, options?: RawAxiosRequestConfig) {
        return NdcCategoryEntityControllerApiFp(this.configuration).putItemResourceNdccategoryPut(requestParameters.id, requestParameters.ndcCategoryRequestBody, options).then((request) => request(this.axios, this.basePath));
    }
}



/**
 * NdcCategorySearchControllerApi - axios parameter creator
 * @export
 */
export const NdcCategorySearchControllerApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @param {number} [id] 
         * @param {string} [name] 
         * @param {string} [number] 
         * @param {number} [page] Zero-based page index (0..N)
         * @param {number} [size] The size of the page to be returned
         * @param {Array<string>} [sort] Sorting criteria in the format: property,(asc|desc). Default sort order is ascending. Multiple sort criteria are supported.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        executeSearchNdccategoryGet: async (id?: number, name?: string, number?: string, page?: number, size?: number, sort?: Array<string>, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/ndcCategories/search/findByComplexConditions`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (id !== undefined) {
                localVarQueryParameter['id'] = id;
            }

            if (name !== undefined) {
                localVarQueryParameter['name'] = name;
            }

            if (number !== undefined) {
                localVarQueryParameter['number'] = number;
            }

            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }

            if (size !== undefined) {
                localVarQueryParameter['size'] = size;
            }

            if (sort) {
                localVarQueryParameter['sort'] = sort;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * NdcCategorySearchControllerApi - functional programming interface
 * @export
 */
export const NdcCategorySearchControllerApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = NdcCategorySearchControllerApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @param {number} [id] 
         * @param {string} [name] 
         * @param {string} [number] 
         * @param {number} [page] Zero-based page index (0..N)
         * @param {number} [size] The size of the page to be returned
         * @param {Array<string>} [sort] Sorting criteria in the format: property,(asc|desc). Default sort order is ascending. Multiple sort criteria are supported.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async executeSearchNdccategoryGet(id?: number, name?: string, number?: string, page?: number, size?: number, sort?: Array<string>, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<PagedModelEntityModelNdcCategory>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.executeSearchNdccategoryGet(id, name, number, page, size, sort, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['NdcCategorySearchControllerApi.executeSearchNdccategoryGet']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * NdcCategorySearchControllerApi - factory interface
 * @export
 */
export const NdcCategorySearchControllerApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = NdcCategorySearchControllerApiFp(configuration)
    return {
        /**
         * 
         * @param {NdcCategorySearchControllerApiExecuteSearchNdccategoryGetRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        executeSearchNdccategoryGet(requestParameters: NdcCategorySearchControllerApiExecuteSearchNdccategoryGetRequest = {}, options?: RawAxiosRequestConfig): AxiosPromise<PagedModelEntityModelNdcCategory> {
            return localVarFp.executeSearchNdccategoryGet(requestParameters.id, requestParameters.name, requestParameters.number, requestParameters.page, requestParameters.size, requestParameters.sort, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * NdcCategorySearchControllerApi - interface
 * @export
 * @interface NdcCategorySearchControllerApi
 */
export interface NdcCategorySearchControllerApiInterface {
    /**
     * 
     * @param {NdcCategorySearchControllerApiExecuteSearchNdccategoryGetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof NdcCategorySearchControllerApiInterface
     */
    executeSearchNdccategoryGet(requestParameters?: NdcCategorySearchControllerApiExecuteSearchNdccategoryGetRequest, options?: RawAxiosRequestConfig): AxiosPromise<PagedModelEntityModelNdcCategory>;

}

/**
 * Request parameters for executeSearchNdccategoryGet operation in NdcCategorySearchControllerApi.
 * @export
 * @interface NdcCategorySearchControllerApiExecuteSearchNdccategoryGetRequest
 */
export interface NdcCategorySearchControllerApiExecuteSearchNdccategoryGetRequest {
    /**
     * 
     * @type {number}
     * @memberof NdcCategorySearchControllerApiExecuteSearchNdccategoryGet
     */
    readonly id?: number

    /**
     * 
     * @type {string}
     * @memberof NdcCategorySearchControllerApiExecuteSearchNdccategoryGet
     */
    readonly name?: string

    /**
     * 
     * @type {string}
     * @memberof NdcCategorySearchControllerApiExecuteSearchNdccategoryGet
     */
    readonly number?: string

    /**
     * Zero-based page index (0..N)
     * @type {number}
     * @memberof NdcCategorySearchControllerApiExecuteSearchNdccategoryGet
     */
    readonly page?: number

    /**
     * The size of the page to be returned
     * @type {number}
     * @memberof NdcCategorySearchControllerApiExecuteSearchNdccategoryGet
     */
    readonly size?: number

    /**
     * Sorting criteria in the format: property,(asc|desc). Default sort order is ascending. Multiple sort criteria are supported.
     * @type {Array<string>}
     * @memberof NdcCategorySearchControllerApiExecuteSearchNdccategoryGet
     */
    readonly sort?: Array<string>
}

/**
 * NdcCategorySearchControllerApi - object-oriented interface
 * @export
 * @class NdcCategorySearchControllerApi
 * @extends {BaseAPI}
 */
export class NdcCategorySearchControllerApi extends BaseAPI implements NdcCategorySearchControllerApiInterface {
    /**
     * 
     * @param {NdcCategorySearchControllerApiExecuteSearchNdccategoryGetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof NdcCategorySearchControllerApi
     */
    public executeSearchNdccategoryGet(requestParameters: NdcCategorySearchControllerApiExecuteSearchNdccategoryGetRequest = {}, options?: RawAxiosRequestConfig) {
        return NdcCategorySearchControllerApiFp(this.configuration).executeSearchNdccategoryGet(requestParameters.id, requestParameters.name, requestParameters.number, requestParameters.page, requestParameters.size, requestParameters.sort, options).then((request) => request(this.axios, this.basePath));
    }
}



/**
 * ProfileControllerApi - axios parameter creator
 * @export
 */
export const ProfileControllerApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        descriptor: async (options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/profile/authors`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        descriptor1: async (options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/profile/bookMasterAuthorRelationships`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        descriptor2: async (options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/profile/bookMasters`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        descriptor3: async (options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/profile/bookStockStatuses`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        descriptor4: async (options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/profile/bookStocks`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        descriptor5: async (options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/profile/customers`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        descriptor6: async (options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/profile/lendingSets`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        descriptor7: async (options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/profile/lendingStatuses`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        descriptor8: async (options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/profile/ndcCategories`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listAllFormsOfMetadata: async (options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/profile`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * ProfileControllerApi - functional programming interface
 * @export
 */
export const ProfileControllerApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = ProfileControllerApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async descriptor(options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<string>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.descriptor(options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['ProfileControllerApi.descriptor']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async descriptor1(options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<string>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.descriptor1(options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['ProfileControllerApi.descriptor1']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async descriptor2(options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<string>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.descriptor2(options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['ProfileControllerApi.descriptor2']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async descriptor3(options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<string>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.descriptor3(options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['ProfileControllerApi.descriptor3']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async descriptor4(options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<string>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.descriptor4(options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['ProfileControllerApi.descriptor4']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async descriptor5(options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<string>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.descriptor5(options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['ProfileControllerApi.descriptor5']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async descriptor6(options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<string>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.descriptor6(options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['ProfileControllerApi.descriptor6']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async descriptor7(options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<string>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.descriptor7(options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['ProfileControllerApi.descriptor7']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async descriptor8(options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<string>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.descriptor8(options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['ProfileControllerApi.descriptor8']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async listAllFormsOfMetadata(options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<RepresentationModelObject>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.listAllFormsOfMetadata(options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['ProfileControllerApi.listAllFormsOfMetadata']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * ProfileControllerApi - factory interface
 * @export
 */
export const ProfileControllerApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = ProfileControllerApiFp(configuration)
    return {
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        descriptor(options?: RawAxiosRequestConfig): AxiosPromise<string> {
            return localVarFp.descriptor(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        descriptor1(options?: RawAxiosRequestConfig): AxiosPromise<string> {
            return localVarFp.descriptor1(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        descriptor2(options?: RawAxiosRequestConfig): AxiosPromise<string> {
            return localVarFp.descriptor2(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        descriptor3(options?: RawAxiosRequestConfig): AxiosPromise<string> {
            return localVarFp.descriptor3(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        descriptor4(options?: RawAxiosRequestConfig): AxiosPromise<string> {
            return localVarFp.descriptor4(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        descriptor5(options?: RawAxiosRequestConfig): AxiosPromise<string> {
            return localVarFp.descriptor5(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        descriptor6(options?: RawAxiosRequestConfig): AxiosPromise<string> {
            return localVarFp.descriptor6(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        descriptor7(options?: RawAxiosRequestConfig): AxiosPromise<string> {
            return localVarFp.descriptor7(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        descriptor8(options?: RawAxiosRequestConfig): AxiosPromise<string> {
            return localVarFp.descriptor8(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listAllFormsOfMetadata(options?: RawAxiosRequestConfig): AxiosPromise<RepresentationModelObject> {
            return localVarFp.listAllFormsOfMetadata(options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * ProfileControllerApi - interface
 * @export
 * @interface ProfileControllerApi
 */
export interface ProfileControllerApiInterface {
    /**
     * 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProfileControllerApiInterface
     */
    descriptor(options?: RawAxiosRequestConfig): AxiosPromise<string>;

    /**
     * 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProfileControllerApiInterface
     */
    descriptor1(options?: RawAxiosRequestConfig): AxiosPromise<string>;

    /**
     * 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProfileControllerApiInterface
     */
    descriptor2(options?: RawAxiosRequestConfig): AxiosPromise<string>;

    /**
     * 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProfileControllerApiInterface
     */
    descriptor3(options?: RawAxiosRequestConfig): AxiosPromise<string>;

    /**
     * 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProfileControllerApiInterface
     */
    descriptor4(options?: RawAxiosRequestConfig): AxiosPromise<string>;

    /**
     * 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProfileControllerApiInterface
     */
    descriptor5(options?: RawAxiosRequestConfig): AxiosPromise<string>;

    /**
     * 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProfileControllerApiInterface
     */
    descriptor6(options?: RawAxiosRequestConfig): AxiosPromise<string>;

    /**
     * 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProfileControllerApiInterface
     */
    descriptor7(options?: RawAxiosRequestConfig): AxiosPromise<string>;

    /**
     * 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProfileControllerApiInterface
     */
    descriptor8(options?: RawAxiosRequestConfig): AxiosPromise<string>;

    /**
     * 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProfileControllerApiInterface
     */
    listAllFormsOfMetadata(options?: RawAxiosRequestConfig): AxiosPromise<RepresentationModelObject>;

}

/**
 * ProfileControllerApi - object-oriented interface
 * @export
 * @class ProfileControllerApi
 * @extends {BaseAPI}
 */
export class ProfileControllerApi extends BaseAPI implements ProfileControllerApiInterface {
    /**
     * 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProfileControllerApi
     */
    public descriptor(options?: RawAxiosRequestConfig) {
        return ProfileControllerApiFp(this.configuration).descriptor(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProfileControllerApi
     */
    public descriptor1(options?: RawAxiosRequestConfig) {
        return ProfileControllerApiFp(this.configuration).descriptor1(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProfileControllerApi
     */
    public descriptor2(options?: RawAxiosRequestConfig) {
        return ProfileControllerApiFp(this.configuration).descriptor2(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProfileControllerApi
     */
    public descriptor3(options?: RawAxiosRequestConfig) {
        return ProfileControllerApiFp(this.configuration).descriptor3(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProfileControllerApi
     */
    public descriptor4(options?: RawAxiosRequestConfig) {
        return ProfileControllerApiFp(this.configuration).descriptor4(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProfileControllerApi
     */
    public descriptor5(options?: RawAxiosRequestConfig) {
        return ProfileControllerApiFp(this.configuration).descriptor5(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProfileControllerApi
     */
    public descriptor6(options?: RawAxiosRequestConfig) {
        return ProfileControllerApiFp(this.configuration).descriptor6(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProfileControllerApi
     */
    public descriptor7(options?: RawAxiosRequestConfig) {
        return ProfileControllerApiFp(this.configuration).descriptor7(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProfileControllerApi
     */
    public descriptor8(options?: RawAxiosRequestConfig) {
        return ProfileControllerApiFp(this.configuration).descriptor8(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProfileControllerApi
     */
    public listAllFormsOfMetadata(options?: RawAxiosRequestConfig) {
        return ProfileControllerApiFp(this.configuration).listAllFormsOfMetadata(options).then((request) => request(this.axios, this.basePath));
    }
}



